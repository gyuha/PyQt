[
    {
        "label": "QSharedMemory",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QProcess",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSysInfo",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QFile",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QIODevice",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "qrand",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QBasicTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSortFilterProxyModel",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRegExp",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QFileInfo",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSizeF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "PYQT_CONFIGURATION",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QResource",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSortFilterProxyModel",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSizeF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSortFilterProxyModel",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSizeF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSequentialAnimationGroup",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QIODevice",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QDateTime",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRandomGenerator",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QFileInfo",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRegExp",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QWaitCondition",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QMutex",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLoggingCategory",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLoggingCategory",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLoggingCategory",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QVariant",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QVariant",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QFile",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QIODevice",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QBuffer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QMargins",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEasingCurve",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtProperty",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPropertyAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocalSocket",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QLocalServer",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkRequest",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkRequest",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkRequest",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkRequest",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkRequest",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QNetworkAccessManager",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QSslConfiguration",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QSslCertificate",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QSsl",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QTcpSocket",
        "importPath": "PyQt5.QtNetwork",
        "description": "PyQt5.QtNetwork",
        "isExtraImport": true,
        "detail": "PyQt5.QtNetwork",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextBrowser",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPlainTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "qApp",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCalendarWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileSystemModel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileIconProvider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsPixmapItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsScene",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsScene",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsPolygonItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsPixmapItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsScene",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRubberBand",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPlainTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRadioButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProxyStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleOptionButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPlainTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleOptionSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPlainTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGroupBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProxyStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplashScreen",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSystemTrayIcon",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenu",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "qApp",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsLineItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsLineItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsProxyWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsProxyWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextBrowser",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QColorDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyledItemDelegate",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextBrowser",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextBrowser",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleOption",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyle",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplitter",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextBrowser",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileSystemModel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QEnterEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QWindow",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QWindow",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontMetrics",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCharFormat",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPolygonF",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "qRed",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "qGreen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "qBlue",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "qAlpha",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "qAlpha",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTransform",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPolygonF",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QQuaternion",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QVector3D",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QVector3D",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextDocument",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCharFormat",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextDocument",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTextCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontMetrics",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMovie",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "PyQt5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5",
        "description": "PyQt5",
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "uic",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWinExtras",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWinExtras",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWinExtras",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtQml",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "fabs",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "win32con",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32con",
        "description": "win32con",
        "detail": "win32con",
        "documentation": {}
    },
    {
        "label": "win32gui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32gui",
        "description": "win32gui",
        "detail": "win32gui",
        "documentation": {}
    },
    {
        "label": "BZ2Decompressor",
        "importPath": "bz2",
        "description": "bz2",
        "isExtraImport": true,
        "detail": "bz2",
        "documentation": {}
    },
    {
        "label": "cgitb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cgitb",
        "description": "cgitb",
        "detail": "cgitb",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "dlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dlib",
        "description": "dlib",
        "detail": "dlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "FramelessWindow",
        "importPath": "Lib.FramelessWindow",
        "description": "Lib.FramelessWindow",
        "isExtraImport": true,
        "detail": "Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "QCursorGif",
        "importPath": "Lib.QCursorGif",
        "description": "Lib.QCursorGif",
        "isExtraImport": true,
        "detail": "Lib.QCursorGif",
        "documentation": {}
    },
    {
        "label": "ctypes.wintypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes.wintypes",
        "description": "ctypes.wintypes",
        "detail": "ctypes.wintypes",
        "documentation": {}
    },
    {
        "label": "POINT",
        "importPath": "ctypes.wintypes",
        "description": "ctypes.wintypes",
        "isExtraImport": true,
        "detail": "ctypes.wintypes",
        "documentation": {}
    },
    {
        "label": "QtWin",
        "importPath": "PyQt5.QtWinExtras",
        "description": "PyQt5.QtWinExtras",
        "isExtraImport": true,
        "detail": "PyQt5.QtWinExtras",
        "documentation": {}
    },
    {
        "label": "QWinTaskbarButton",
        "importPath": "PyQt5.QtWinExtras",
        "description": "PyQt5.QtWinExtras",
        "isExtraImport": true,
        "detail": "PyQt5.QtWinExtras",
        "documentation": {}
    },
    {
        "label": "QWinThumbnailToolBar",
        "importPath": "PyQt5.QtWinExtras",
        "description": "PyQt5.QtWinExtras",
        "isExtraImport": true,
        "detail": "PyQt5.QtWinExtras",
        "documentation": {}
    },
    {
        "label": "QWinThumbnailToolButton",
        "importPath": "PyQt5.QtWinExtras",
        "description": "PyQt5.QtWinExtras",
        "isExtraImport": true,
        "detail": "PyQt5.QtWinExtras",
        "documentation": {}
    },
    {
        "label": "win32api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32api",
        "description": "win32api",
        "detail": "win32api",
        "documentation": {}
    },
    {
        "label": "Ui_FormFrameless",
        "importPath": "Lib.ui_frameless",
        "description": "Lib.ui_frameless",
        "isExtraImport": true,
        "detail": "Lib.ui_frameless",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "CDLL",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "sizeof",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_int",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "byref",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_long",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_void_p",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ulong",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_longlong",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "CDLL",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "CDLL",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "SharedApplication",
        "importPath": "Lib.Application",
        "description": "Lib.Application",
        "isExtraImport": true,
        "detail": "Lib.Application",
        "documentation": {}
    },
    {
        "label": "QSingleApplication",
        "importPath": "Lib.Application",
        "description": "Lib.Application",
        "isExtraImport": true,
        "detail": "Lib.Application",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "Ui_NotifyForm",
        "importPath": "Lib.UiNotify",
        "description": "Lib.UiNotify",
        "isExtraImport": true,
        "detail": "Lib.UiNotify",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "pyqtgraph",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "graph_Form",
        "importPath": "PyQtGraph.Data.graphTest",
        "description": "PyQtGraph.Data.graphTest",
        "isExtraImport": true,
        "detail": "PyQtGraph.Data.graphTest",
        "documentation": {}
    },
    {
        "label": "graph_Form",
        "importPath": "PyQtGraph.Data.graphAnalysis",
        "description": "PyQtGraph.Data.graphAnalysis",
        "isExtraImport": true,
        "detail": "PyQtGraph.Data.graphAnalysis",
        "documentation": {}
    },
    {
        "label": "ImageExporter",
        "importPath": "pyqtgraph.exporters.ImageExporter",
        "description": "pyqtgraph.exporters.ImageExporter",
        "isExtraImport": true,
        "detail": "pyqtgraph.exporters.ImageExporter",
        "documentation": {}
    },
    {
        "label": "Exporter",
        "importPath": "pyqtgraph.exporters.ImageExporter",
        "description": "pyqtgraph.exporters.ImageExporter",
        "isExtraImport": true,
        "detail": "pyqtgraph.exporters.ImageExporter",
        "documentation": {}
    },
    {
        "label": "Parameter",
        "importPath": "pyqtgraph.parametertree",
        "description": "pyqtgraph.parametertree",
        "isExtraImport": true,
        "detail": "pyqtgraph.parametertree",
        "documentation": {}
    },
    {
        "label": "QAxWidget",
        "importPath": "PyQt5.QAxContainer",
        "description": "PyQt5.QAxContainer",
        "isExtraImport": true,
        "detail": "PyQt5.QAxContainer",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "chardet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chardet",
        "description": "chardet",
        "detail": "chardet",
        "documentation": {}
    },
    {
        "label": "QSvgWidget",
        "importPath": "PyQt5.QtSvg",
        "description": "PyQt5.QtSvg",
        "isExtraImport": true,
        "detail": "PyQt5.QtSvg",
        "documentation": {}
    },
    {
        "label": "QSvgWidget",
        "importPath": "PyQt5.QtSvg",
        "description": "PyQt5.QtSvg",
        "isExtraImport": true,
        "detail": "PyQt5.QtSvg",
        "documentation": {}
    },
    {
        "label": "QSvgWidget",
        "importPath": "PyQt5.QtSvg",
        "description": "PyQt5.QtSvg",
        "isExtraImport": true,
        "detail": "PyQt5.QtSvg",
        "documentation": {}
    },
    {
        "label": "QSvgRenderer",
        "importPath": "PyQt5.QtSvg",
        "description": "PyQt5.QtSvg",
        "isExtraImport": true,
        "detail": "PyQt5.QtSvg",
        "documentation": {}
    },
    {
        "label": "FlowLayout",
        "importPath": "Lib.flowlayout",
        "description": "Lib.flowlayout",
        "isExtraImport": true,
        "detail": "Lib.flowlayout",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "lxml.etree",
        "description": "lxml.etree",
        "isExtraImport": true,
        "detail": "lxml.etree",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "lxml.etree",
        "description": "lxml.etree",
        "isExtraImport": true,
        "detail": "lxml.etree",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "lxml.etree",
        "description": "lxml.etree",
        "isExtraImport": true,
        "detail": "lxml.etree",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "FontAwesomes",
        "importPath": "Lib.FontAwesome",
        "description": "Lib.FontAwesome",
        "isExtraImport": true,
        "detail": "Lib.FontAwesome",
        "documentation": {}
    },
    {
        "label": "AnimationShadowEffect",
        "importPath": "Lib.AnimationShadowEffect",
        "description": "Lib.AnimationShadowEffect",
        "isExtraImport": true,
        "detail": "Lib.AnimationShadowEffect",
        "documentation": {}
    },
    {
        "label": "QGLFormat",
        "importPath": "PyQt5.QtOpenGL",
        "description": "PyQt5.QtOpenGL",
        "isExtraImport": true,
        "detail": "PyQt5.QtOpenGL",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sipconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sipconfig",
        "description": "sipconfig",
        "detail": "sipconfig",
        "documentation": {}
    },
    {
        "label": "NinePatch",
        "importPath": "Lib.NinePatch",
        "description": "Lib.NinePatch",
        "isExtraImport": true,
        "detail": "Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "QtNinePatch",
        "importPath": "Lib.QtNinePatch.sip.QtNinePatch",
        "description": "Lib.QtNinePatch.sip.QtNinePatch",
        "isExtraImport": true,
        "detail": "Lib.QtNinePatch.sip.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "QtNinePatch2",
        "importPath": "Lib",
        "description": "Lib",
        "isExtraImport": true,
        "detail": "Lib",
        "documentation": {}
    },
    {
        "label": "res_rc",
        "importPath": "Lib",
        "description": "Lib",
        "isExtraImport": true,
        "detail": "Lib",
        "documentation": {}
    },
    {
        "label": "data_rc",
        "importPath": "Lib",
        "description": "Lib",
        "isExtraImport": true,
        "detail": "Lib",
        "documentation": {}
    },
    {
        "label": "image_head",
        "importPath": "Lib.xpmres",
        "description": "Lib.xpmres",
        "isExtraImport": true,
        "detail": "Lib.xpmres",
        "documentation": {}
    },
    {
        "label": "DWaterProgress",
        "importPath": "Lib.DWaterProgress",
        "description": "Lib.DWaterProgress",
        "isExtraImport": true,
        "detail": "Lib.DWaterProgress",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PyQt5.Qt",
        "description": "PyQt5.Qt",
        "isExtraImport": true,
        "detail": "PyQt5.Qt",
        "documentation": {}
    },
    {
        "label": "QDir",
        "importPath": "PyQt5.Qt",
        "description": "PyQt5.Qt",
        "isExtraImport": true,
        "detail": "PyQt5.Qt",
        "documentation": {}
    },
    {
        "label": "WaterRippleProgressBar",
        "importPath": "Lib.WaterRippleProgressBar",
        "description": "Lib.WaterRippleProgressBar",
        "isExtraImport": true,
        "detail": "Lib.WaterRippleProgressBar",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "SlidingStackedWidget",
        "importPath": "Lib.SlidingStackedWidget",
        "description": "Lib.SlidingStackedWidget",
        "isExtraImport": true,
        "detail": "Lib.SlidingStackedWidget",
        "documentation": {}
    },
    {
        "label": "FlipWidget",
        "importPath": "Lib.FlipWidget",
        "description": "Lib.FlipWidget",
        "isExtraImport": true,
        "detail": "Lib.FlipWidget",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "Lib.UiImageSlider",
        "description": "Lib.UiImageSlider",
        "isExtraImport": true,
        "detail": "Lib.UiImageSlider",
        "documentation": {}
    },
    {
        "label": "TabBarStyle",
        "importPath": "Lib.TabBarStyle",
        "description": "Lib.TabBarStyle",
        "isExtraImport": true,
        "detail": "Lib.TabBarStyle",
        "documentation": {}
    },
    {
        "label": "Ui_Setting",
        "importPath": "Lib.SettingUi",
        "description": "Lib.SettingUi",
        "isExtraImport": true,
        "detail": "Lib.SettingUi",
        "documentation": {}
    },
    {
        "label": "QSerialPortInfo",
        "importPath": "PyQt5.QtSerialPort",
        "description": "PyQt5.QtSerialPort",
        "isExtraImport": true,
        "detail": "PyQt5.QtSerialPort",
        "documentation": {}
    },
    {
        "label": "QSerialPort",
        "importPath": "PyQt5.QtSerialPort",
        "description": "PyQt5.QtSerialPort",
        "isExtraImport": true,
        "detail": "PyQt5.QtSerialPort",
        "documentation": {}
    },
    {
        "label": "Ui_FormSerialPort",
        "importPath": "Lib.UiSerialPort",
        "description": "Lib.UiSerialPort",
        "isExtraImport": true,
        "detail": "Lib.UiSerialPort",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative.api",
        "description": "sqlalchemy.ext.declarative.api",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative.api",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm.session",
        "description": "sqlalchemy.orm.session",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.session",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy.sql.schema",
        "description": "sqlalchemy.sql.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.schema",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "Lib.mainui",
        "description": "Lib.mainui",
        "isExtraImport": true,
        "detail": "Lib.mainui",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QAreaSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QAreaSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QPieSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QScatterSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QSplineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QStackedBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QSplineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QDateTimeAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QValueAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QSplineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QValueAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QHorizontalBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QHorizontalPercentBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLegend",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarSet",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QPercentBarSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QBarCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QPieSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QScatterSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QSplineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChart",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QLineSeries",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QCategoryAxis",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "QChartView",
        "importPath": "PyQt5.QtChart",
        "description": "PyQt5.QtChart",
        "isExtraImport": true,
        "detail": "PyQt5.QtChart",
        "documentation": {}
    },
    {
        "label": "cpu_percent",
        "importPath": "psutil",
        "description": "psutil",
        "isExtraImport": true,
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "Q3DBars",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DCamera",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DTheme",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DGraph",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QBar3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QBarDataItem",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QCategory3DAxis",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QValue3DAxis",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DCamera",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DScatter",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DTheme",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DGraph",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QScatter3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QScatterDataItem",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DCamera",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DTheme",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "Q3DScatter",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DGraph",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QAbstract3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QScatter3DSeries",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QScatterDataItem",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "QScatterDataProxy",
        "importPath": "PyQt5.QtDataVisualization",
        "description": "PyQt5.QtDataVisualization",
        "isExtraImport": true,
        "detail": "PyQt5.QtDataVisualization",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "SuspendThread",
        "importPath": "win32process",
        "description": "win32process",
        "isExtraImport": true,
        "detail": "win32process",
        "documentation": {}
    },
    {
        "label": "ResumeThread",
        "importPath": "win32process",
        "description": "win32process",
        "isExtraImport": true,
        "detail": "win32process",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PyQt5.QtQml",
        "description": "PyQt5.QtQml",
        "isExtraImport": true,
        "detail": "PyQt5.QtQml",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PyQt5.QtQml",
        "description": "PyQt5.QtQml",
        "isExtraImport": true,
        "detail": "PyQt5.QtQml",
        "documentation": {}
    },
    {
        "label": "qmlRegisterType",
        "importPath": "PyQt5.QtQml",
        "description": "PyQt5.QtQml",
        "isExtraImport": true,
        "detail": "PyQt5.QtQml",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtQml",
        "description": "PyQt5.QtQml",
        "isExtraImport": true,
        "detail": "PyQt5.QtQml",
        "documentation": {}
    },
    {
        "label": "QtQuick.Controls",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "QtQuick.Controls",
        "description": "QtQuick.Controls",
        "detail": "QtQuick.Controls",
        "documentation": {}
    },
    {
        "label": "QtQuick.Layouts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "QtQuick.Layouts",
        "description": "QtQuick.Layouts",
        "detail": "QtQuick.Layouts",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "Lib.testTree",
        "description": "Lib.testTree",
        "isExtraImport": true,
        "detail": "Lib.testTree",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectNode",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectRegistryHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectNode",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectNode",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectRegistryHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectNode",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectReplica",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectHost",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectNode",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QRemoteObjectReplica",
        "importPath": "PyQt5.QtRemoteObjects",
        "description": "PyQt5.QtRemoteObjects",
        "isExtraImport": true,
        "detail": "PyQt5.QtRemoteObjects",
        "documentation": {}
    },
    {
        "label": "QWebEngineUrlRequestInterceptor",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "QWebEngineUrlSchemeHandler",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "QWebEngineUrlSchemeHandler",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "QWebEngineUrlScheme",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWebEngineCore",
        "description": "PyQt5.QtWebEngineCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineCore",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineProfile",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineProfile",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineProfile",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineProfile",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineSettings",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineSettings",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEnginePage",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebEngineView",
        "importPath": "PyQt5.QtWebEngineWidgets",
        "description": "PyQt5.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "QWebChannel",
        "importPath": "PyQt5.QtWebChannel",
        "description": "PyQt5.QtWebChannel",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebChannel",
        "documentation": {}
    },
    {
        "label": "QWebChannel",
        "importPath": "PyQt5.QtWebChannel",
        "description": "PyQt5.QtWebChannel",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebChannel",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebView",
        "importPath": "PyQt5.QtWebKitWidgets",
        "description": "PyQt5.QtWebKitWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKitWidgets",
        "documentation": {}
    },
    {
        "label": "QWebSettings",
        "importPath": "PyQt5.QtWebKit",
        "description": "PyQt5.QtWebKit",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKit",
        "documentation": {}
    },
    {
        "label": "QWebSettings",
        "importPath": "PyQt5.QtWebKit",
        "description": "PyQt5.QtWebKit",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKit",
        "documentation": {}
    },
    {
        "label": "QWebSettings",
        "importPath": "PyQt5.QtWebKit",
        "description": "PyQt5.QtWebKit",
        "isExtraImport": true,
        "detail": "PyQt5.QtWebKit",
        "documentation": {}
    },
    {
        "label": "CustomPaintWidget",
        "importPath": "Lib.CustomPaintWidget",
        "description": "Lib.CustomPaintWidget",
        "isExtraImport": true,
        "detail": "Lib.CustomPaintWidget",
        "documentation": {}
    },
    {
        "label": "CustomWidget",
        "importPath": "Lib.CustomWidget",
        "description": "Lib.CustomWidget",
        "isExtraImport": true,
        "detail": "Lib.CustomWidget",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "QsciScintilla",
        "importPath": "PyQt5.Qsci",
        "description": "PyQt5.Qsci",
        "isExtraImport": true,
        "detail": "PyQt5.Qsci",
        "documentation": {}
    },
    {
        "label": "QsciLexerJSON",
        "importPath": "PyQt5.Qsci",
        "description": "PyQt5.Qsci",
        "isExtraImport": true,
        "detail": "PyQt5.Qsci",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "importPath": "ChartView",
        "description": "ChartView",
        "isExtraImport": true,
        "detail": "ChartView",
        "documentation": {}
    },
    {
        "label": "pydext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydext",
        "description": "pydext",
        "detail": "pydext",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "Cython.Distutils",
        "description": "Cython.Distutils",
        "isExtraImport": true,
        "detail": "Cython.Distutils",
        "documentation": {}
    },
    {
        "label": "build_ext",
        "importPath": "Cython.Distutils",
        "description": "Cython.Distutils",
        "isExtraImport": true,
        "detail": "Cython.Distutils",
        "documentation": {}
    },
    {
        "label": "calspecaccel",
        "importPath": "CalSpecSpea",
        "description": "CalSpecSpea",
        "isExtraImport": true,
        "detail": "CalSpecSpea",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "pydmod",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydmod",
        "description": "pydmod",
        "detail": "pydmod",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "gen",
        "importPath": "tornado",
        "description": "tornado",
        "isExtraImport": true,
        "detail": "tornado",
        "documentation": {}
    },
    {
        "label": "IOLoop",
        "importPath": "tornado.ioloop",
        "description": "tornado.ioloop",
        "isExtraImport": true,
        "detail": "tornado.ioloop",
        "documentation": {}
    },
    {
        "label": "StreamClosedError",
        "importPath": "tornado.iostream",
        "description": "tornado.iostream",
        "isExtraImport": true,
        "detail": "tornado.iostream",
        "documentation": {}
    },
    {
        "label": "options",
        "importPath": "tornado.options",
        "description": "tornado.options",
        "isExtraImport": true,
        "detail": "tornado.options",
        "documentation": {}
    },
    {
        "label": "define",
        "importPath": "tornado.options",
        "description": "tornado.options",
        "isExtraImport": true,
        "detail": "tornado.options",
        "documentation": {}
    },
    {
        "label": "TCPServer",
        "importPath": "tornado.tcpserver",
        "description": "tornado.tcpserver",
        "isExtraImport": true,
        "detail": "tornado.tcpserver",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "QEventLoop",
        "importPath": "quamash",
        "description": "quamash",
        "isExtraImport": true,
        "detail": "quamash",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "importPath": "Ui_动态控件",
        "description": "Ui_动态控件",
        "isExtraImport": true,
        "detail": "Ui_动态控件",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "importPath": "Ui_动态控件",
        "description": "Ui_动态控件",
        "isExtraImport": true,
        "detail": "Ui_动态控件",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtSql",
        "description": "PyQt5.QtSql",
        "isExtraImport": true,
        "detail": "PyQt5.QtSql",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtSql",
        "description": "PyQt5.QtSql",
        "isExtraImport": true,
        "detail": "PyQt5.QtSql",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "importPath": "Ui_getModel",
        "description": "Ui_getModel",
        "isExtraImport": true,
        "detail": "Ui_getModel",
        "documentation": {}
    },
    {
        "label": "myRes_rc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "myRes_rc",
        "description": "myRes_rc",
        "detail": "myRes_rc",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Tools.pmf_myjson",
        "description": "Tools.pmf_myjson",
        "isExtraImport": true,
        "detail": "Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Tools.pmf_myjson",
        "description": "Tools.pmf_myjson",
        "isExtraImport": true,
        "detail": "Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "PluginStore",
        "importPath": "PluginManager.PluginStore",
        "description": "PluginManager.PluginStore",
        "isExtraImport": true,
        "detail": "PluginManager.PluginStore",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "importPath": "PluginManager.PluginStore.StoreModel",
        "description": "PluginManager.PluginStore.StoreModel",
        "isExtraImport": true,
        "detail": "PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "importPath": "PluginManager.PluginManager",
        "description": "PluginManager.PluginManager",
        "isExtraImport": true,
        "detail": "PluginManager.PluginManager",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "importPath": "Ui_MainWindow",
        "description": "Ui_MainWindow",
        "isExtraImport": true,
        "detail": "Ui_MainWindow",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtPrintSupport",
        "description": "PyQt5.QtPrintSupport",
        "isExtraImport": true,
        "detail": "PyQt5.QtPrintSupport",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "SingeleWidget",
        "importPath": "BaseElement",
        "description": "BaseElement",
        "isExtraImport": true,
        "detail": "BaseElement",
        "documentation": {}
    },
    {
        "label": "B1",
        "importPath": "Menu",
        "description": "Menu",
        "isExtraImport": true,
        "detail": "Menu",
        "documentation": {}
    },
    {
        "label": "B2",
        "importPath": "Menu",
        "description": "Menu",
        "isExtraImport": true,
        "detail": "Menu",
        "documentation": {}
    },
    {
        "label": "B3",
        "importPath": "Menu",
        "description": "Menu",
        "isExtraImport": true,
        "detail": "Menu",
        "documentation": {}
    },
    {
        "label": "B4",
        "importPath": "Menu",
        "description": "Menu",
        "isExtraImport": true,
        "detail": "Menu",
        "documentation": {}
    },
    {
        "label": "tbqrc_rc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tbqrc_rc",
        "description": "tbqrc_rc",
        "detail": "tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "f_showERROR",
        "importPath": "Tools.qmf_showError",
        "description": "Tools.qmf_showError",
        "isExtraImport": true,
        "detail": "Tools.qmf_showError",
        "documentation": {}
    },
    {
        "label": "w_showERROR",
        "importPath": "Tools.qmf_showError",
        "description": "Tools.qmf_showError",
        "isExtraImport": true,
        "detail": "Tools.qmf_showError",
        "documentation": {}
    },
    {
        "label": "w_showERROR",
        "importPath": "Tools.qmf_showError",
        "description": "Tools.qmf_showError",
        "isExtraImport": true,
        "detail": "Tools.qmf_showError",
        "documentation": {}
    },
    {
        "label": "CommonHelper",
        "importPath": "Tools.CommonHelper",
        "description": "Tools.CommonHelper",
        "isExtraImport": true,
        "detail": "Tools.CommonHelper",
        "documentation": {}
    },
    {
        "label": "CommonHelper",
        "importPath": "Tools.CommonHelper",
        "description": "Tools.CommonHelper",
        "isExtraImport": true,
        "detail": "Tools.CommonHelper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "U_FuncWidget.BaseElement",
        "description": "U_FuncWidget.BaseElement",
        "isExtraImport": true,
        "detail": "U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "SingeleWidget",
        "importPath": "U_FuncWidget.BaseElement",
        "description": "U_FuncWidget.BaseElement",
        "isExtraImport": true,
        "detail": "U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "GeographicAnalysis_Widget",
        "importPath": "U_FuncWidget.UThroughTrain4",
        "description": "U_FuncWidget.UThroughTrain4",
        "isExtraImport": true,
        "detail": "U_FuncWidget.UThroughTrain4",
        "documentation": {}
    },
    {
        "label": "SKU_Widget",
        "importPath": "U_FuncWidget.UCompetitiveProduct2",
        "description": "U_FuncWidget.UCompetitiveProduct2",
        "isExtraImport": true,
        "detail": "U_FuncWidget.UCompetitiveProduct2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "U_FuncWidget.Menu",
        "description": "U_FuncWidget.Menu",
        "isExtraImport": true,
        "detail": "U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B1",
        "importPath": "U_FuncWidget.Menu",
        "description": "U_FuncWidget.Menu",
        "isExtraImport": true,
        "detail": "U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B2",
        "importPath": "U_FuncWidget.Menu",
        "description": "U_FuncWidget.Menu",
        "isExtraImport": true,
        "detail": "U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B3",
        "importPath": "U_FuncWidget.Menu",
        "description": "U_FuncWidget.Menu",
        "isExtraImport": true,
        "detail": "U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B4",
        "importPath": "U_FuncWidget.Menu",
        "description": "U_FuncWidget.Menu",
        "isExtraImport": true,
        "detail": "U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "importPath": "Ui_Main",
        "description": "Ui_Main",
        "isExtraImport": true,
        "detail": "Ui_Main",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickPaintedItem",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PyQt5.QtQuick",
        "description": "PyQt5.QtQuick",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuick",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtQuickWidgets",
        "description": "PyQt5.QtQuickWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuickWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtQuickWidgets",
        "description": "PyQt5.QtQuickWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtQuickWidgets",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "importPath": "Ui_py_qml",
        "description": "Ui_py_qml",
        "isExtraImport": true,
        "detail": "Ui_py_qml",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "importPath": "Ui_py_qml",
        "description": "Ui_py_qml",
        "isExtraImport": true,
        "detail": "Ui_py_qml",
        "documentation": {}
    },
    {
        "label": "qml_rc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qml_rc",
        "description": "qml_rc",
        "detail": "qml_rc",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "py_compile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "py_compile",
        "description": "py_compile",
        "detail": "py_compile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZIP_DEFLATED",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "py2exe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "py2exe",
        "description": "py2exe",
        "detail": "py2exe",
        "documentation": {}
    },
    {
        "label": "xxtea",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xxtea",
        "description": "xxtea",
        "detail": "xxtea",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "IronyImporter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "IronyImporter",
        "description": "IronyImporter",
        "detail": "IronyImporter",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "test",
        "description": "test",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "google_translator",
        "importPath": "google_trans_new",
        "description": "google_trans_new",
        "isExtraImport": true,
        "detail": "google_trans_new",
        "documentation": {}
    },
    {
        "label": "SharedApplication",
        "kind": 6,
        "importPath": "Demo.Lib.Application",
        "description": "Demo.Lib.Application",
        "peekOfCode": "class SharedApplication(QApplication):\n    def __init__(self, *args, **kwargs):\n        super(SharedApplication, self).__init__(*args, **kwargs)\n        self._running = False\n        key = \"SharedApplication\" + __version__\n        self._memory = QSharedMemory(key, self)\n        isAttached = self._memory.isAttached()\n        print(\"isAttached\", isAttached)\n        if isAttached:  # 프로세스가 공유 메모리에 연결되어있는 경우 \n            detach = self._memory.detach()  # 取 进 공유 메모리에 연결된 프로세스가 있습니다 ",
        "detail": "Demo.Lib.Application",
        "documentation": {}
    },
    {
        "label": "QSingleApplication",
        "kind": 6,
        "importPath": "Demo.Lib.Application",
        "description": "Demo.Lib.Application",
        "peekOfCode": "class QSingleApplication(QApplication):\n    messageReceived = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(QSingleApplication, self).__init__(*args, **kwargs)\n        appid = QApplication.applicationFilePath().lower().split(\"/\")[-1]\n        self._socketName = \"qtsingleapp-\" + appid\n        print(\"socketName\", self._socketName)\n        self._activationWindow = None\n        self._activateOnMessage = False\n        self._socketServer = None",
        "detail": "Demo.Lib.Application",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.Lib.Application",
        "description": "Demo.Lib.Application",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass SharedApplication(QApplication):\n    def __init__(self, *args, **kwargs):\n        super(SharedApplication, self).__init__(*args, **kwargs)\n        self._running = False\n        key = \"SharedApplication\" + __version__\n        self._memory = QSharedMemory(key, self)\n        isAttached = self._memory.isAttached()\n        print(\"isAttached\", isAttached)\n        if isAttached:  # 프로세스가 공유 메모리에 연결되어있는 경우 ",
        "detail": "Demo.Lib.Application",
        "documentation": {}
    },
    {
        "label": "TitleBar",
        "kind": 6,
        "importPath": "Demo.Lib.FramelessWindow",
        "description": "Demo.Lib.FramelessWindow",
        "peekOfCode": "class TitleBar(QWidget):\n    신호 창 최소화 # \n    windowMinimumed = pyqtSignal()\n    # 口 최대화 신호 \n    windowMaximumed = pyqtSignal()\n    # 还 还原 信号 \n    windowNormaled = pyqtSignal()\n    # 关 闭 信号 \n    windowClosed = pyqtSignal()\n    # 移动 移动 移动 ",
        "detail": "Demo.Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "FramelessWindow",
        "kind": 6,
        "importPath": "Demo.Lib.FramelessWindow",
        "description": "Demo.Lib.FramelessWindow",
        "peekOfCode": "class FramelessWindow(QWidget):\n    # 四 四 边 \n    Margins = 5\n    def __init__(self, *args, **kwargs):\n        super(FramelessWindow, self).__init__(*args, **kwargs)\n        self._pressed = False\n        self.Direction = None\n        # 배경 투명 \n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        # 무시건 ",
        "detail": "Demo.Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.Lib.FramelessWindow",
        "description": "Demo.Lib.FramelessWindow",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass TitleBar(QWidget):\n    신호 창 최소화 # \n    windowMinimumed = pyqtSignal()\n    # 口 최대화 신호 \n    windowMaximumed = pyqtSignal()",
        "detail": "Demo.Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.Lib.FramelessWindow",
        "description": "Demo.Lib.FramelessWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass TitleBar(QWidget):\n    신호 창 최소화 # \n    windowMinimumed = pyqtSignal()\n    # 口 최대화 신호 \n    windowMaximumed = pyqtSignal()\n    # 还 还原 信号 \n    windowNormaled = pyqtSignal()\n    # 关 闭 信号 ",
        "detail": "Demo.Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.Lib.FramelessWindow",
        "description": "Demo.Lib.FramelessWindow",
        "peekOfCode": "__Version__ = 1.0\nclass TitleBar(QWidget):\n    신호 창 최소화 # \n    windowMinimumed = pyqtSignal()\n    # 口 최대화 신호 \n    windowMaximumed = pyqtSignal()\n    # 还 还原 信号 \n    windowNormaled = pyqtSignal()\n    # 关 闭 信号 \n    windowClosed = pyqtSignal()",
        "detail": "Demo.Lib.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "QCursorGif",
        "kind": 6,
        "importPath": "Demo.Lib.QCursorGif",
        "description": "Demo.Lib.QCursorGif",
        "peekOfCode": "class QCursorGif:\n    def initCursor(self, cursors, parent=None):\n        # 기본 커서를 녹화하십시오 \n        self._oldCursor = Qt.ArrowCursor\n        self.setOldCursor(parent)\n        # 커서 사진로드 \n        self._cursorImages = [\n            QCursor(QPixmap(cursor)) for cursor in cursors]\n        self._cursorIndex = 0\n        self._cursorCount = len(self._cursorImages) - 1",
        "detail": "Demo.Lib.QCursorGif",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.Lib.QCursorGif",
        "description": "Demo.Lib.QCursorGif",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 1.0\nclass QCursorGif:\n    def initCursor(self, cursors, parent=None):\n        # 기본 커서를 녹화하십시오 \n        self._oldCursor = Qt.ArrowCursor\n        self.setOldCursor(parent)\n        # 커서 사진로드 \n        self._cursorImages = [",
        "detail": "Demo.Lib.QCursorGif",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.Lib.QCursorGif",
        "description": "Demo.Lib.QCursorGif",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 1.0\nclass QCursorGif:\n    def initCursor(self, cursors, parent=None):\n        # 기본 커서를 녹화하십시오 \n        self._oldCursor = Qt.ArrowCursor\n        self.setOldCursor(parent)\n        # 커서 사진로드 \n        self._cursorImages = [\n            QCursor(QPixmap(cursor)) for cursor in cursors]",
        "detail": "Demo.Lib.QCursorGif",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.Lib.QCursorGif",
        "description": "Demo.Lib.QCursorGif",
        "peekOfCode": "__Version__ = 1.0\nclass QCursorGif:\n    def initCursor(self, cursors, parent=None):\n        # 기본 커서를 녹화하십시오 \n        self._oldCursor = Qt.ArrowCursor\n        self.setOldCursor(parent)\n        # 커서 사진로드 \n        self._cursorImages = [\n            QCursor(QPixmap(cursor)) for cursor in cursors]\n        self._cursorIndex = 0",
        "detail": "Demo.Lib.QCursorGif",
        "documentation": {}
    },
    {
        "label": "Ui_NotifyForm",
        "kind": 6,
        "importPath": "Demo.Lib.UiNotify",
        "description": "Demo.Lib.UiNotify",
        "peekOfCode": "class Ui_NotifyForm(object):\n    def setupUi(self, NotifyForm):\n        NotifyForm.setObjectName(\"NotifyForm\")\n        NotifyForm.resize(300, 200)\n        NotifyForm.setStyleSheet(\"QWidget#widgetTitle {\\n\"\n\"    background-color: rgb(76, 169, 106);\\n\"\n\"}\\n\"\n\"QWidget#widgetBottom {\\n\"\n\"    border-top-style: solid;\\n\"\n\"    border-top-width: 2px;\\n\"",
        "detail": "Demo.Lib.UiNotify",
        "documentation": {}
    },
    {
        "label": "Ui_FormFrameless",
        "kind": 6,
        "importPath": "Demo.Lib.ui_frameless",
        "description": "Demo.Lib.ui_frameless",
        "peekOfCode": "class Ui_FormFrameless(object):\n    def setupUi(self, FormFrameless):\n        FormFrameless.setObjectName(\"FormFrameless\")\n        FormFrameless.resize(400, 300)\n        self.verticalLayout = QtWidgets.QVBoxLayout(FormFrameless)\n        self.verticalLayout.setContentsMargins(3, 3, 3, 3)\n        self.verticalLayout.setSpacing(0)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.widgetTitleBar = QtWidgets.QWidget(FormFrameless)\n        font = QtGui.QFont()",
        "detail": "Demo.Lib.ui_frameless",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.AutoRestart",
        "description": "Demo.AutoRestart",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QHBoxLayout(self)\n        self.buttonRestart = QPushButton(\n            \"app start...%s...twice\\napp pid: %s\\n点击按钮重启...\\n\" %\n            (options.twice, os.getpid()), self)\n        self.buttonRestart.clicked.connect(self.close)\n        self.buttonExit = QPushButton('退出', self, clicked=self.doExit)",
        "detail": "Demo.AutoRestart",
        "documentation": {}
    },
    {
        "label": "restart",
        "kind": 2,
        "importPath": "Demo.AutoRestart",
        "description": "Demo.AutoRestart",
        "peekOfCode": "def restart(twice):\n    os.execl(sys.executable, sys.executable, *[sys.argv[0], \"-t\", twice])\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QHBoxLayout(self)\n        self.buttonRestart = QPushButton(\n            \"app start...%s...twice\\napp pid: %s\\n点击按钮重启...\\n\" %\n            (options.twice, os.getpid()), self)",
        "detail": "Demo.AutoRestart",
        "documentation": {}
    },
    {
        "label": "canRestart",
        "kind": 5,
        "importPath": "Demo.AutoRestart",
        "description": "Demo.AutoRestart",
        "peekOfCode": "canRestart = True\ndef restart(twice):\n    os.execl(sys.executable, sys.executable, *[sys.argv[0], \"-t\", twice])\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QHBoxLayout(self)\n        self.buttonRestart = QPushButton(\n            \"app start...%s...twice\\napp pid: %s\\n点击按钮重启...\\n\" %",
        "detail": "Demo.AutoRestart",
        "documentation": {}
    },
    {
        "label": "BubbleLabel",
        "kind": 6,
        "importPath": "Demo.BubbleTips",
        "description": "Demo.BubbleTips",
        "peekOfCode": "class BubbleLabel(QWidget):\n    BackgroundColor = QColor(195, 195, 195)\n    BorderColor = QColor(150, 150, 150)\n    def __init__(self, *args, **kwargs):\n        text = kwargs.pop(\"text\", \"\")\n        super(BubbleLabel, self).__init__(*args, **kwargs)\n        # 무한한 프레임을 설정합니다 \n        self.setWindowFlags(\n            Qt.Window | Qt.Tool | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.X11BypassWindowManagerHint)\n        # 최소 너비와 높이를 설정하십시오 ",
        "detail": "Demo.BubbleTips",
        "documentation": {}
    },
    {
        "label": "TestWidget",
        "kind": 6,
        "importPath": "Demo.BubbleTips",
        "description": "Demo.BubbleTips",
        "peekOfCode": "class TestWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(TestWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.msgEdit = QLineEdit(self, returnPressed=self.onMsgShow)\n        self.msgButton = QPushButton(\"显示内容\", self, clicked=self.onMsgShow)\n        layout.addWidget(self.msgEdit)\n        layout.addWidget(self.msgButton)\n    def onMsgShow(self):\n        msg = self.msgEdit.text().strip()",
        "detail": "Demo.BubbleTips",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.BubbleTips",
        "description": "Demo.BubbleTips",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass BubbleLabel(QWidget):\n    BackgroundColor = QColor(195, 195, 195)\n    BorderColor = QColor(150, 150, 150)\n    def __init__(self, *args, **kwargs):\n        text = kwargs.pop(\"text\", \"\")\n        super(BubbleLabel, self).__init__(*args, **kwargs)\n        # 무한한 프레임을 설정합니다 ",
        "detail": "Demo.BubbleTips",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.BubbleTips",
        "description": "Demo.BubbleTips",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass BubbleLabel(QWidget):\n    BackgroundColor = QColor(195, 195, 195)\n    BorderColor = QColor(150, 150, 150)\n    def __init__(self, *args, **kwargs):\n        text = kwargs.pop(\"text\", \"\")\n        super(BubbleLabel, self).__init__(*args, **kwargs)\n        # 무한한 프레임을 설정합니다 \n        self.setWindowFlags(",
        "detail": "Demo.BubbleTips",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.BubbleTips",
        "description": "Demo.BubbleTips",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass BubbleLabel(QWidget):\n    BackgroundColor = QColor(195, 195, 195)\n    BorderColor = QColor(150, 150, 150)\n    def __init__(self, *args, **kwargs):\n        text = kwargs.pop(\"text\", \"\")\n        super(BubbleLabel, self).__init__(*args, **kwargs)\n        # 무한한 프레임을 설정합니다 \n        self.setWindowFlags(\n            Qt.Window | Qt.Tool | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.X11BypassWindowManagerHint)",
        "detail": "Demo.BubbleTips",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.CallVirtualKeyboard",
        "description": "Demo.CallVirtualKeyboard",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.resultEdit = QTextEdit(self)\n        self.resultEdit.setReadOnly(True)\n        layout.addWidget(self.resultEdit)\n        layout.addWidget(QPushButton(\n            '打开虚拟键盘', self, clicked=self._onOpenKeyboard))\n    def _onOpenKeyboard(self):",
        "detail": "Demo.CallVirtualKeyboard",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.CallVirtualKeyboard",
        "description": "Demo.CallVirtualKeyboard",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.resultEdit = QTextEdit(self)\n        self.resultEdit.setReadOnly(True)\n        layout.addWidget(self.resultEdit)",
        "detail": "Demo.CallVirtualKeyboard",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.CallVirtualKeyboard",
        "description": "Demo.CallVirtualKeyboard",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.resultEdit = QTextEdit(self)\n        self.resultEdit.setReadOnly(True)\n        layout.addWidget(self.resultEdit)\n        layout.addWidget(QPushButton(",
        "detail": "Demo.CallVirtualKeyboard",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.CallVirtualKeyboard",
        "description": "Demo.CallVirtualKeyboard",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.resultEdit = QTextEdit(self)\n        self.resultEdit.setReadOnly(True)\n        layout.addWidget(self.resultEdit)\n        layout.addWidget(QPushButton(\n            '打开虚拟键盘', self, clicked=self._onOpenKeyboard))",
        "detail": "Demo.CallVirtualKeyboard",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "class Circle:\n    def __init__(self, background, width, height):\n        self.background = background\n        self.x = randRange(-width / 2, width / 2)\n        self.y = randRange(-height / 2, height / 2)\n        self.radius = hyperRange(radMin, radMax)\n        self.filled = (False if randint(\n            0, 100) > concentricCircle else 'full') if self.radius < radThreshold else (\n                False if randint(0, 100) > concentricCircle else 'concentric')\n        self.color = colors[randint(0, len(colors) - 1)]",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "CircleLineWindow",
        "kind": 6,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "class CircleLineWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CircleLineWindow, self).__init__(*args, **kwargs)\n        # 배경색을 설정합니다 \n        palette = self.palette()\n        palette.setColor(palette.Background, backgroundColor)\n        self.setAutoFillBackground(True)\n        self.setPalette(palette)\n        # 화면 크기를 얻으십시오 \n        geometry = QApplication.instance().desktop().availableGeometry()",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "randint",
        "kind": 2,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "def randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):\n    return random() * (b - a) + a\n# 成成 등급 \ndef hyperRange(a, b):\n    return random() * random() * random() * (b - a) + a\nclass Circle:\n    def __init__(self, background, width, height):",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "randRange",
        "kind": 2,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "def randRange(a, b):\n    return random() * (b - a) + a\n# 成成 등급 \ndef hyperRange(a, b):\n    return random() * random() * random() * (b - a) + a\nclass Circle:\n    def __init__(self, background, width, height):\n        self.background = background\n        self.x = randRange(-width / 2, width / 2)\n        self.y = randRange(-height / 2, height / 2)",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "hyperRange",
        "kind": 2,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "def hyperRange(a, b):\n    return random() * random() * random() * (b - a) + a\nclass Circle:\n    def __init__(self, background, width, height):\n        self.background = background\n        self.x = randRange(-width / 2, width / 2)\n        self.y = randRange(-height / 2, height / 2)\n        self.radius = hyperRange(radMin, radMax)\n        self.filled = (False if randint(\n            0, 100) > concentricCircle else 'full') if self.radius < radThreshold else (",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n# 最 최소 및 최대 반경, 반경 임계 값 및 필링 라운드의 백분율 \nradMin = 10\nradMax = 80\nfilledCircle = 30  # 百 \nconcentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n# 最 최소 및 최대 반경, 반경 임계 값 및 필링 라운드의 백분율 \nradMin = 10\nradMax = 80\nfilledCircle = 30  # 百 \nconcentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "radMin",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "radMin = 10\nradMax = 80\nfilledCircle = 30  # 百 \nconcentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "radMax",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "radMax = 80\nfilledCircle = 30  # 百 \nconcentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "filledCircle",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "filledCircle = 30  # 百 \nconcentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "concentricCircle",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "concentricCircle = 60  # 同心 百 \nradThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "radThreshold",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "radThreshold = 25  # IFF special, over this radius concentric, otherwise filled\n# 최소 및 최대 이동 속도 \nspeedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),\n    QColor(199, 108, 23),",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "speedMin",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "speedMin = 0.3\nspeedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),\n    QColor(199, 108, 23),\n    QColor(194, 62, 55),\n    QColor(0, 172, 212),",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "speedMax",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "speedMax = 0.6\n# 각 원과 퍼지 효과 \nmaxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),\n    QColor(199, 108, 23),\n    QColor(194, 62, 55),\n    QColor(0, 172, 212),\n    QColor(120, 120, 120)",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "maxOpacity",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "maxOpacity = 0.6\ncolors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),\n    QColor(199, 108, 23),\n    QColor(194, 62, 55),\n    QColor(0, 172, 212),\n    QColor(120, 120, 120)\n]\ncircleBorder = 10",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "colors = [\n    QColor(52, 168, 83),\n    QColor(117, 95, 147),\n    QColor(199, 108, 23),\n    QColor(194, 62, 55),\n    QColor(0, 172, 212),\n    QColor(120, 120, 120)\n]\ncircleBorder = 10\nbackgroundLine = colors[0]",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circleBorder",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circleBorder = 10\nbackgroundLine = colors[0]\nbackgroundColor = QColor(38, 43, 46)\nbackgroundMlt = 0.85\nlineBorder = 2.5\n# 가장 중요한 것은 전체 동그라미와 verrandars의 수 \nmaxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "backgroundLine",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "backgroundLine = colors[0]\nbackgroundColor = QColor(38, 43, 46)\nbackgroundMlt = 0.85\nlineBorder = 2.5\n# 가장 중요한 것은 전체 동그라미와 verrandars의 수 \nmaxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "backgroundColor",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "backgroundColor = QColor(38, 43, 46)\nbackgroundMlt = 0.85\nlineBorder = 2.5\n# 가장 중요한 것은 전체 동그라미와 verrandars의 수 \nmaxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "backgroundMlt",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "backgroundMlt = 0.85\nlineBorder = 2.5\n# 가장 중요한 것은 전체 동그라미와 verrandars의 수 \nmaxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "lineBorder",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "lineBorder = 2.5\n# 가장 중요한 것은 전체 동그라미와 verrandars의 수 \nmaxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "maxCircles",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "maxCircles = 8\npoints = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "points = []\n# 实实 변수 \ncircleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circleExp",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circleExp = 1\ncircleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circleExpMax",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circleExpMax = 1.003\ncircleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):\n    return random() * (b - a) + a",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circleExpMin",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circleExpMin = 0.997\ncircleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):\n    return random() * (b - a) + a\n# 成成 등급 ",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circleExpSp",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circleExpSp = 0.00004\ncirclePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):\n    return random() * (b - a) + a\n# 成成 등급 \ndef hyperRange(a, b):",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "circlePulse",
        "kind": 5,
        "importPath": "Demo.CircleLine",
        "description": "Demo.CircleLine",
        "peekOfCode": "circlePulse = False\n# <= x <= b를 임의의 정수를 생성합니다. \ndef randint(a, b):\n    return floor(random() * (b - a + 1) + a)\n# 成 成 小 \ndef randRange(a, b):\n    return random() * (b - a) + a\n# 成成 등급 \ndef hyperRange(a, b):\n    return random() * random() * random() * (b - a) + a",
        "detail": "Demo.CircleLine",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.CustomProperties",
        "description": "Demo.CustomProperties",
        "peekOfCode": "class Window(QPushButton):\n    bgChanged = pyqtSignal(str, str)\n    def __init__(self):\n        super(Window, self).__init__(\"QSS\")\n        self._textColor = \"\"\n        self._backgroundColor = \"\"\n        self.clicked.connect(self.onClick)\n        self.bgChanged.connect(lambda old, new: print(\n            \"old bg color\", old, \"new bg color\", new))\n    def onClick(self):",
        "detail": "Demo.CustomProperties",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.CustomProperties",
        "description": "Demo.CustomProperties",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass Window(QPushButton):\n    bgChanged = pyqtSignal(str, str)\n    def __init__(self):\n        super(Window, self).__init__(\"QSS\")\n        self._textColor = \"\"\n        self._backgroundColor = \"\"\n        self.clicked.connect(self.onClick)\n        self.bgChanged.connect(lambda old, new: print(\n            \"old bg color\", old, \"new bg color\", new))",
        "detail": "Demo.CustomProperties",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.EmbedWindow",
        "description": "Demo.EmbedWindow",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        self.myhwnd = int(self.winId())  # 自己 的 手柄. \n        layout.addWidget(QPushButton('获取所有可用、可视窗口', self,\n                                     clicked=self._getWindowList, maximumHeight=30))\n        layout.addWidget(QPushButton('释放窗口', clicked=self.releaseWidget, maximumHeight=30))\n        layout.addWidget(",
        "detail": "Demo.EmbedWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.EmbedWindow",
        "description": "Demo.EmbedWindow",
        "peekOfCode": "__Author__ = 'By: Irony\\nQQ: 892768447\\nEmail: 892768447@qq.com'\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nimport win32con\nimport win32gui\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QWindow\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QListWidget, \\\n    QLabel\nclass Window(QWidget):",
        "detail": "Demo.EmbedWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.EmbedWindow",
        "description": "Demo.EmbedWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nimport win32con\nimport win32gui\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QWindow\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QListWidget, \\\n    QLabel\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):",
        "detail": "Demo.EmbedWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.EmbedWindow",
        "description": "Demo.EmbedWindow",
        "peekOfCode": "__Version__ = 1.0\nimport win32con\nimport win32gui\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QWindow\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QListWidget, \\\n    QLabel\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "Demo.EmbedWindow",
        "documentation": {}
    },
    {
        "label": "OpencvWidget",
        "kind": 6,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "class OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24\n        self.resize(800, 600)\n        if not os.path.exists(\"Data/shape_predictor_68_face_landmarks.dat\"):\n            self.setText(\"正在下载数据文件。。。\")\n            self.outFile = QFile(\n                \"Data/shape_predictor_68_face_landmarks.dat.bz2\")",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nDOWNSCALE = 4\nURL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\nclass OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nDOWNSCALE = 4\nURL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\nclass OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24\n        self.resize(800, 600)",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nDOWNSCALE = 4\nURL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\nclass OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24\n        self.resize(800, 600)\n        if not os.path.exists(\"Data/shape_predictor_68_face_landmarks.dat\"):",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "DOWNSCALE",
        "kind": 5,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "DOWNSCALE = 4\nURL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\nclass OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24\n        self.resize(800, 600)\n        if not os.path.exists(\"Data/shape_predictor_68_face_landmarks.dat\"):\n            self.setText(\"正在下载数据文件。。。\")",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "Demo.FacePoints",
        "description": "Demo.FacePoints",
        "peekOfCode": "URL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\nclass OpencvWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(OpencvWidget, self).__init__(*args, **kwargs)\n        self.httpRequestAborted = False\n        self.fps = 24\n        self.resize(800, 600)\n        if not os.path.exists(\"Data/shape_predictor_68_face_landmarks.dat\"):\n            self.setText(\"正在下载数据文件。。。\")\n            self.outFile = QFile(",
        "detail": "Demo.FacePoints",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.FollowWindow",
        "description": "Demo.FollowWindow",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))\n        self.tmpHwnd = None\n        #TOOT 타이머는 메모장의 위치 크기와 폐쇄 여부를 감지합니다. \n        self.checkTimer = QTimer(self, timeout=self.checkWindow)\n        self.checkTimer.start(10)  # 10 밀리 초 부드럽습니다 \n    def checkWindow(self):",
        "detail": "Demo.FollowWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.FollowWindow",
        "description": "Demo.FollowWindow",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))",
        "detail": "Demo.FollowWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.FollowWindow",
        "description": "Demo.FollowWindow",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))\n        self.tmpHwnd = None\n        #TOOT 타이머는 메모장의 위치 크기와 폐쇄 여부를 감지합니다. \n        self.checkTimer = QTimer(self, timeout=self.checkWindow)",
        "detail": "Demo.FollowWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.FollowWindow",
        "description": "Demo.FollowWindow",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))\n        self.tmpHwnd = None\n        #TOOT 타이머는 메모장의 위치 크기와 폐쇄 여부를 감지합니다. \n        self.checkTimer = QTimer(self, timeout=self.checkWindow)\n        self.checkTimer.start(10)  # 10 밀리 초 부드럽습니다 ",
        "detail": "Demo.FollowWindow",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Demo.FramelessDialog",
        "description": "Demo.FramelessDialog",
        "peekOfCode": "class Dialog(QDialog):\n    def __init__(self, *args, **kwargs):\n        super(Dialog, self).__init__(*args, **kwargs)\n        self.setObjectName('Custom_Dialog')\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        self.setStyleSheet(Stylesheet)\n        self.initUi()\n        # 그림자를 추가하십시오 \n        effect = QGraphicsDropShadowEffect(self)",
        "detail": "Demo.FramelessDialog",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.FramelessDialog",
        "description": "Demo.FramelessDialog",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nStylesheet = \"\"\"\n#Custom_Widget {\n    background: white;\n    border-radius: 10px;\n}\n#closeButton {\n    min-width: 36px;",
        "detail": "Demo.FramelessDialog",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.FramelessDialog",
        "description": "Demo.FramelessDialog",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nStylesheet = \"\"\"\n#Custom_Widget {\n    background: white;\n    border-radius: 10px;\n}\n#closeButton {\n    min-width: 36px;\n    min-height: 36px;",
        "detail": "Demo.FramelessDialog",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.FramelessDialog",
        "description": "Demo.FramelessDialog",
        "peekOfCode": "__Version__ = 1.0\nStylesheet = \"\"\"\n#Custom_Widget {\n    background: white;\n    border-radius: 10px;\n}\n#closeButton {\n    min-width: 36px;\n    min-height: 36px;\n    font-family: \"Webdings\";",
        "detail": "Demo.FramelessDialog",
        "documentation": {}
    },
    {
        "label": "Stylesheet",
        "kind": 5,
        "importPath": "Demo.FramelessDialog",
        "description": "Demo.FramelessDialog",
        "peekOfCode": "Stylesheet = \"\"\"\n#Custom_Widget {\n    background: white;\n    border-radius: 10px;\n}\n#closeButton {\n    min-width: 36px;\n    min-height: 36px;\n    font-family: \"Webdings\";\n    qproperty-text: \"r\";",
        "detail": "Demo.FramelessDialog",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "Demo.FramelessWindow",
        "description": "Demo.FramelessWindow",
        "peekOfCode": "class MainWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QPushButton('按钮', self))\n        layout.addWidget(QTextEdit(self))\n# 스타일 \nStyleSheet = \"\"\"\n/*标题栏*/",
        "detail": "Demo.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.FramelessWindow",
        "description": "Demo.FramelessWindow",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass MainWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "Demo.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.FramelessWindow",
        "description": "Demo.FramelessWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass MainWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QPushButton('按钮', self))\n        layout.addWidget(QTextEdit(self))\n# 스타일 ",
        "detail": "Demo.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.FramelessWindow",
        "description": "Demo.FramelessWindow",
        "peekOfCode": "__Version__ = 1.0\nclass MainWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QPushButton('按钮', self))\n        layout.addWidget(QTextEdit(self))\n# 스타일 \nStyleSheet = \"\"\"",
        "detail": "Demo.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "Demo.FramelessWindow",
        "description": "Demo.FramelessWindow",
        "peekOfCode": "StyleSheet = \"\"\"\n/*标题栏*/\nTitleBar {\n    background-color: rgb(54, 157, 180);\n}\n/*最小化最大化关闭按钮通用默认背景*/\n#buttonMinimum,#buttonMaximum,#buttonClose {\n    border: none;\n    background-color: rgb(54, 157, 180);\n}",
        "detail": "Demo.FramelessWindow",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.GifCursor",
        "description": "Demo.GifCursor",
        "peekOfCode": "class Window(QWidget, QCursorGif):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 바쁜 커서 사진 배열 설정 \n        self.initCursor(['Data/Images/Cursors/%d.png' %\n                         i for i in range(8)], self)\n        self.setCursorTimeout(100)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(\n            'start busy', self, clicked=self.startBusy))",
        "detail": "Demo.GifCursor",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.GifCursor",
        "description": "Demo.GifCursor",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 1.0\nclass Window(QWidget, QCursorGif):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 바쁜 커서 사진 배열 설정 \n        self.initCursor(['Data/Images/Cursors/%d.png' %\n                         i for i in range(8)], self)\n        self.setCursorTimeout(100)",
        "detail": "Demo.GifCursor",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.GifCursor",
        "description": "Demo.GifCursor",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 1.0\nclass Window(QWidget, QCursorGif):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 바쁜 커서 사진 배열 설정 \n        self.initCursor(['Data/Images/Cursors/%d.png' %\n                         i for i in range(8)], self)\n        self.setCursorTimeout(100)\n        layout = QVBoxLayout(self)",
        "detail": "Demo.GifCursor",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.GifCursor",
        "description": "Demo.GifCursor",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget, QCursorGif):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 바쁜 커서 사진 배열 설정 \n        self.initCursor(['Data/Images/Cursors/%d.png' %\n                         i for i in range(8)], self)\n        self.setCursorTimeout(100)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(",
        "detail": "Demo.GifCursor",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.IsSignalConnected",
        "description": "Demo.IsSignalConnected",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.button1 = QPushButton('已连接', self, clicked=self.doTest)\n        self.button2 = QPushButton('未连接', self)\n        self.retView = QTextBrowser(self)\n        layout.addWidget(self.button1)\n        layout.addWidget(self.button2)\n        layout.addWidget(self.retView)",
        "detail": "Demo.IsSignalConnected",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.IsSignalConnected",
        "description": "Demo.IsSignalConnected",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.button1 = QPushButton('已连接', self, clicked=self.doTest)",
        "detail": "Demo.IsSignalConnected",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.IsSignalConnected",
        "description": "Demo.IsSignalConnected",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.button1 = QPushButton('已连接', self, clicked=self.doTest)\n        self.button2 = QPushButton('未连接', self)\n        self.retView = QTextBrowser(self)\n        layout.addWidget(self.button1)",
        "detail": "Demo.IsSignalConnected",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.IsSignalConnected",
        "description": "Demo.IsSignalConnected",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.button1 = QPushButton('已连接', self, clicked=self.doTest)\n        self.button2 = QPushButton('未连接', self)\n        self.retView = QTextBrowser(self)\n        layout.addWidget(self.button1)\n        layout.addWidget(self.button2)",
        "detail": "Demo.IsSignalConnected",
        "documentation": {}
    },
    {
        "label": "MINMAXINFO",
        "kind": 6,
        "importPath": "Demo.NativeEvent",
        "description": "Demo.NativeEvent",
        "peekOfCode": "class MINMAXINFO(ctypes.Structure):\n    _fields_ = [\n        (\"ptReserved\",      POINT),\n        (\"ptMaxSize\",       POINT),\n        (\"ptMaxPosition\",   POINT),\n        (\"ptMinTrackSize\",  POINT),\n        (\"ptMaxTrackSize\",  POINT),\n    ]\nclass Window(QWidget):\n    BorderWidth = 5",
        "detail": "Demo.NativeEvent",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.NativeEvent",
        "description": "Demo.NativeEvent",
        "peekOfCode": "class Window(QWidget):\n    BorderWidth = 5\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 主 主 可 大 (작업 표시 줄 제거) \n        self._rect = QApplication.instance().desktop().availableGeometry(self)\n        self.resize(800, 600)\n        self.setWindowFlags(Qt.Window\n                            | Qt.FramelessWindowHint\n                            | Qt.WindowSystemMenuHint",
        "detail": "Demo.NativeEvent",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.NativeEvent",
        "description": "Demo.NativeEvent",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass MINMAXINFO(ctypes.Structure):\n    _fields_ = [\n        (\"ptReserved\",      POINT),\n        (\"ptMaxSize\",       POINT),\n        (\"ptMaxPosition\",   POINT),",
        "detail": "Demo.NativeEvent",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.NativeEvent",
        "description": "Demo.NativeEvent",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass MINMAXINFO(ctypes.Structure):\n    _fields_ = [\n        (\"ptReserved\",      POINT),\n        (\"ptMaxSize\",       POINT),\n        (\"ptMaxPosition\",   POINT),\n        (\"ptMinTrackSize\",  POINT),\n        (\"ptMaxTrackSize\",  POINT),\n    ]",
        "detail": "Demo.NativeEvent",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.NativeEvent",
        "description": "Demo.NativeEvent",
        "peekOfCode": "__Version__ = 1.0\nclass MINMAXINFO(ctypes.Structure):\n    _fields_ = [\n        (\"ptReserved\",      POINT),\n        (\"ptMaxSize\",       POINT),\n        (\"ptMaxPosition\",   POINT),\n        (\"ptMinTrackSize\",  POINT),\n        (\"ptMaxTrackSize\",  POINT),\n    ]\nclass Window(QWidget):",
        "detail": "Demo.NativeEvent",
        "documentation": {}
    },
    {
        "label": "FramelessObject",
        "kind": 6,
        "importPath": "Demo.NewFramelessWindow",
        "description": "Demo.NewFramelessWindow",
        "peekOfCode": "class FramelessObject(QObject):\n    Margins = 3  # 가장자리 여백 \n    TitleHeight = 36  # 标 标 高度 \n    Widgets = set()  # 无球 集 集 \n    @classmethod\n    def set_margins(cls, margins):\n        cls.Margins = margins\n    @classmethod\n    def set_title_height(cls, height):\n        cls.TitleHeight = height",
        "detail": "Demo.NewFramelessWindow",
        "documentation": {}
    },
    {
        "label": "FramelessWindow",
        "kind": 6,
        "importPath": "Demo.NewFramelessWindow",
        "description": "Demo.NewFramelessWindow",
        "peekOfCode": "class FramelessWindow(QWidget, Ui_FormFrameless):\n    def __init__(self, *args, **kwargs):\n        super(FramelessWindow, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # 무시건 \n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        self.setMouseTracking(True)\n        # 복원 버튼을 숨 깁니다 \n        self.buttonNormal.setVisible(False)",
        "detail": "Demo.NewFramelessWindow",
        "documentation": {}
    },
    {
        "label": "NotificationIcon",
        "kind": 6,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "class NotificationIcon:\n    Info, Success, Warning, Error, Close = range(5)\n    Types = {\n        Info: None,\n        Success: None,\n        Warning: None,\n        Error: None,\n        Close: None\n    }\n    @classmethod",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "NotificationItem",
        "kind": 6,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "class NotificationItem(QWidget):\n    closed = pyqtSignal(QListWidgetItem)\n    def __init__(self, title, message, item, *args, ntype=0, callback=None, **kwargs):\n        super(NotificationItem, self).__init__(*args, **kwargs)\n        self.item = item\n        self.callback = callback\n        layout = QHBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        self.bgWidget = QWidget(self)  # 배경 제어, 애니메이션 효과를 지원하는 데 사용됩니다 \n        layout.addWidget(self.bgWidget)",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "NotificationWindow",
        "kind": 6,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "class NotificationWindow(QListWidget):\n    _instance = None\n    def __init__(self, *args, **kwargs):\n        super(NotificationWindow, self).__init__(*args, **kwargs)\n        self.setSpacing(20)\n        self.setMinimumWidth(412)\n        self.setMaximumWidth(412)\n        QApplication.instance().setQuitOnLastWindowClosed(True)\n        # 藏 任 任 栏, 국경, 토핑 등 없음 \n        self.setWindowFlags(self.windowFlags() | Qt.Tool |",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass NotificationIcon:\n    Info, Success, Warning, Error, Close = range(5)\n    Types = {\n        Info: None,\n        Success: None,",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass NotificationIcon:\n    Info, Success, Warning, Error, Close = range(5)\n    Types = {\n        Info: None,\n        Success: None,\n        Warning: None,\n        Error: None,\n        Close: None",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.Notification",
        "description": "Demo.Notification",
        "peekOfCode": "__Version__ = 1.0\nclass NotificationIcon:\n    Info, Success, Warning, Error, Close = range(5)\n    Types = {\n        Info: None,\n        Success: None,\n        Warning: None,\n        Error: None,\n        Close: None\n    }",
        "detail": "Demo.Notification",
        "documentation": {}
    },
    {
        "label": "FrameWidget",
        "kind": 6,
        "importPath": "Demo.ProbeWindow",
        "description": "Demo.ProbeWindow",
        "peekOfCode": "class FrameWidget(QWidget):\n    # 전체 화면 투명 창 \n    def __init__(self, *args, **kwargs):\n        super(FrameWidget, self).__init__(*args, **kwargs)\n        self.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint |\n                            Qt.WindowStaysOnTopHint)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        self.showFullScreen()  # 전체 화면 \n        self._rect = QRect()  # 감지 된 창의 사각형 위치 \n    def setRect(self, x, y, w, h):",
        "detail": "Demo.ProbeWindow",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "Demo.ProbeWindow",
        "description": "Demo.ProbeWindow",
        "peekOfCode": "class Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.ismd = False  # 눌렀지? \n        self.setAlignment(Qt.AlignCenter)\n        self.setText('鼠标按住不放拖动到外面')\n        self.resize(240, 240)\n        self.frameWidget = FrameWidget()  # 국경 \n    def closeEvent(self, event):\n        self.frameWidget.close()",
        "detail": "Demo.ProbeWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.ProbeWindow",
        "description": "Demo.ProbeWindow",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass FrameWidget(QWidget):\n    # 전체 화면 투명 창 \n    def __init__(self, *args, **kwargs):\n        super(FrameWidget, self).__init__(*args, **kwargs)\n        self.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint |",
        "detail": "Demo.ProbeWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.ProbeWindow",
        "description": "Demo.ProbeWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass FrameWidget(QWidget):\n    # 전체 화면 투명 창 \n    def __init__(self, *args, **kwargs):\n        super(FrameWidget, self).__init__(*args, **kwargs)\n        self.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint |\n                            Qt.WindowStaysOnTopHint)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        self.showFullScreen()  # 전체 화면 ",
        "detail": "Demo.ProbeWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.ProbeWindow",
        "description": "Demo.ProbeWindow",
        "peekOfCode": "__Version__ = 1.0\nclass FrameWidget(QWidget):\n    # 전체 화면 투명 창 \n    def __init__(self, *args, **kwargs):\n        super(FrameWidget, self).__init__(*args, **kwargs)\n        self.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint |\n                            Qt.WindowStaysOnTopHint)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        self.showFullScreen()  # 전체 화면 \n        self._rect = QRect()  # 감지 된 창의 사각형 위치 ",
        "detail": "Demo.ProbeWindow",
        "documentation": {}
    },
    {
        "label": "_Signals",
        "kind": 6,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "class _Signals(QObject):\n    updateProgress = pyqtSignal(int)\nSignals = _Signals()\nclass UpdateThread(Thread):\n    def run(self):\n        self.i = 0\n        for i in range(101):\n            self.i += 1\n            Signals.updateProgress.emit(i)\n            sleep(1)",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "UpdateThread",
        "kind": 6,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "class UpdateThread(Thread):\n    def run(self):\n        self.i = 0\n        for i in range(101):\n            self.i += 1\n            Signals.updateProgress.emit(i)\n            sleep(1)\n        self.i = 0\n        Signals.updateProgress.emit(i)\nclass Window(QWidget):",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        self.progressBar = QProgressBar(self)\n        layout.addWidget(self.progressBar)\n        Signals.updateProgress.connect(\n            self.progressBar.setValue, type=Qt.QueuedConnection)\n        QTimer.singleShot(2000, self.doStart)",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass _Signals(QObject):\n    updateProgress = pyqtSignal(int)\nSignals = _Signals()\nclass UpdateThread(Thread):\n    def run(self):",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass _Signals(QObject):\n    updateProgress = pyqtSignal(int)\nSignals = _Signals()\nclass UpdateThread(Thread):\n    def run(self):\n        self.i = 0\n        for i in range(101):\n            self.i += 1",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "__Version__ = 1.0\nclass _Signals(QObject):\n    updateProgress = pyqtSignal(int)\nSignals = _Signals()\nclass UpdateThread(Thread):\n    def run(self):\n        self.i = 0\n        for i in range(101):\n            self.i += 1\n            Signals.updateProgress.emit(i)",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "Signals",
        "kind": 5,
        "importPath": "Demo.QtThreading",
        "description": "Demo.QtThreading",
        "peekOfCode": "Signals = _Signals()\nclass UpdateThread(Thread):\n    def run(self):\n        self.i = 0\n        for i in range(101):\n            self.i += 1\n            Signals.updateProgress.emit(i)\n            sleep(1)\n        self.i = 0\n        Signals.updateProgress.emit(i)",
        "detail": "Demo.QtThreading",
        "documentation": {}
    },
    {
        "label": "RestartWindow",
        "kind": 6,
        "importPath": "Demo.RestartWindow",
        "description": "Demo.RestartWindow",
        "peekOfCode": "class RestartWindow(QWidget):\n    restarted = pyqtSignal(QWidget, str)\n    _Self = None  # 很 重要,, 保 引 引. \n    def __init__(self, path, *args, **kwargs):\n        super(RestartWindow, self).__init__(*args, **kwargs)\n        RestartWindow._Self = self\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"当前工作目录：\" + path, self))\n        self.dirEdit = QLineEdit(\n            self, placeholderText=\"请输入要切换的目录\", returnPressed=self.onChangeDir)",
        "detail": "Demo.RestartWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.RestartWindow",
        "description": "Demo.RestartWindow",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass RestartWindow(QWidget):\n    restarted = pyqtSignal(QWidget, str)\n    _Self = None  # 很 重要,, 保 引 引. \n    def __init__(self, path, *args, **kwargs):\n        super(RestartWindow, self).__init__(*args, **kwargs)\n        RestartWindow._Self = self\n        layout = QVBoxLayout(self)",
        "detail": "Demo.RestartWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.RestartWindow",
        "description": "Demo.RestartWindow",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass RestartWindow(QWidget):\n    restarted = pyqtSignal(QWidget, str)\n    _Self = None  # 很 重要,, 保 引 引. \n    def __init__(self, path, *args, **kwargs):\n        super(RestartWindow, self).__init__(*args, **kwargs)\n        RestartWindow._Self = self\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"当前工作目录：\" + path, self))",
        "detail": "Demo.RestartWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.RestartWindow",
        "description": "Demo.RestartWindow",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass RestartWindow(QWidget):\n    restarted = pyqtSignal(QWidget, str)\n    _Self = None  # 很 重要,, 保 引 引. \n    def __init__(self, path, *args, **kwargs):\n        super(RestartWindow, self).__init__(*args, **kwargs)\n        RestartWindow._Self = self\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"当前工作目录：\" + path, self))\n        self.dirEdit = QLineEdit(",
        "detail": "Demo.RestartWindow",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.ScreenNotify",
        "description": "Demo.ScreenNotify",
        "peekOfCode": "class Window(QPlainTextEdit):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.appendPlainText('修改分辨率后查看')\n        # 마지막 값을 기록하십시오 (슬롯 줄이기). \n        self.m_rect = QRect()\n        # 타이머를 사용하여 트리거 마지막 변경 지연 \n        self.m_timer = QTimer(self, timeout=self.onSolutionChanged)\n        self.m_timer.setSingleShot(True)  # ** 중요 ** 보증 다중 신호가 작은 통화 기능으로 \n        # 주로 다중 화면 -> 화면 없음 -> 화면이있는 ",
        "detail": "Demo.ScreenNotify",
        "documentation": {}
    },
    {
        "label": "dll",
        "kind": 5,
        "importPath": "Demo.ScreenShotDll",
        "description": "Demo.ScreenShotDll",
        "peekOfCode": "dll = CDLL('Data/ScreenShot.dll')\ndll.PrScrn()",
        "detail": "Demo.ScreenShotDll",
        "documentation": {}
    },
    {
        "label": "Widget",
        "kind": 6,
        "importPath": "Demo.SharedMemory",
        "description": "Demo.SharedMemory",
        "peekOfCode": "class Widget(QWidget):\n    def __init__(self,*args,**kwargs):\n        super(Widget, self).__init__(*args,**kwargs)\nif __name__ == \"__main__\":\n    import sys,os\n    print(os.getpid())\n    app = SharedApplication(sys.argv)\n    if app.isRunning():\n        print(\"app have already running\")\n        sys.exit(0)",
        "detail": "Demo.SharedMemory",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.SharedMemory",
        "description": "Demo.SharedMemory",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass Widget(QWidget):\n    def __init__(self,*args,**kwargs):\n        super(Widget, self).__init__(*args,**kwargs)\nif __name__ == \"__main__\":\n    import sys,os\n    print(os.getpid())\n    app = SharedApplication(sys.argv)\n    if app.isRunning():\n        print(\"app have already running\")",
        "detail": "Demo.SharedMemory",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel('拖动或者调整窗口试试看'))\n        # 키 교체 창 처리 \n        self._newwndproc = WNDPROC(self._wndproc)\n        self._oldwndproc = SetWindowLong(\n            int(self.winId()), GWL_WNDPROC, self._newwndproc)\n    def _wndproc(self, hwnd, msg, wparam, lparam):",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "GetDragFullwindows",
        "kind": 2,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "def GetDragFullwindows():\n    rv = c_int()\n    SystemParametersInfo(SPI_GETDRAGFULLWINDOWS, 0, byref(rv), 0)\n    return rv.value\ndef SetDragFullwindows(value):\n    SystemParametersInfo(SPI_SETDRAGFULLWINDOWS, value, 0, 0)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "SetDragFullwindows",
        "kind": 2,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "def SetDragFullwindows(value):\n    SystemParametersInfo(SPI_SETDRAGFULLWINDOWS, value, 0, 0)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel('拖动或者调整窗口试试看'))\n        # 키 교체 창 처리 \n        self._newwndproc = WNDPROC(self._wndproc)\n        self._oldwndproc = SetWindowLong(",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nif sizeof(c_long) == sizeof(c_void_p):\n    WPARAM = c_ulong\n    LPARAM = c_long\nelif sizeof(c_longlong) == sizeof(c_void_p):\n    WPARAM = c_ulonglong\n    LPARAM = c_longlong\nWM_NCLBUTTONDOWN = 0x00a1",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nif sizeof(c_long) == sizeof(c_void_p):\n    WPARAM = c_ulong\n    LPARAM = c_long\nelif sizeof(c_longlong) == sizeof(c_void_p):\n    WPARAM = c_ulonglong\n    LPARAM = c_longlong\nWM_NCLBUTTONDOWN = 0x00a1\nGWL_WNDPROC = -4",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "__Version__ = 1.0\nif sizeof(c_long) == sizeof(c_void_p):\n    WPARAM = c_ulong\n    LPARAM = c_long\nelif sizeof(c_longlong) == sizeof(c_void_p):\n    WPARAM = c_ulonglong\n    LPARAM = c_longlong\nWM_NCLBUTTONDOWN = 0x00a1\nGWL_WNDPROC = -4\nSPI_GETDRAGFULLWINDOWS = 38",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "WM_NCLBUTTONDOWN",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "WM_NCLBUTTONDOWN = 0x00a1\nGWL_WNDPROC = -4\nSPI_GETDRAGFULLWINDOWS = 38\nSPI_SETDRAGFULLWINDOWS = 37\nWNDPROC = WINFUNCTYPE(c_long, c_void_p, c_uint, WPARAM, LPARAM)\ntry:\n    CallWindowProc = windll.user32.CallWindowProcW\n    SetWindowLong = windll.user32.SetWindowLongW\n    SystemParametersInfo = windll.user32.SystemParametersInfoW\nexcept:",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "GWL_WNDPROC",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "GWL_WNDPROC = -4\nSPI_GETDRAGFULLWINDOWS = 38\nSPI_SETDRAGFULLWINDOWS = 37\nWNDPROC = WINFUNCTYPE(c_long, c_void_p, c_uint, WPARAM, LPARAM)\ntry:\n    CallWindowProc = windll.user32.CallWindowProcW\n    SetWindowLong = windll.user32.SetWindowLongW\n    SystemParametersInfo = windll.user32.SystemParametersInfoW\nexcept:\n    CallWindowProc = windll.user32.CallWindowProcA",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "SPI_GETDRAGFULLWINDOWS",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "SPI_GETDRAGFULLWINDOWS = 38\nSPI_SETDRAGFULLWINDOWS = 37\nWNDPROC = WINFUNCTYPE(c_long, c_void_p, c_uint, WPARAM, LPARAM)\ntry:\n    CallWindowProc = windll.user32.CallWindowProcW\n    SetWindowLong = windll.user32.SetWindowLongW\n    SystemParametersInfo = windll.user32.SystemParametersInfoW\nexcept:\n    CallWindowProc = windll.user32.CallWindowProcA\n    SetWindowLong = windll.user32.SetWindowLongA",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "SPI_SETDRAGFULLWINDOWS",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "SPI_SETDRAGFULLWINDOWS = 37\nWNDPROC = WINFUNCTYPE(c_long, c_void_p, c_uint, WPARAM, LPARAM)\ntry:\n    CallWindowProc = windll.user32.CallWindowProcW\n    SetWindowLong = windll.user32.SetWindowLongW\n    SystemParametersInfo = windll.user32.SystemParametersInfoW\nexcept:\n    CallWindowProc = windll.user32.CallWindowProcA\n    SetWindowLong = windll.user32.SetWindowLongA\n    SystemParametersInfo = windll.user32.SystemParametersInfoA",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "WNDPROC",
        "kind": 5,
        "importPath": "Demo.ShowFrameWhenDrag",
        "description": "Demo.ShowFrameWhenDrag",
        "peekOfCode": "WNDPROC = WINFUNCTYPE(c_long, c_void_p, c_uint, WPARAM, LPARAM)\ntry:\n    CallWindowProc = windll.user32.CallWindowProcW\n    SetWindowLong = windll.user32.SetWindowLongW\n    SystemParametersInfo = windll.user32.SystemParametersInfoW\nexcept:\n    CallWindowProc = windll.user32.CallWindowProcA\n    SetWindowLong = windll.user32.SetWindowLongA\n    SystemParametersInfo = windll.user32.SystemParametersInfoA\ndef GetDragFullwindows():",
        "detail": "Demo.ShowFrameWhenDrag",
        "documentation": {}
    },
    {
        "label": "Widget",
        "kind": 6,
        "importPath": "Demo.SingleApplication",
        "description": "Demo.SingleApplication",
        "peekOfCode": "class Widget(QTextEdit):\n    def __init__(self, *args, **kwargs):\n        super(Widget, self).__init__(*args, **kwargs)\nif __name__ == \"__main__\":\n    import sys\n    app = QSingleApplication(sys.argv)\n    if app.isRunning():\n        app.sendMessage(\"app is running\")\n        sys.exit(0)\n    t = Widget()",
        "detail": "Demo.SingleApplication",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.SingleApplication",
        "description": "Demo.SingleApplication",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass Widget(QTextEdit):\n    def __init__(self, *args, **kwargs):\n        super(Widget, self).__init__(*args, **kwargs)\nif __name__ == \"__main__\":\n    import sys\n    app = QSingleApplication(sys.argv)\n    if app.isRunning():\n        app.sendMessage(\"app is running\")\n        sys.exit(0)",
        "detail": "Demo.SingleApplication",
        "documentation": {}
    },
    {
        "label": "WidgetCode",
        "kind": 6,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "class WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self.setBackgroundRole(QPalette.Midlight)\n        self.setAutoFillBackground(True)\n        # 폰트 \n        newFont = self.font()\n        newFont.setPointSize(16)",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "__version__ = \"0.0.1\"\nDEF_NOISYPOINTCOUNT = 60  # 点 数 \nCOLORLIST = (\"black\", \"gray\", \"red\", \"green\", \"blue\", \"magenta\")\nTCOLORLIST = (Qt.black, Qt.gray, Qt.red, Qt.green, Qt.blue, Qt.magenta)\nQTCOLORLIST = (Qt.darkGray, Qt.darkRed, Qt.darkGreen, Qt.darkBlue, Qt.darkMagenta)\nHTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "DEF_NOISYPOINTCOUNT",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "DEF_NOISYPOINTCOUNT = 60  # 点 数 \nCOLORLIST = (\"black\", \"gray\", \"red\", \"green\", \"blue\", \"magenta\")\nTCOLORLIST = (Qt.black, Qt.gray, Qt.red, Qt.green, Qt.blue, Qt.magenta)\nQTCOLORLIST = (Qt.darkGray, Qt.darkRed, Qt.darkGreen, Qt.darkBlue, Qt.darkMagenta)\nHTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "COLORLIST",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "COLORLIST = (\"black\", \"gray\", \"red\", \"green\", \"blue\", \"magenta\")\nTCOLORLIST = (Qt.black, Qt.gray, Qt.red, Qt.green, Qt.blue, Qt.magenta)\nQTCOLORLIST = (Qt.darkGray, Qt.darkRed, Qt.darkGreen, Qt.darkBlue, Qt.darkMagenta)\nHTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "TCOLORLIST",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "TCOLORLIST = (Qt.black, Qt.gray, Qt.red, Qt.green, Qt.blue, Qt.magenta)\nQTCOLORLIST = (Qt.darkGray, Qt.darkRed, Qt.darkGreen, Qt.darkBlue, Qt.darkMagenta)\nHTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 ",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "QTCOLORLIST",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "QTCOLORLIST = (Qt.darkGray, Qt.darkRed, Qt.darkGreen, Qt.darkBlue, Qt.darkMagenta)\nHTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "HTML",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "HTML = \"<html><body>{html}</body></html>\"\nFONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self.setBackgroundRole(QPalette.Midlight)",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "FONT = \"<font color=\\\"{color}\\\">{word}</font>\"\nWORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self.setBackgroundRole(QPalette.Midlight)\n        self.setAutoFillBackground(True)",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "WORDS",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "WORDS = list(string.ascii_letters + string.digits)\nSINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self.setBackgroundRole(QPalette.Midlight)\n        self.setAutoFillBackground(True)\n        # 폰트 ",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "SINETABLE",
        "kind": 5,
        "importPath": "Demo.VerificationCode",
        "description": "Demo.VerificationCode",
        "peekOfCode": "SINETABLE = (0, 38, 71, 92, 100, 92, 71, 38, 0, -38, -71, -92, -100, -92, -71, -38)\nclass WidgetCode(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(WidgetCode, self).__init__(*args, **kwargs)\n        self._sensitive = False  # 是 大 大 小 \n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self.setBackgroundRole(QPalette.Midlight)\n        self.setAutoFillBackground(True)\n        # 폰트 \n        newFont = self.font()",
        "detail": "Demo.VerificationCode",
        "documentation": {}
    },
    {
        "label": "WeltHideWindow",
        "kind": 6,
        "importPath": "Demo.WeltHideWindow",
        "description": "Demo.WeltHideWindow",
        "peekOfCode": "class WeltHideWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WeltHideWindow, self).__init__(*args, **kwargs)\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.resize(800, 600)\n        self._width = QApplication.desktop().availableGeometry(self).width()\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(\"关闭窗口\", self, clicked=self.close))\n    def mousePressEvent(self, event):\n        '''鼠标按下事件，需要记录下坐标self._pos 和 是否可移动self._canMove'''",
        "detail": "Demo.WeltHideWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Demo.WeltHideWindow",
        "description": "Demo.WeltHideWindow",
        "peekOfCode": "__Author__ = 'By: Irony\\nQQ: 892768447\\nEmail: 892768447@qq.com'\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass WeltHideWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WeltHideWindow, self).__init__(*args, **kwargs)\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.resize(800, 600)\n        self._width = QApplication.desktop().availableGeometry(self).width()\n        layout = QVBoxLayout(self)",
        "detail": "Demo.WeltHideWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Demo.WeltHideWindow",
        "description": "Demo.WeltHideWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass WeltHideWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WeltHideWindow, self).__init__(*args, **kwargs)\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.resize(800, 600)\n        self._width = QApplication.desktop().availableGeometry(self).width()\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(\"关闭窗口\", self, clicked=self.close))",
        "detail": "Demo.WeltHideWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Demo.WeltHideWindow",
        "description": "Demo.WeltHideWindow",
        "peekOfCode": "__Version__ = 1.0\nclass WeltHideWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WeltHideWindow, self).__init__(*args, **kwargs)\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        self.resize(800, 600)\n        self._width = QApplication.desktop().availableGeometry(self).width()\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(\"关闭窗口\", self, clicked=self.close))\n    def mousePressEvent(self, event):",
        "detail": "Demo.WeltHideWindow",
        "documentation": {}
    },
    {
        "label": "WindowNotify",
        "kind": 6,
        "importPath": "Demo.WindowNotify",
        "description": "Demo.WindowNotify",
        "peekOfCode": "class WindowNotify(QWidget, Ui_NotifyForm):\n    SignalClosed = pyqtSignal()  # 弹窗 关 关 信号 \n    def __init__(self, title=\"\", content=\"\", timeout=5000, *args, **kwargs):\n        super(WindowNotify, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.setTitle(title).setContent(content)\n        self._timeout = timeout\n        self._init()\n    def setTitle(self, title):\n        if title:",
        "detail": "Demo.WindowNotify",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Demo.WindowNotify",
        "description": "Demo.WindowNotify",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass WindowNotify(QWidget, Ui_NotifyForm):\n    SignalClosed = pyqtSignal()  # 弹窗 关 关 信号 \n    def __init__(self, title=\"\", content=\"\", timeout=5000, *args, **kwargs):\n        super(WindowNotify, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.setTitle(title).setContent(content)\n        self._timeout = timeout\n        self._init()\n    def setTitle(self, title):",
        "detail": "Demo.WindowNotify",
        "documentation": {}
    },
    {
        "label": "graph_Form",
        "kind": 6,
        "importPath": "PyQtGraph.Data.graphAnalysis",
        "description": "PyQtGraph.Data.graphAnalysis",
        "peekOfCode": "class graph_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(1024, 768)\n        self.gridLayout_3 = QtWidgets.QGridLayout(Form)\n        self.gridLayout_3.setContentsMargins(20, 20, 20, 20)\n        self.gridLayout_3.setSpacing(20)\n        self.gridLayout_3.setObjectName(\"gridLayout_3\")\n        self.pushButton_7 = QtWidgets.QPushButton(Form)\n        self.pushButton_7.setMinimumSize(QtCore.QSize(0, 80))",
        "detail": "PyQtGraph.Data.graphAnalysis",
        "documentation": {}
    },
    {
        "label": "graph_Form",
        "kind": 6,
        "importPath": "PyQtGraph.Data.graphTest",
        "description": "PyQtGraph.Data.graphTest",
        "peekOfCode": "class graph_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(1024, 768)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.verticalLayout.setContentsMargins(20, 20, 20, 20)\n        self.verticalLayout.setSpacing(20)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.label = QtWidgets.QLabel(Form)\n        font = QtGui.QFont()",
        "detail": "PyQtGraph.Data.graphTest",
        "documentation": {}
    },
    {
        "label": "CustomViewBox",
        "kind": 6,
        "importPath": "PyQtGraph.graph1",
        "description": "PyQtGraph.graph1",
        "peekOfCode": "class CustomViewBox(pg.ViewBox):\n    def __init__(self, *args, **kwds):\n        pg.ViewBox.__init__(self, *args, **kwds)\n        self.RectMode = 3\n        self.setMouseMode(self.RectMode)\n    def mouseClickEvent(self, ev):\n        if ev.button() == pg.QtCore.Qt.RightButton:\n            self.autoRange()\n    def mouseDragEvent(self, ev):\n        pg.ViewBox.mouseDragEvent(self, ev)",
        "detail": "PyQtGraph.graph1",
        "documentation": {}
    },
    {
        "label": "graphAnalysis",
        "kind": 6,
        "importPath": "PyQtGraph.graph1",
        "description": "PyQtGraph.graph1",
        "peekOfCode": "class graphAnalysis(QDialog,graph_Form):\n    def __init__(self):\n        super(graphAnalysis, self).__init__()\n        self.setupUi(self)\n        self.pushButton_7.clicked.connect(self.test)\n        self.tabWidget.clear()\n    def test(self):\n        tab1 = QtWidgets.QWidget()\n        scrollArea = QtWidgets.QScrollArea(tab1)\n        scrollArea.setMinimumSize(984,550)",
        "detail": "PyQtGraph.graph1",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "PyQtGraph.mouseFlow",
        "description": "PyQtGraph.mouseFlow",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(726, 595)\n        self.graphicsView = pg.PlotWidget(Form)\n        self.graphicsView.setGeometry(QtCore.QRect(75, 131, 621, 441))\n        self.graphicsView.setObjectName(\"graphicsView\")\nclass MyWindow(QMainWindow, Ui_Form):\n    def __init__(self, parent=None):\n        super(MyWindow, self).__init__(parent)",
        "detail": "PyQtGraph.mouseFlow",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "kind": 6,
        "importPath": "PyQtGraph.mouseFlow",
        "description": "PyQtGraph.mouseFlow",
        "peekOfCode": "class MyWindow(QMainWindow, Ui_Form):\n    def __init__(self, parent=None):\n        super(MyWindow, self).__init__(parent)\n        self.setupUi(self)\n        x = np.linspace(-100, 100, 1000)\n        data = np.sin(x) / x\n        self.graphicsView.plot(data, pen=(255, 255, 255, 200))\n        self.label = pg.TextItem(text=\"横坐标：{}\".format(0))\n        self.graphicsView.addItem(self.label)\n        self.setMouseTracking(True)",
        "detail": "PyQtGraph.mouseFlow",
        "documentation": {}
    },
    {
        "label": "CustomViewBox",
        "kind": 6,
        "importPath": "PyQtGraph.testGraphAnalysis",
        "description": "PyQtGraph.testGraphAnalysis",
        "peekOfCode": "class CustomViewBox(pg.ViewBox):\n    def __init__(self, *args, **kwds):\n        pg.ViewBox.__init__(self, *args, **kwds)\n        self.RectMode = 3\n        self.setMouseMode(self.RectMode)\n    def mouseClickEvent(self, ev):\n        if ev.button() == pg.QtCore.Qt.RightButton:\n            self.autoRange()\n    def mouseDragEvent(self, ev):\n        pg.ViewBox.mouseDragEvent(self, ev)",
        "detail": "PyQtGraph.testGraphAnalysis",
        "documentation": {}
    },
    {
        "label": "graphAnalysis",
        "kind": 6,
        "importPath": "PyQtGraph.testGraphAnalysis",
        "description": "PyQtGraph.testGraphAnalysis",
        "peekOfCode": "class graphAnalysis(QDialog,graph_Form):\n    def __init__(self):\n        super(graphAnalysis, self).__init__()\n        self.setupUi(self)\n        self.pushButton_7.clicked.connect(self.test)\n        self.tabWidget.clear()\n    def handleChanged(self,item,column):\n        count = item.childCount()\n        if item.checkState(column) == Qt.Checked:\n            for index in range(count):",
        "detail": "PyQtGraph.testGraphAnalysis",
        "documentation": {}
    },
    {
        "label": "MyStringAxis",
        "kind": 6,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "class MyStringAxis(pg.AxisItem):\n    def __init__(self, xdict, *args, **kwargs):\n        pg.AxisItem.__init__(self, *args, **kwargs)\n        self.xdict = xdict\n    def tickStrings(self, values, scale, spacing):\n        strings = []\n        for v in values:\n            vs = v * scale\n            if vs in self.xdict.keys():\n                vstr = self.xdict[vs]",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "CustomViewBox",
        "kind": 6,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "class CustomViewBox(pg.ViewBox):\n    def __init__(self, *args, **kwds):\n        pg.ViewBox.__init__(self, *args, **kwds)\n        self.RectMode = 3\n        self.setMouseMode(self.RectMode)\n    def mouseClickEvent(self, ev):\n        if ev.button() == pg.QtCore.Qt.RightButton:\n            self.autoRange()\n    def mouseDragEvent(self, ev):\n        pg.ViewBox.mouseDragEvent(self, ev)",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "widthChanged",
        "kind": 2,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "def widthChanged(self):\n    sr = self.getSourceRect()\n    ar = float(sr.height()) / sr.width()\n    self.params.param('height').setValue(int(self.params['width'] * ar), blockSignal=self.heightChanged)\ndef heightChanged(self):\n    sr = self.getSourceRect()\n    ar = float(sr.width()) / sr.height()\n    self.params.param('width').setValue(int(self.params['height'] * ar), blockSignal=self.widthChanged)\ndef New__init__(self, item):\n    Exporter.__init__(self, item)",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "heightChanged",
        "kind": 2,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "def heightChanged(self):\n    sr = self.getSourceRect()\n    ar = float(sr.width()) / sr.height()\n    self.params.param('width').setValue(int(self.params['height'] * ar), blockSignal=self.widthChanged)\ndef New__init__(self, item):\n    Exporter.__init__(self, item)\n    tr = self.getTargetRect()\n    if isinstance(item, pg.Qt.QtGui.QGraphicsItem):\n        scene = item.scene()\n    else:",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "New__init__",
        "kind": 2,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "def New__init__(self, item):\n    Exporter.__init__(self, item)\n    tr = self.getTargetRect()\n    if isinstance(item, pg.Qt.QtGui.QGraphicsItem):\n        scene = item.scene()\n    else:\n        scene = item\n    bgbrush = scene.views()[0].backgroundBrush()\n    bg = bgbrush.color()\n    if bgbrush.style() == pg.Qt.QtCore.Qt.NoBrush:",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "ImageExporter.heightChanged",
        "kind": 5,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "ImageExporter.heightChanged = heightChanged\nImageExporter.widthChanged = widthChanged\nImageExporter.__init__ = New__init__\n# 사용자 정의 좌표 축 집약적 인 디스플레이를 해결합니다 \nclass MyStringAxis(pg.AxisItem):\n    def __init__(self, xdict, *args, **kwargs):\n        pg.AxisItem.__init__(self, *args, **kwargs)\n        self.xdict = xdict\n    def tickStrings(self, values, scale, spacing):\n        strings = []",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "ImageExporter.widthChanged",
        "kind": 5,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "ImageExporter.widthChanged = widthChanged\nImageExporter.__init__ = New__init__\n# 사용자 정의 좌표 축 집약적 인 디스플레이를 해결합니다 \nclass MyStringAxis(pg.AxisItem):\n    def __init__(self, xdict, *args, **kwargs):\n        pg.AxisItem.__init__(self, *args, **kwargs)\n        self.xdict = xdict\n    def tickStrings(self, values, scale, spacing):\n        strings = []\n        for v in values:",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "ImageExporter.__init__",
        "kind": 5,
        "importPath": "PyQtGraph.tools",
        "description": "PyQtGraph.tools",
        "peekOfCode": "ImageExporter.__init__ = New__init__\n# 사용자 정의 좌표 축 집약적 인 디스플레이를 해결합니다 \nclass MyStringAxis(pg.AxisItem):\n    def __init__(self, xdict, *args, **kwargs):\n        pg.AxisItem.__init__(self, *args, **kwargs)\n        self.xdict = xdict\n    def tickStrings(self, values, scale, spacing):\n        strings = []\n        for v in values:\n            vs = v * scale",
        "detail": "PyQtGraph.tools",
        "documentation": {}
    },
    {
        "label": "AxWidget",
        "kind": 6,
        "importPath": "QAxWidget.ViewOffice",
        "description": "QAxWidget.ViewOffice",
        "peekOfCode": "class AxWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(AxWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        self.axWidget = QAxWidget(self)\n        layout.addWidget(self.axWidget)\n        layout.addWidget(QPushButton('选择excel,word,pdf文件',\n                                     self, clicked=self.onOpenFile))\n    def onOpenFile(self):",
        "detail": "QAxWidget.ViewOffice",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QAxWidget.ViewOffice",
        "description": "QAxWidget.ViewOffice",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass AxWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(AxWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        self.axWidget = QAxWidget(self)\n        layout.addWidget(self.axWidget)",
        "detail": "QAxWidget.ViewOffice",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QAxWidget.ViewOffice",
        "description": "QAxWidget.ViewOffice",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass AxWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(AxWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        self.axWidget = QAxWidget(self)\n        layout.addWidget(self.axWidget)\n        layout.addWidget(QPushButton('选择excel,word,pdf文件',",
        "detail": "QAxWidget.ViewOffice",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QAxWidget.ViewOffice",
        "description": "QAxWidget.ViewOffice",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass AxWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(AxWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        self.axWidget = QAxWidget(self)\n        layout.addWidget(self.axWidget)\n        layout.addWidget(QPushButton('选择excel,word,pdf文件',\n                                     self, clicked=self.onOpenFile))",
        "detail": "QAxWidget.ViewOffice",
        "documentation": {}
    },
    {
        "label": "CalendarWidget",
        "kind": 6,
        "importPath": "QCalendarWidget.CalendarQssStyle",
        "description": "QCalendarWidget.CalendarQssStyle",
        "peekOfCode": "class CalendarWidget(QCalendarWidget):\n    def __init__(self, *args, **kwargs):\n        super(CalendarWidget, self).__init__(*args, **kwargs)\n        # 왼쪽 수를 숨 깁니다 \n        self.setVerticalHeaderFormat(self.NoVerticalHeader)\n        # 토요일 일요일 색상을 수정하십시오 \n        fmtGreen = QTextCharFormat()\n        fmtGreen.setForeground(QBrush(Qt.green))\n        self.setWeekdayTextFormat(Qt.Saturday, fmtGreen)\n        fmtOrange = QTextCharFormat()",
        "detail": "QCalendarWidget.CalendarQssStyle",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "QCalendarWidget.CalendarQssStyle",
        "description": "QCalendarWidget.CalendarQssStyle",
        "peekOfCode": "StyleSheet = '''\n/*顶部导航区域*/\n#qt_calendar_navigationbar {\n    background-color: rgb(0, 188, 212);\n    min-height: 100px;\n}\n/*上一个月按钮和下一个月按钮(从源码里找到的objectName)*/\n#qt_calendar_prevmonth, #qt_calendar_nextmonth {\n    border: none; /*去掉边框*/\n    margin-top: 64px;",
        "detail": "QCalendarWidget.CalendarQssStyle",
        "documentation": {}
    },
    {
        "label": "SortFilterProxyModel",
        "kind": 6,
        "importPath": "QComboBox.CityLinkage",
        "description": "QComboBox.CityLinkage",
        "peekOfCode": "class SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self.setFilterRole(Qt.ToolTipRole)  # Qt.Tooltiprole 역할에 따라 # 필터링합니다 \n        self._model = QStandardItemModel(self)\n        self.setSourceModel(self._model)\n    def appendRow(self, item):\n        self._model.appendRow(item)\n    def setFilter(self, _):\n        # 필터 ",
        "detail": "QComboBox.CityLinkage",
        "documentation": {}
    },
    {
        "label": "CityLinkageWindow",
        "kind": 6,
        "importPath": "QComboBox.CityLinkage",
        "description": "QComboBox.CityLinkage",
        "peekOfCode": "class CityLinkageWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CityLinkageWindow, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.province_box = QComboBox(self, minimumWidth=200)  # 도시 수준 이상 \n        self.city_box = QComboBox(self, minimumWidth=200)  # 市 \n        self.county_box = QComboBox(self, minimumWidth=200)  # 市 아래 수준 \n        layout.addWidget(QLabel(\"省/直辖市/特别行政区\", self))\n        layout.addWidget(self.province_box)\n        layout.addItem(QSpacerItem(",
        "detail": "QComboBox.CityLinkage",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QComboBox.CityLinkage",
        "description": "QComboBox.CityLinkage",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self.setFilterRole(Qt.ToolTipRole)  # Qt.Tooltiprole 역할에 따라 # 필터링합니다 \n        self._model = QStandardItemModel(self)\n        self.setSourceModel(self._model)\n    def appendRow(self, item):",
        "detail": "QComboBox.CityLinkage",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QComboBox.CityLinkage",
        "description": "QComboBox.CityLinkage",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self.setFilterRole(Qt.ToolTipRole)  # Qt.Tooltiprole 역할에 따라 # 필터링합니다 \n        self._model = QStandardItemModel(self)\n        self.setSourceModel(self._model)\n    def appendRow(self, item):\n        self._model.appendRow(item)",
        "detail": "QComboBox.CityLinkage",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QComboBox.CityLinkage",
        "description": "QComboBox.CityLinkage",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self.setFilterRole(Qt.ToolTipRole)  # Qt.Tooltiprole 역할에 따라 # 필터링합니다 \n        self._model = QStandardItemModel(self)\n        self.setSourceModel(self._model)\n    def appendRow(self, item):\n        self._model.appendRow(item)\n    def setFilter(self, _):",
        "detail": "QComboBox.CityLinkage",
        "documentation": {}
    },
    {
        "label": "FileIconProvider",
        "kind": 6,
        "importPath": "QFileSystemModel.CustomIcon",
        "description": "QFileSystemModel.CustomIcon",
        "peekOfCode": "class FileIconProvider(QFileIconProvider):\n    def __init__(self, *args, **kwargs):\n        super(FileIconProvider, self).__init__(*args, **kwargs)\n        self.DirIcon = QIcon(\"Data/icons/folder.png\")\n        self.TxtIcon = QIcon(\"Data/icons/file.png\")\n    def icon(self, type_info):\n        '''\n        :param fileInfo: 参考http://doc.qt.io/qt-5/qfileinfo.html\n        '''\n        if isinstance(type_info, QFileInfo):",
        "detail": "QFileSystemModel.CustomIcon",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QFileSystemModel.CustomIcon",
        "description": "QFileSystemModel.CustomIcon",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 图 图 图 提供 \nclass FileIconProvider(QFileIconProvider):\n    def __init__(self, *args, **kwargs):\n        super(FileIconProvider, self).__init__(*args, **kwargs)\n        self.DirIcon = QIcon(\"Data/icons/folder.png\")\n        self.TxtIcon = QIcon(\"Data/icons/file.png\")\n    def icon(self, type_info):",
        "detail": "QFileSystemModel.CustomIcon",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QFileSystemModel.CustomIcon",
        "description": "QFileSystemModel.CustomIcon",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 图 图 图 提供 \nclass FileIconProvider(QFileIconProvider):\n    def __init__(self, *args, **kwargs):\n        super(FileIconProvider, self).__init__(*args, **kwargs)\n        self.DirIcon = QIcon(\"Data/icons/folder.png\")\n        self.TxtIcon = QIcon(\"Data/icons/file.png\")\n    def icon(self, type_info):\n        '''",
        "detail": "QFileSystemModel.CustomIcon",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QFileSystemModel.CustomIcon",
        "description": "QFileSystemModel.CustomIcon",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 图 图 图 提供 \nclass FileIconProvider(QFileIconProvider):\n    def __init__(self, *args, **kwargs):\n        super(FileIconProvider, self).__init__(*args, **kwargs)\n        self.DirIcon = QIcon(\"Data/icons/folder.png\")\n        self.TxtIcon = QIcon(\"Data/icons/file.png\")\n    def icon(self, type_info):\n        '''\n        :param fileInfo: 参考http://doc.qt.io/qt-5/qfileinfo.html",
        "detail": "QFileSystemModel.CustomIcon",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QFlowLayout.Lib.flowlayout",
        "description": "QFlowLayout.Lib.flowlayout",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self):\n        super(Window, self).__init__()\n        flowLayout = FlowLayout()\n        flowLayout.addWidget(QPushButton(\"Short\"))\n        flowLayout.addWidget(QPushButton(\"Longer\"))\n        flowLayout.addWidget(QPushButton(\"Different text\"))\n        flowLayout.addWidget(QPushButton(\"More text\"))\n        flowLayout.addWidget(QPushButton(\"Even longer button text\"))\n        self.setLayout(flowLayout)",
        "detail": "QFlowLayout.Lib.flowlayout",
        "documentation": {}
    },
    {
        "label": "FlowLayout",
        "kind": 6,
        "importPath": "QFlowLayout.Lib.flowlayout",
        "description": "QFlowLayout.Lib.flowlayout",
        "peekOfCode": "class FlowLayout(QLayout):\n    def __init__(self, parent=None, margin=0, spacing=-1):\n        super(FlowLayout, self).__init__(parent)\n        if parent is not None:\n            self.setContentsMargins(margin, margin, margin, margin)\n        self.setSpacing(spacing)\n        self.itemList = []\n    def __del__(self):\n        item = self.takeAt(0)\n        while item:",
        "detail": "QFlowLayout.Lib.flowlayout",
        "documentation": {}
    },
    {
        "label": "CoverLabel",
        "kind": 6,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "class CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n#         super(CoverLabel, self).__init__(\n#             '<html><head/><body><img src=\"{0}\"/></body></html>'.format(os.path.abspath(cover_path)), *args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)\n        self.cover_path = cover_path",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "ItemWidget",
        "kind": 6,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "class ItemWidget(QWidget):\n    def __init__(self, cover_path, figure_info, figure_title,\n                 figure_score, figure_desc, figure_count, video_url, cover_url, img_path, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self.setMaximumSize(220, 420)\n        self.setMaximumSize(220, 420)\n        self.img_path = img_path\n        self.cover_url = cover_url\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(10, 20, 10, 0)",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "GridWidget",
        "kind": 6,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "class GridWidget(QWidget):\n    Page = 0\n    loadStarted = pyqtSignal(bool)\n    def __init__(self, *args, **kwargs):\n        super(GridWidget, self).__init__(*args, **kwargs)\n        self._layout = FlowLayout(self)  # 사용자 정의 간소화 레이아웃을 사용하십시오 \n        # 비동기식 네트워크 다운로드 관리자 \n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)\n    def load(self):",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "class Window(QScrollArea):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setFrameShape(self.NoFrame)\n        self.setWidgetResizable(True)\n        self.setAlignment(Qt.AlignCenter)\n        self._loadStart = False\n        # 网 网 \n        self._widget = GridWidget(self)",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Url",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "Url = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_play_sm",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "Svg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_loading",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "Svg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>\n        </linearGradient>\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\">",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 5,
        "importPath": "QFlowLayout.HotPlaylist",
        "description": "QFlowLayout.HotPlaylist",
        "peekOfCode": "Actor = '''<a href=\"{href}\" target=\"_blank\" title=\"{title}\" style=\"text-decoration: none;font-size: 12px;color: #999999;\">{title}</a>&nbsp;'''\nclass CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n#         super(CoverLabel, self).__init__(\n#             '<html><head/><body><img src=\"{0}\"/></body></html>'.format(os.path.abspath(cover_path)), *args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)",
        "detail": "QFlowLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "cheatsheet",
        "kind": 5,
        "importPath": "QFont.Data.提取字符.get",
        "description": "QFont.Data.提取字符.get",
        "peekOfCode": "cheatsheet = open(\"cheatsheet.txt\", \"rb\").read().decode()\nre_fa = re.compile(\"      fa(.*)\")\nre_ch = re.compile(\"\\[&amp;#x(.*?);\\]\")\nfas = re.findall(re_fa, cheatsheet)  # ['-500px\\r', '-address-book\\r']\nchs = re.findall(re_ch, cheatsheet)  # ['f26e', 'f2b9']\nassert len(fas) == len(chs)\nwith open(\"result.txt\", \"w\") as fp:\n    for i in range(len(fas)):\n        fp.write('fa{0} = \"\\\\u{1}\"'.format(\n            fas[i].replace(\"\\r\", \"\").replace(\"-\", \"_\"),",
        "detail": "QFont.Data.提取字符.get",
        "documentation": {}
    },
    {
        "label": "re_fa",
        "kind": 5,
        "importPath": "QFont.Data.提取字符.get",
        "description": "QFont.Data.提取字符.get",
        "peekOfCode": "re_fa = re.compile(\"      fa(.*)\")\nre_ch = re.compile(\"\\[&amp;#x(.*?);\\]\")\nfas = re.findall(re_fa, cheatsheet)  # ['-500px\\r', '-address-book\\r']\nchs = re.findall(re_ch, cheatsheet)  # ['f26e', 'f2b9']\nassert len(fas) == len(chs)\nwith open(\"result.txt\", \"w\") as fp:\n    for i in range(len(fas)):\n        fp.write('fa{0} = \"\\\\u{1}\"'.format(\n            fas[i].replace(\"\\r\", \"\").replace(\"-\", \"_\"),\n            chs[i])",
        "detail": "QFont.Data.提取字符.get",
        "documentation": {}
    },
    {
        "label": "re_ch",
        "kind": 5,
        "importPath": "QFont.Data.提取字符.get",
        "description": "QFont.Data.提取字符.get",
        "peekOfCode": "re_ch = re.compile(\"\\[&amp;#x(.*?);\\]\")\nfas = re.findall(re_fa, cheatsheet)  # ['-500px\\r', '-address-book\\r']\nchs = re.findall(re_ch, cheatsheet)  # ['f26e', 'f2b9']\nassert len(fas) == len(chs)\nwith open(\"result.txt\", \"w\") as fp:\n    for i in range(len(fas)):\n        fp.write('fa{0} = \"\\\\u{1}\"'.format(\n            fas[i].replace(\"\\r\", \"\").replace(\"-\", \"_\"),\n            chs[i])\n        )",
        "detail": "QFont.Data.提取字符.get",
        "documentation": {}
    },
    {
        "label": "fas",
        "kind": 5,
        "importPath": "QFont.Data.提取字符.get",
        "description": "QFont.Data.提取字符.get",
        "peekOfCode": "fas = re.findall(re_fa, cheatsheet)  # ['-500px\\r', '-address-book\\r']\nchs = re.findall(re_ch, cheatsheet)  # ['f26e', 'f2b9']\nassert len(fas) == len(chs)\nwith open(\"result.txt\", \"w\") as fp:\n    for i in range(len(fas)):\n        fp.write('fa{0} = \"\\\\u{1}\"'.format(\n            fas[i].replace(\"\\r\", \"\").replace(\"-\", \"_\"),\n            chs[i])\n        )\n        fp.write(\"\\n\")",
        "detail": "QFont.Data.提取字符.get",
        "documentation": {}
    },
    {
        "label": "chs",
        "kind": 5,
        "importPath": "QFont.Data.提取字符.get",
        "description": "QFont.Data.提取字符.get",
        "peekOfCode": "chs = re.findall(re_ch, cheatsheet)  # ['f26e', 'f2b9']\nassert len(fas) == len(chs)\nwith open(\"result.txt\", \"w\") as fp:\n    for i in range(len(fas)):\n        fp.write('fa{0} = \"\\\\u{1}\"'.format(\n            fas[i].replace(\"\\r\", \"\").replace(\"-\", \"_\"),\n            chs[i])\n        )\n        fp.write(\"\\n\")\nprint(\"ok\")",
        "detail": "QFont.Data.提取字符.get",
        "documentation": {}
    },
    {
        "label": "FontAwesomes",
        "kind": 6,
        "importPath": "QFont.Lib.FontAwesome",
        "description": "QFont.Lib.FontAwesome",
        "peekOfCode": "class FontAwesomes:\n    FA = None\n    @classmethod\n    def alls(cls):\n        if not cls.FA:\n            cls.FA = {name: getattr(cls, name)\n                      for name in dir(cls) if name.startswith(\"fa_\")}\n        return cls.FA\n    fa_500px = \"\\uf26e\"\n    fa_address_book = \"\\uf2b9\"",
        "detail": "QFont.Lib.FontAwesome",
        "documentation": {}
    },
    {
        "label": "ScrollArea",
        "kind": 6,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "class ScrollArea(QScrollArea):\n    def __init__(self):\n        super(ScrollArea, self).__init__()\n        self.setWindowTitle(\"FontAwesome Fonts\")\n        self.window = QWidget(self)\n        self.setWidget(self.window)\n        layout = QGridLayout(self.window)\n        fonts = list(FontAwesomes.alls().items())  # 786 131 * 6. \n        print(fonts)\n        for row in range(131):",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QFontDatabase, QFont\nfrom PyQt5.QtWidgets import QApplication, QWidget, QGridLayout,\\\n    QScrollArea, QPushButton\nfrom Lib.FontAwesome import FontAwesomes  # @UnresolvedImport\nclass ScrollArea(QScrollArea):\n    def __init__(self):",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QFontDatabase, QFont\nfrom PyQt5.QtWidgets import QApplication, QWidget, QGridLayout,\\\n    QScrollArea, QPushButton\nfrom Lib.FontAwesome import FontAwesomes  # @UnresolvedImport\nclass ScrollArea(QScrollArea):\n    def __init__(self):\n        super(ScrollArea, self).__init__()",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QFontDatabase, QFont\nfrom PyQt5.QtWidgets import QApplication, QWidget, QGridLayout,\\\n    QScrollArea, QPushButton\nfrom Lib.FontAwesome import FontAwesomes  # @UnresolvedImport\nclass ScrollArea(QScrollArea):\n    def __init__(self):\n        super(ScrollArea, self).__init__()\n        self.setWindowTitle(\"FontAwesome Fonts\")",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "app = QApplication(sys.argv)\napp.setStyleSheet(\"\"\"QPushButton:hover {\n    color: green;\n}\nQPushButton:pressed {\n    color: red;\n}\n\"\"\")\nQFontDatabase.addApplicationFont(\n    \"Data/Fonts/fontawesome-webfont.ttf\")",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "QFont.AwesomeFont",
        "description": "QFont.AwesomeFont",
        "peekOfCode": "window = ScrollArea()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "QFont.AwesomeFont",
        "documentation": {}
    },
    {
        "label": "AnimationShadowEffect",
        "kind": 6,
        "importPath": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "description": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "peekOfCode": "class AnimationShadowEffect(QGraphicsDropShadowEffect):\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)\n        self.setBlurRadius(0)\n        self._radius = 0\n        self.animation = QPropertyAnimation(self)\n        self.animation.setTargetObject(self)\n        self.animation.setDuration(2000)  # 一 次 次 循 ",
        "detail": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "description": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass AnimationShadowEffect(QGraphicsDropShadowEffect):\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)",
        "detail": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "description": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass AnimationShadowEffect(QGraphicsDropShadowEffect):\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)\n        self.setBlurRadius(0)\n        self._radius = 0\n        self.animation = QPropertyAnimation(self)",
        "detail": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "description": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "peekOfCode": "__Version__ = 1.0\nclass AnimationShadowEffect(QGraphicsDropShadowEffect):\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)\n        self.setBlurRadius(0)\n        self._radius = 0\n        self.animation = QPropertyAnimation(self)\n        self.animation.setTargetObject(self)",
        "detail": "QGraphicsDropShadowEffect.Lib.AnimationShadowEffect",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QGraphicsDropShadowEffect.ShadowEffect",
        "description": "QGraphicsDropShadowEffect.ShadowEffect",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # 绿色 边 框 \n        labelGreen = QLabel(self, pixmap=QPixmap('Data/1.jpg').scaled(100, 100))\n        layout.addWidget(labelGreen)\n        aniGreen = AnimationShadowEffect(Qt.darkGreen, labelGreen)\n        labelGreen.setGraphicsEffect(aniGreen)\n        aniGreen.start()",
        "detail": "QGraphicsDropShadowEffect.ShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.ShadowEffect",
        "description": "QGraphicsDropShadowEffect.ShadowEffect",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # 绿色 边 框 ",
        "detail": "QGraphicsDropShadowEffect.ShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.ShadowEffect",
        "description": "QGraphicsDropShadowEffect.ShadowEffect",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # 绿色 边 框 \n        labelGreen = QLabel(self, pixmap=QPixmap('Data/1.jpg').scaled(100, 100))\n        layout.addWidget(labelGreen)\n        aniGreen = AnimationShadowEffect(Qt.darkGreen, labelGreen)",
        "detail": "QGraphicsDropShadowEffect.ShadowEffect",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGraphicsDropShadowEffect.ShadowEffect",
        "description": "QGraphicsDropShadowEffect.ShadowEffect",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # 绿色 边 框 \n        labelGreen = QLabel(self, pixmap=QPixmap('Data/1.jpg').scaled(100, 100))\n        layout.addWidget(labelGreen)\n        aniGreen = AnimationShadowEffect(Qt.darkGreen, labelGreen)\n        labelGreen.setGraphicsEffect(aniGreen)",
        "detail": "QGraphicsDropShadowEffect.ShadowEffect",
        "documentation": {}
    },
    {
        "label": "ToolTipItem",
        "kind": 6,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "class ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: %s\" % color)\n        layout.addWidget(clabel)",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "ToolTipWidget",
        "kind": 6,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "class ToolTipWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ToolTipWidget, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet(\n            \"ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white\")\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"test\", self))\n        for color in (\"red\", \"blue\", \"green\", \"yellow\", \"black\"):\n            layout.addWidget(ToolTipItem(color, color, self))",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: %s\" % color)",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "app = QApplication(sys.argv)\nview = QGraphicsView()\nview.resize(800, 600)\nscene = QGraphicsScene(view)\nview.setScene(scene)\nview.show()\nw = scene.addWidget(ToolTipWidget())\nprint(w)\nsys.exit(app.exec_())",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "view = QGraphicsView()\nview.resize(800, 600)\nscene = QGraphicsScene(view)\nview.setScene(scene)\nview.show()\nw = scene.addWidget(ToolTipWidget())\nprint(w)\nsys.exit(app.exec_())",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "scene",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "scene = QGraphicsScene(view)\nview.setScene(scene)\nview.show()\nw = scene.addWidget(ToolTipWidget())\nprint(w)\nsys.exit(app.exec_())",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "QGraphicsView.AddQWidget",
        "description": "QGraphicsView.AddQWidget",
        "peekOfCode": "w = scene.addWidget(ToolTipWidget())\nprint(w)\nsys.exit(app.exec_())",
        "detail": "QGraphicsView.AddQWidget",
        "documentation": {}
    },
    {
        "label": "ImageView",
        "kind": 6,
        "importPath": "QGraphicsView.ImageView",
        "description": "QGraphicsView.ImageView",
        "peekOfCode": "class ImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):\n        image = kwargs.pop('image', None)\n        background = kwargs.pop('background', None)\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.setCursor(Qt.OpenHandCursor)\n        self.setBackground(background)\n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)",
        "detail": "QGraphicsView.ImageView",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGraphicsView.ImageView",
        "description": "QGraphicsView.ImageView",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020 Irony'\n__Version__ = 1.0\nimport os\nfrom PyQt5.QtCore import QPointF, Qt, QRectF, QSizeF\nfrom PyQt5.QtGui import QPainter, QColor, QImage, QPixmap\nfrom PyQt5.QtWidgets import QGraphicsView, QGraphicsPixmapItem, QGraphicsScene\nclass ImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):",
        "detail": "QGraphicsView.ImageView",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGraphicsView.ImageView",
        "description": "QGraphicsView.ImageView",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020 Irony'\n__Version__ = 1.0\nimport os\nfrom PyQt5.QtCore import QPointF, Qt, QRectF, QSizeF\nfrom PyQt5.QtGui import QPainter, QColor, QImage, QPixmap\nfrom PyQt5.QtWidgets import QGraphicsView, QGraphicsPixmapItem, QGraphicsScene\nclass ImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):\n        image = kwargs.pop('image', None)",
        "detail": "QGraphicsView.ImageView",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGraphicsView.ImageView",
        "description": "QGraphicsView.ImageView",
        "peekOfCode": "__Version__ = 1.0\nimport os\nfrom PyQt5.QtCore import QPointF, Qt, QRectF, QSizeF\nfrom PyQt5.QtGui import QPainter, QColor, QImage, QPixmap\nfrom PyQt5.QtWidgets import QGraphicsView, QGraphicsPixmapItem, QGraphicsScene\nclass ImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):\n        image = kwargs.pop('image', None)\n        background = kwargs.pop('background', None)",
        "detail": "QGraphicsView.ImageView",
        "documentation": {}
    },
    {
        "label": "GraphicsView",
        "kind": 6,
        "importPath": "QGraphicsView.WorldMap",
        "description": "QGraphicsView.WorldMap",
        "peekOfCode": "class GraphicsView(QGraphicsView):\n    # 배경 영역 색상 \n    backgroundColor = QColor(31, 31, 47)\n    # 테두리 색상 \n    borderColor = QColor(58, 58, 90)\n    def __init__(self, *args, **kwargs):\n        super(GraphicsView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 배경색을 설정합니다 \n        self.setBackgroundBrush(self.backgroundColor)",
        "detail": "QGraphicsView.WorldMap",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGraphicsView.WorldMap",
        "description": "QGraphicsView.WorldMap",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass GraphicsView(QGraphicsView):\n    # 배경 영역 색상 \n    backgroundColor = QColor(31, 31, 47)\n    # 테두리 색상 \n    borderColor = QColor(58, 58, 90)\n    def __init__(self, *args, **kwargs):\n        super(GraphicsView, self).__init__(*args, **kwargs)",
        "detail": "QGraphicsView.WorldMap",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGraphicsView.WorldMap",
        "description": "QGraphicsView.WorldMap",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass GraphicsView(QGraphicsView):\n    # 배경 영역 색상 \n    backgroundColor = QColor(31, 31, 47)\n    # 테두리 색상 \n    borderColor = QColor(58, 58, 90)\n    def __init__(self, *args, **kwargs):\n        super(GraphicsView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)",
        "detail": "QGraphicsView.WorldMap",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGraphicsView.WorldMap",
        "description": "QGraphicsView.WorldMap",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass GraphicsView(QGraphicsView):\n    # 배경 영역 색상 \n    backgroundColor = QColor(31, 31, 47)\n    # 테두리 색상 \n    borderColor = QColor(58, 58, 90)\n    def __init__(self, *args, **kwargs):\n        super(GraphicsView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 배경색을 설정합니다 ",
        "detail": "QGraphicsView.WorldMap",
        "documentation": {}
    },
    {
        "label": "CoverLabel",
        "kind": 6,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "class CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)\n        self.cover_path = cover_path\n        self.cover_title = cover_title\n        self.video_url = video_url",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "ItemWidget",
        "kind": 6,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "class ItemWidget(QWidget):\n    def __init__(self, cover_path, figure_info, figure_title,\n                 figure_score, figure_desc, figure_count, video_url, cover_url, img_path, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self.setMaximumSize(220, 380)\n        self.setMaximumSize(220, 380)\n        self.img_path = img_path\n        self.cover_url = cover_url\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "GridWidget",
        "kind": 6,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "class GridWidget(QWidget):\n    Page = 0\n    loadStarted = pyqtSignal(bool)\n    def __init__(self, *args, **kwargs):\n        super(GridWidget, self).__init__(*args, **kwargs)\n        self._layout = QGridLayout(self, spacing=20)\n        self._layout.setContentsMargins(20, 20, 20, 20)\n        # 비동기식 네트워크 다운로드 관리자 \n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "class Window(QScrollArea):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setFrameShape(self.NoFrame)\n        self.setWidgetResizable(True)\n        self.setAlignment(Qt.AlignCenter)\n        self._loadStart = False\n        # 网 网 \n        self._widget = GridWidget(self)",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Url",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "Url = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_play_sm",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "Svg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_loading",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "Svg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>\n        </linearGradient>\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\">",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 5,
        "importPath": "QGridLayout.HotPlaylist",
        "description": "QGridLayout.HotPlaylist",
        "peekOfCode": "Actor = '''<a href=\"{href}\" target=\"_blank\" title=\"{title}\" style=\"text-decoration: none;font-size: 12px;color: #999999;\">{title}</a>&nbsp;'''\nclass CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)\n        self.cover_path = cover_path\n        self.cover_title = cover_title",
        "detail": "QGridLayout.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "moduleName",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "moduleName = 'QtNinePatch'\n# The name of the SIP build file generated by SIP and used by the build\n# system.\nbuild_file = '%s.sbf' % moduleName\n# Get the SIP configuration information.\nconfig = sipconfig.Configuration()\n# pyqt5.5 + python34 + msvc 2010\nconfig.platform = \"win32-msvc2010\"\nqt_path = 'D:/soft/Qt/Qt5.5.1/5.5/msvc2010'\nprint('QT_DIR: %s' % qt_path)",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "build_file",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "build_file = '%s.sbf' % moduleName\n# Get the SIP configuration information.\nconfig = sipconfig.Configuration()\n# pyqt5.5 + python34 + msvc 2010\nconfig.platform = \"win32-msvc2010\"\nqt_path = 'D:/soft/Qt/Qt5.5.1/5.5/msvc2010'\nprint('QT_DIR: %s' % qt_path)\npyqtpath = os.path.dirname(PyQt5.__file__)\nprint('PyQt5 path: ', pyqtpath)\nconfig.sip_bin = os.path.join(pyqtpath, 'sip.exe')",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "config = sipconfig.Configuration()\n# pyqt5.5 + python34 + msvc 2010\nconfig.platform = \"win32-msvc2010\"\nqt_path = 'D:/soft/Qt/Qt5.5.1/5.5/msvc2010'\nprint('QT_DIR: %s' % qt_path)\npyqtpath = os.path.dirname(PyQt5.__file__)\nprint('PyQt5 path: ', pyqtpath)\nconfig.sip_bin = os.path.join(pyqtpath, 'sip.exe')\nconfig.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "config.platform",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "config.platform = \"win32-msvc2010\"\nqt_path = 'D:/soft/Qt/Qt5.5.1/5.5/msvc2010'\nprint('QT_DIR: %s' % qt_path)\npyqtpath = os.path.dirname(PyQt5.__file__)\nprint('PyQt5 path: ', pyqtpath)\nconfig.sip_bin = os.path.join(pyqtpath, 'sip.exe')\nconfig.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "qt_path",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "qt_path = 'D:/soft/Qt/Qt5.5.1/5.5/msvc2010'\nprint('QT_DIR: %s' % qt_path)\npyqtpath = os.path.dirname(PyQt5.__file__)\nprint('PyQt5 path: ', pyqtpath)\nconfig.sip_bin = os.path.join(pyqtpath, 'sip.exe')\nconfig.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",\n    '-b', \"build/\" + build_file,",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "pyqtpath",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "pyqtpath = os.path.dirname(PyQt5.__file__)\nprint('PyQt5 path: ', pyqtpath)\nconfig.sip_bin = os.path.join(pyqtpath, 'sip.exe')\nconfig.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",\n    '-b', \"build/\" + build_file,\n    '-I', config.default_sip_dir + '/PyQt5',\n    PYQT_CONFIGURATION.get('sip_flags', ''),",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "config.sip_bin",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "config.sip_bin = os.path.join(pyqtpath, 'sip.exe')\nconfig.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",\n    '-b', \"build/\" + build_file,\n    '-I', config.default_sip_dir + '/PyQt5',\n    PYQT_CONFIGURATION.get('sip_flags', ''),\n    '%s.sip' % moduleName,\n])",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "config.default_sip_dir",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "config.default_sip_dir = os.path.join(pyqtpath, 'sip')\nsip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",\n    '-b', \"build/\" + build_file,\n    '-I', config.default_sip_dir + '/PyQt5',\n    PYQT_CONFIGURATION.get('sip_flags', ''),\n    '%s.sip' % moduleName,\n])\nos.makedirs('build', exist_ok=True)",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "sip_cmd",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "sip_cmd = ' '.join([\n    config.sip_bin,\n    '-c', \"build\",\n    '-b', \"build/\" + build_file,\n    '-I', config.default_sip_dir + '/PyQt5',\n    PYQT_CONFIGURATION.get('sip_flags', ''),\n    '%s.sip' % moduleName,\n])\nos.makedirs('build', exist_ok=True)\nprint(sip_cmd)",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "makefile",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "makefile = sipconfig.SIPModuleMakefile(\n    config, build_file, dir='build'\n)\n# Add the library we are wrapping.  The name doesn't include any platform\n# specific prefixes or extensions (e.g. the 'lib' prefix on UNIX, or the\n# '.dll' extension on Windows).\n# 헤더 파일 경로 추가 \nmakefile.extra_include_dirs = [\n    '../', '.',\n    os.path.join(qt_path, 'include'),",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "makefile.extra_include_dirs",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "makefile.extra_include_dirs = [\n    '../', '.',\n    os.path.join(qt_path, 'include'),\n    os.path.join(qt_path, 'include', 'QtCore'),\n    os.path.join(qt_path, 'include', 'QtGui')\n]\n# C ++로 컴파일 된 라이브러리 파일 경로 추가 \nmakefile.extra_lib_dirs = [\n    os.path.abspath('../build'),\n    os.path.join(qt_path, 'lib'),",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "makefile.extra_lib_dirs",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "makefile.extra_lib_dirs = [\n    os.path.abspath('../build'),\n    os.path.join(qt_path, 'lib'),\n]\nprint(makefile.extra_lib_dirs)\nmakefile.extra_libs = [\n    moduleName,\n    'Qt5Core',\n    'Qt5Gui'\n]",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "makefile.extra_libs",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch.sip.configure",
        "description": "QLabel.Lib.QtNinePatch.sip.configure",
        "peekOfCode": "makefile.extra_libs = [\n    moduleName,\n    'Qt5Core',\n    'Qt5Gui'\n]\nprint(makefile.extra_libs)\n# Generate the Makefile itself.\nmakefile.generate()\nshutil.copy('../build/%s.dll' % moduleName, '%s.dll' % moduleName)\nos.chdir('build')",
        "detail": "QLabel.Lib.QtNinePatch.sip.configure",
        "documentation": {}
    },
    {
        "label": "_Exception",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class _Exception(Exception):\n    def __init__(self, imgW, imgH):\n        self.imgW = imgW\n        self.imgH = imgH\nclass NinePatchException(Exception):\n    def __str__(self):\n        return \"Nine patch error\"\nclass ExceptionIncorrectWidth(_Exception):\n    def __str__(self):\n        return \"Input incorrect width. Mimimum width = :{imgW}\".format(imgW=self.imgW)",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "NinePatchException",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class NinePatchException(Exception):\n    def __str__(self):\n        return \"Nine patch error\"\nclass ExceptionIncorrectWidth(_Exception):\n    def __str__(self):\n        return \"Input incorrect width. Mimimum width = :{imgW}\".format(imgW=self.imgW)\nclass ExceptionIncorrectWidthAndHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect width width and height. Minimum width = :{imgW} . Minimum height = :{imgH}\".format(imgW=self.imgW, imgH=self.imgH)\nclass ExceptionIncorrectHeight(_Exception):",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "ExceptionIncorrectWidth",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class ExceptionIncorrectWidth(_Exception):\n    def __str__(self):\n        return \"Input incorrect width. Mimimum width = :{imgW}\".format(imgW=self.imgW)\nclass ExceptionIncorrectWidthAndHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect width width and height. Minimum width = :{imgW} . Minimum height = :{imgH}\".format(imgW=self.imgW, imgH=self.imgH)\nclass ExceptionIncorrectHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect height. Minimum height = :{imgW}\".format(imgW=self.imgW)\nclass ExceptionNot9Patch(Exception):",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "ExceptionIncorrectWidthAndHeight",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class ExceptionIncorrectWidthAndHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect width width and height. Minimum width = :{imgW} . Minimum height = :{imgH}\".format(imgW=self.imgW, imgH=self.imgH)\nclass ExceptionIncorrectHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect height. Minimum height = :{imgW}\".format(imgW=self.imgW)\nclass ExceptionNot9Patch(Exception):\n    def __str__(self):\n        return \"It is not nine patch image\"\nclass NinePatch:",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "ExceptionIncorrectHeight",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class ExceptionIncorrectHeight(_Exception):\n    def __str__(self):\n        return \"Input incorrect height. Minimum height = :{imgW}\".format(imgW=self.imgW)\nclass ExceptionNot9Patch(Exception):\n    def __str__(self):\n        return \"It is not nine patch image\"\nclass NinePatch:\n    def __init__(self, fileName):\n        self.CachedImage = None    # 캠페인 \n        self.OldWidth = -1",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "ExceptionNot9Patch",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class ExceptionNot9Patch(Exception):\n    def __str__(self):\n        return \"It is not nine patch image\"\nclass NinePatch:\n    def __init__(self, fileName):\n        self.CachedImage = None    # 캠페인 \n        self.OldWidth = -1\n        self.OldHeight = -1\n        self.ResizeDistancesX = []\n        self.ResizeDistancesY = []    # [(int, int)] 배열 ",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "NinePatch",
        "kind": 6,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "class NinePatch:\n    def __init__(self, fileName):\n        self.CachedImage = None    # 캠페인 \n        self.OldWidth = -1\n        self.OldHeight = -1\n        self.ResizeDistancesX = []\n        self.ResizeDistancesY = []    # [(int, int)] 배열 \n        self.setImage(fileName)\n    def width(self):\n        return self.Image.width()",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass _Exception(Exception):\n    def __init__(self, imgW, imgH):\n        self.imgW = imgW\n        self.imgH = imgH\nclass NinePatchException(Exception):",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass _Exception(Exception):\n    def __init__(self, imgW, imgH):\n        self.imgW = imgW\n        self.imgH = imgH\nclass NinePatchException(Exception):\n    def __str__(self):\n        return \"Nine patch error\"\nclass ExceptionIncorrectWidth(_Exception):",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.Lib.NinePatch",
        "description": "QLabel.Lib.NinePatch",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass _Exception(Exception):\n    def __init__(self, imgW, imgH):\n        self.imgW = imgW\n        self.imgH = imgH\nclass NinePatchException(Exception):\n    def __str__(self):\n        return \"Nine patch error\"\nclass ExceptionIncorrectWidth(_Exception):\n    def __str__(self):",
        "detail": "QLabel.Lib.NinePatch",
        "documentation": {}
    },
    {
        "label": "Part",
        "kind": 6,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "class Part:\n    def __init__(self, pos=0, length=0, stretchable=False):\n        self.pos = pos\n        self.length = length\n        self.stretchable = stretchable\ndef isStretchableMarker(pixel):\n    return (qAlpha(pixel) >> 7) & 1\ndef resize9patch(image, dw, dh):\n    sw = image.width()\n    sh = image.height()",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "isStretchableMarker",
        "kind": 2,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "def isStretchableMarker(pixel):\n    return (qAlpha(pixel) >> 7) & 1\ndef resize9patch(image, dw, dh):\n    sw = image.width()\n    sh = image.height()\n    if sw > 2 and sh > 2 and dw > 0 and dh > 0:\n        pixmap = QPixmap(dw, dh)\n        pixmap.fill(Qt.transparent)\n        pr = QPainter(pixmap)\n        pr.setRenderHint(QPainter.Antialiasing)",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "resize9patch",
        "kind": 2,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "def resize9patch(image, dw, dh):\n    sw = image.width()\n    sh = image.height()\n    if sw > 2 and sh > 2 and dw > 0 and dh > 0:\n        pixmap = QPixmap(dw, dh)\n        pixmap.fill(Qt.transparent)\n        pr = QPainter(pixmap)\n        pr.setRenderHint(QPainter.Antialiasing)\n        pr.setRenderHint(QPainter.SmoothPixmapTransform)\n        horz = []",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "createPixmapFromNinePatchImage",
        "kind": 2,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "def createPixmapFromNinePatchImage(image, dw, dh):\n    w = dw\n    h = dh\n    if w < image.width() or h < image.height():  # shrink\n        w = max(image.width(), w)\n        h = max(image.height(), h)\n        pm1 = resize9patch(image, w, h)\n        if pm1.isNull():\n            return QPixmap()\n        pm2 = QPixmap(dw, dh)",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Part:\n    def __init__(self, pos=0, length=0, stretchable=False):\n        self.pos = pos\n        self.length = length\n        self.stretchable = stretchable",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Part:\n    def __init__(self, pos=0, length=0, stretchable=False):\n        self.pos = pos\n        self.length = length\n        self.stretchable = stretchable\ndef isStretchableMarker(pixel):\n    return (qAlpha(pixel) >> 7) & 1\ndef resize9patch(image, dw, dh):",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.Lib.QtNinePatch2",
        "description": "QLabel.Lib.QtNinePatch2",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Part:\n    def __init__(self, pos=0, length=0, stretchable=False):\n        self.pos = pos\n        self.length = length\n        self.stretchable = stretchable\ndef isStretchableMarker(pixel):\n    return (qAlpha(pixel) >> 7) & 1\ndef resize9patch(image, dw, dh):\n    sw = image.width()",
        "detail": "QLabel.Lib.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x19\\xf0\\\n\\xff\\\n\\xd8\\xff\\xe0\\x00\\x10\\x4a\\x46\\x49\\x46\\x00\\x01\\x01\\x01\\x00\\x78\\x00\\\n\\x78\\x00\\x00\\xff\\xe1\\x00\\x3a\\x45\\x78\\x69\\x66\\x00\\x00\\x4d\\x4d\\x00\\\n\\x2a\\x00\\x00\\x00\\x08\\x00\\x03\\x51\\x10\\x00\\x01\\x00\\x00\\x00\\x01\\x01\\\n\\x00\\x00\\x00\\x51\\x11\\x00\\x04\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x51\\\n\\x12\\x00\\x04\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\\n\\xdb\\x00\\x43\\x00\\x02\\x01\\x01\\x02\\x01\\x01\\x02\\x02\\x02\\x02\\x02\\x02\\\n\\x02\\x02\\x03\\x05\\x03\\x03\\x03\\x03\\x03\\x06\\x04\\x04\\x03\\x05\\x07\\x06\\",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x06\\\n\\x07\\x03\\x7d\\xc3\\\n\\x00\\x69\\\n\\x00\\x6d\\x00\\x61\\x00\\x67\\x00\\x65\\x00\\x73\\\n\\x00\\x08\\\n\\x0b\\x77\\x5c\\xa7\\\n\\x00\\x68\\\n\\x00\\x65\\x00\\x61\\x00\\x64\\x00\\x2e\\x00\\x6a\\x00\\x70\\x00\\x67\\\n\"",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v1",
        "kind": 5,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "qt_resource_struct_v1 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\"\nqt_resource_struct_v2 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v2",
        "kind": 5,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "qt_resource_struct_v2 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x60\\x83\\x46\\x10\\xc7\\\n\"\nqt_version = QtCore.qVersion().split('.')\nif qt_version < ['5', '8', '0']:",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "qt_version",
        "kind": 5,
        "importPath": "QLabel.Lib.res_rc",
        "description": "QLabel.Lib.res_rc",
        "peekOfCode": "qt_version = QtCore.qVersion().split('.')\nif qt_version < ['5', '8', '0']:\n    rcc_version = 1\n    qt_resource_struct = qt_resource_struct_v1\nelse:\n    rcc_version = 2\n    qt_resource_struct = qt_resource_struct_v2\ndef qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():",
        "detail": "QLabel.Lib.res_rc",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.Lib.xpmres",
        "description": "QLabel.Lib.xpmres",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 여기서 변환 된 XPM 배열을 PY 파일에 변수로 직접 놓습니다. \n# 여기서 XPM 파일의 내용을 Python의 목록으로 수정해야합니다. \nimage_head = [\n    \"120 120 256 2\",\n    \"8  c Black\",\n    \"u. c #CACACA\",\n    \" . c #0F0F0F\",",
        "detail": "QLabel.Lib.xpmres",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.Lib.xpmres",
        "description": "QLabel.Lib.xpmres",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 여기서 변환 된 XPM 배열을 PY 파일에 변수로 직접 놓습니다. \n# 여기서 XPM 파일의 내용을 Python의 목록으로 수정해야합니다. \nimage_head = [\n    \"120 120 256 2\",\n    \"8  c Black\",\n    \"u. c #CACACA\",\n    \" . c #0F0F0F\",\n    \"I  c #D9D9D9\",",
        "detail": "QLabel.Lib.xpmres",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.Lib.xpmres",
        "description": "QLabel.Lib.xpmres",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 여기서 변환 된 XPM 배열을 PY 파일에 변수로 직접 놓습니다. \n# 여기서 XPM 파일의 내용을 Python의 목록으로 수정해야합니다. \nimage_head = [\n    \"120 120 256 2\",\n    \"8  c Black\",\n    \"u. c #CACACA\",\n    \" . c #0F0F0F\",\n    \"I  c #D9D9D9\",\n    \"x. c #1E1E1E\",",
        "detail": "QLabel.Lib.xpmres",
        "documentation": {}
    },
    {
        "label": "image_head",
        "kind": 5,
        "importPath": "QLabel.Lib.xpmres",
        "description": "QLabel.Lib.xpmres",
        "peekOfCode": "image_head = [\n    \"120 120 256 2\",\n    \"8  c Black\",\n    \"u. c #CACACA\",\n    \" . c #0F0F0F\",\n    \"I  c #D9D9D9\",\n    \"x. c #1E1E1E\",\n    \"@X c #E8E8E8\",\n    \"%. c #2D2D2D\",\n    \"l  c #F7F7F7\",",
        "detail": "QLabel.Lib.xpmres",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "QLabel.CircleImage",
        "description": "QLabel.CircleImage",
        "peekOfCode": "class Label(QLabel):\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n        ############## ¶ ######################## ##################################################### ##################################################### ##################################################### ##################################################### ## \n        self.target = QPixmap(self.size())  # 크기 및 제어 \n        self.target.fill(Qt.transparent)  # 背景 背景 为 ",
        "detail": "QLabel.CircleImage",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QLabel.CircleImage",
        "description": "QLabel.CircleImage",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(Label(self))\n        layout.addWidget(Label(self, antialiasing=False))\n        self.setStyleSheet(\"background: black;\")\nif __name__ == \"__main__\":\n    import sys\n    from PyQt5.QtWidgets import QApplication",
        "detail": "QLabel.CircleImage",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.CircleImage",
        "description": "QLabel.CircleImage",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Label(QLabel):\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100",
        "detail": "QLabel.CircleImage",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.CircleImage",
        "description": "QLabel.CircleImage",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Label(QLabel):\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n        ############## ¶ ######################## ##################################################### ##################################################### ##################################################### ##################################################### ## ",
        "detail": "QLabel.CircleImage",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.CircleImage",
        "description": "QLabel.CircleImage",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Label(QLabel):\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n        ############## ¶ ######################## ##################################################### ##################################################### ##################################################### ##################################################### ## \n        self.target = QPixmap(self.size())  # 크기 및 제어 ",
        "detail": "QLabel.CircleImage",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QLabel.ImageRotate",
        "description": "QLabel.ImageRotate",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.imageLabel = QLabel(self)\n        self.imageLabel.setAlignment(Qt.AlignCenter)\n        layout.addWidget(self.imageLabel)\n        clayout = QHBoxLayout()\n        layout.addItem(clayout)\n        clayout.addItem(QSpacerItem(",
        "detail": "QLabel.ImageRotate",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.ImageRotate",
        "description": "QLabel.ImageRotate",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.imageLabel = QLabel(self)",
        "detail": "QLabel.ImageRotate",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.ImageRotate",
        "description": "QLabel.ImageRotate",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.imageLabel = QLabel(self)\n        self.imageLabel.setAlignment(Qt.AlignCenter)\n        layout.addWidget(self.imageLabel)\n        clayout = QHBoxLayout()",
        "detail": "QLabel.ImageRotate",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.ImageRotate",
        "description": "QLabel.ImageRotate",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.imageLabel = QLabel(self)\n        self.imageLabel.setAlignment(Qt.AlignCenter)\n        layout.addWidget(self.imageLabel)\n        clayout = QHBoxLayout()\n        layout.addItem(clayout)",
        "detail": "QLabel.ImageRotate",
        "documentation": {}
    },
    {
        "label": "SlippedImgWidget",
        "kind": 6,
        "importPath": "QLabel.ImageSlipped",
        "description": "QLabel.ImageSlipped",
        "peekOfCode": "class SlippedImgWidget(QWidget):\n    def __init__(self, bg, fg, *args, **kwargs):\n        super(SlippedImgWidget, self).__init__(*args, **kwargs)\n        # 开 跟 跟 \n        self.setMouseTracking(True)\n        # 배경 \n        self.bgPixmap = QPixmap(bg)\n        # 前 \n        self.pePixmap = QPixmap(fg)\n        # 최소 크기 (백그라운드 오른쪽 및 아래의 10 픽셀 숨기기) ",
        "detail": "QLabel.ImageSlipped",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.ImageSlipped",
        "description": "QLabel.ImageSlipped",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SlippedImgWidget(QWidget):\n    def __init__(self, bg, fg, *args, **kwargs):\n        super(SlippedImgWidget, self).__init__(*args, **kwargs)\n        # 开 跟 跟 \n        self.setMouseTracking(True)",
        "detail": "QLabel.ImageSlipped",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.ImageSlipped",
        "description": "QLabel.ImageSlipped",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SlippedImgWidget(QWidget):\n    def __init__(self, bg, fg, *args, **kwargs):\n        super(SlippedImgWidget, self).__init__(*args, **kwargs)\n        # 开 跟 跟 \n        self.setMouseTracking(True)\n        # 배경 \n        self.bgPixmap = QPixmap(bg)\n        # 前 ",
        "detail": "QLabel.ImageSlipped",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.ImageSlipped",
        "description": "QLabel.ImageSlipped",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass SlippedImgWidget(QWidget):\n    def __init__(self, bg, fg, *args, **kwargs):\n        super(SlippedImgWidget, self).__init__(*args, **kwargs)\n        # 开 跟 跟 \n        self.setMouseTracking(True)\n        # 배경 \n        self.bgPixmap = QPixmap(bg)\n        # 前 \n        self.pePixmap = QPixmap(fg)",
        "detail": "QLabel.ImageSlipped",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "class Label(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 \n        self.image = NinePatch('Data/skin_aio_friend_bubble_pressed.9.png')\n    def paintEvent(self, event):\n        super(Label, self).paintEvent(event)\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing)\n        painter.setRenderHint(QPainter.SmoothPixmapTransform)",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage, QPainter\nfrom PyQt5.QtWidgets import QApplication, QLabel, QWidget\nfrom Lib.NinePatch import NinePatch\nclass Label(QWidget):",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage, QPainter\nfrom PyQt5.QtWidgets import QApplication, QLabel, QWidget\nfrom Lib.NinePatch import NinePatch\nclass Label(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 ",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage, QPainter\nfrom PyQt5.QtWidgets import QApplication, QLabel, QWidget\nfrom Lib.NinePatch import NinePatch\nclass Label(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 \n        self.image = NinePatch('Data/skin_aio_friend_bubble_pressed.9.png')",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "app = QApplication(sys.argv)\nw = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "QLabel.NinePatch",
        "description": "QLabel.NinePatch",
        "peekOfCode": "w = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.NinePatch",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "class Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 \n        self.image = QImage('Data/skin_aio_friend_bubble_pressed.9.png')\n    def showEvent(self, event):\n        super(Label, self).showEvent(event)\n        pixmap = QtNinePatch.createPixmapFromNinePatchImage(\n            self.image, self.width(), self.height())\n        self.setPixmap(pixmap)",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom ctypes import CDLL\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nCDLL('Lib/QtNinePatch/sip/QtNinePatch.dll')",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom ctypes import CDLL\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nCDLL('Lib/QtNinePatch/sip/QtNinePatch.dll')\nfrom Lib.QtNinePatch.sip.QtNinePatch import QtNinePatch\nclass Label(QLabel):\n    def __init__(self, *args, **kwargs):",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport sys\nfrom ctypes import CDLL\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nCDLL('Lib/QtNinePatch/sip/QtNinePatch.dll')\nfrom Lib.QtNinePatch.sip.QtNinePatch import QtNinePatch\nclass Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "app = QApplication(sys.argv)\nw = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch",
        "description": "QLabel.QtNinePatch",
        "peekOfCode": "w = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.QtNinePatch",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "class Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 \n        self.image = QImage('Data/skin_aio_friend_bubble_pressed.9.png')\n    def showEvent(self, event):\n        super(Label, self).showEvent(event)\n        pixmap = QtNinePatch2.createPixmapFromNinePatchImage(\n            self.image, self.width(), self.height())\n        self.setPixmap(pixmap)",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nfrom Lib import QtNinePatch2\nclass Label(QLabel):",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nfrom Lib import QtNinePatch2\nclass Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 ",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtGui import QImage\nfrom PyQt5.QtWidgets import QApplication, QLabel\nfrom Lib import QtNinePatch2\nclass Label(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        형식의 그림 # .9 형식 \n        self.image = QImage('Data/skin_aio_friend_bubble_pressed.9.png')",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "app = QApplication(sys.argv)\nw = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "QLabel.QtNinePatch2",
        "description": "QLabel.QtNinePatch2",
        "peekOfCode": "w = Label()\nw.resize(400, 200)\nw.show()\nsys.exit(app.exec_())",
        "detail": "QLabel.QtNinePatch2",
        "documentation": {}
    },
    {
        "label": "ImageView",
        "kind": 6,
        "importPath": "QLabel.ShowImage",
        "description": "QLabel.ShowImage",
        "peekOfCode": "class ImageView(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QHBoxLayout(self)\n        # 파일에서 이미지로드 \n        layout.addWidget(QLabel(self, pixmap=QPixmap(\"Data/head.jpg\")))\n        # qResource 참조 http://doc.qt.io/qt-5/resources.html. \n        # load 1 자원 파일에서 py 파일에서 1 \n        # 转 p pyrcc5 res.qrc -o res_rc.py. ",
        "detail": "QLabel.ShowImage",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QLabel.ShowImage",
        "description": "QLabel.ShowImage",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ImageView(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QHBoxLayout(self)\n        # 파일에서 이미지로드 \n        layout.addWidget(QLabel(self, pixmap=QPixmap(\"Data/head.jpg\")))",
        "detail": "QLabel.ShowImage",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QLabel.ShowImage",
        "description": "QLabel.ShowImage",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ImageView(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QHBoxLayout(self)\n        # 파일에서 이미지로드 \n        layout.addWidget(QLabel(self, pixmap=QPixmap(\"Data/head.jpg\")))\n        # qResource 참조 http://doc.qt.io/qt-5/resources.html. ",
        "detail": "QLabel.ShowImage",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QLabel.ShowImage",
        "description": "QLabel.ShowImage",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ImageView(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QHBoxLayout(self)\n        # 파일에서 이미지로드 \n        layout.addWidget(QLabel(self, pixmap=QPixmap(\"Data/head.jpg\")))\n        # qResource 참조 http://doc.qt.io/qt-5/resources.html. \n        # load 1 자원 파일에서 py 파일에서 1 ",
        "detail": "QLabel.ShowImage",
        "documentation": {}
    },
    {
        "label": "CustomWidget",
        "kind": 6,
        "importPath": "QListView.CustomWidgetItem",
        "description": "QListView.CustomWidgetItem",
        "peekOfCode": "class CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self))\n    def sizeHint(self):\n        # 항목의 높이를 결정하십시오 \n        return QSize(200, 40)",
        "detail": "QListView.CustomWidgetItem",
        "documentation": {}
    },
    {
        "label": "ListView",
        "kind": 6,
        "importPath": "QListView.CustomWidgetItem",
        "description": "QListView.CustomWidgetItem",
        "peekOfCode": "class ListView(QListView):\n    def __init__(self, *args, **kwargs):\n        super(ListView, self).__init__(*args, **kwargs)\n        # 모델 \n        self._model = QStandardItemModel(self)\n        self.setModel(self._model)\n        # 循 生 生 10 10 自 控 \n        for i in range(10):\n            item = QStandardItem()\n            self._model.appendRow(item)  # 아이템 추가 ",
        "detail": "QListView.CustomWidgetItem",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetItem",
        "description": "QListView.CustomWidgetItem",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "QListView.CustomWidgetItem",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetItem",
        "description": "QListView.CustomWidgetItem",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self))\n    def sizeHint(self):",
        "detail": "QListView.CustomWidgetItem",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetItem",
        "description": "QListView.CustomWidgetItem",
        "peekOfCode": "__Version__ = 1.0\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self))\n    def sizeHint(self):\n        # 항목의 높이를 결정하십시오 ",
        "detail": "QListView.CustomWidgetItem",
        "documentation": {}
    },
    {
        "label": "CustomWidget",
        "kind": 6,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "class CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self))\n    def sizeHint(self):\n        # 항목의 높이를 결정하십시오 \n        return QSize(200, 40)",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "SortFilterProxyModel",
        "kind": 6,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "class SortFilterProxyModel(QSortFilterProxyModel):\n    def lessThan(self, source_left, source_right):\n        if not source_left.isValid() or not source_right.isValid():\n            return False\n        # 데이터 검색 \n        leftData = self.sourceModel().data(source_left)\n        rightData = self.sourceModel().data(source_right)\n        if self.sortOrder() == Qt.DescendingOrder:\n            # 시간별로 정렬하십시오 \n            leftData = leftData.split('-')[-1]",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        # 名字 排序 \n        layout.addWidget(QPushButton('以名字升序', self, clicked=self.sortByName))\n        # 时 时间 序 \n        layout.addWidget(QPushButton('以时间倒序', self, clicked=self.sortByTime))\n        # listview",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "randomChar",
        "kind": 2,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "def randomChar(y):\n    # 임의의 문자열을 반환합니다 \n    return ''.join(choice(string.ascii_letters) for _ in range(y))\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self))",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndef randomChar(y):\n    # 임의의 문자열을 반환합니다 \n    return ''.join(choice(string.ascii_letters) for _ in range(y))\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndef randomChar(y):\n    # 임의의 문자열을 반환합니다 \n    return ''.join(choice(string.ascii_letters) for _ in range(y))\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListView.CustomWidgetSortItem",
        "description": "QListView.CustomWidgetSortItem",
        "peekOfCode": "__Version__ = 1.0\ndef randomChar(y):\n    # 임의의 문자열을 반환합니다 \n    return ''.join(choice(string.ascii_letters) for _ in range(y))\nclass CustomWidget(QWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))",
        "detail": "QListView.CustomWidgetSortItem",
        "documentation": {}
    },
    {
        "label": "BigImageView",
        "kind": 6,
        "importPath": "QListView.ImageView",
        "description": "QListView.ImageView",
        "peekOfCode": "class BigImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):\n        image = kwargs.pop('image', None)\n        background = kwargs.pop('background', None)\n        super(BigImageView, self).__init__(*args, **kwargs)\n        self.setCursor(Qt.OpenHandCursor)\n        self.setBackground(background)\n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)",
        "detail": "QListView.ImageView",
        "documentation": {}
    },
    {
        "label": "ImageView",
        "kind": 6,
        "importPath": "QListView.ImageView",
        "description": "QListView.ImageView",
        "peekOfCode": "class ImageView(QListView):\n    def __init__(self, *args, **kwargs):\n        super(ImageView, self).__init__(*args, **kwargs)\n        self.setFrameShape(self.NoFrame)\n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        self.setEditTriggers(self.NoEditTriggers)\n        self.setDropIndicatorShown(True)\n        self.setDragDropMode(self.DragDrop)\n        self.setDefaultDropAction(Qt.IgnoreAction)\n        self.setSelectionMode(self.ExtendedSelection)",
        "detail": "QListView.ImageView",
        "documentation": {}
    },
    {
        "label": "ScrollPixel",
        "kind": 5,
        "importPath": "QListView.ImageView",
        "description": "QListView.ImageView",
        "peekOfCode": "ScrollPixel = 40\nclass BigImageView(QGraphicsView):\n    \"\"\"图片查看控件\"\"\"\n    def __init__(self, *args, **kwargs):\n        image = kwargs.pop('image', None)\n        background = kwargs.pop('background', None)\n        super(BigImageView, self).__init__(*args, **kwargs)\n        self.setCursor(Qt.OpenHandCursor)\n        self.setBackground(background)\n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)",
        "detail": "QListView.ImageView",
        "documentation": {}
    },
    {
        "label": "SortFilterProxyModel",
        "kind": 6,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "class SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self._topIndex = 0\n    def setSortIndex(self, index):\n        self._topIndex = index\n        print('在最前面的序号为:', index)\n    def lessThan(self, source_left, source_right):\n        if not source_left.isValid() or not source_right.isValid():\n            return False",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(600, 400)\n        layout = QVBoxLayout(self)\n        self.listView = QListView(self)\n        self.listView.setEditTriggers(QListView.NoEditTriggers)\n        layout.addWidget(self.listView)\n        layout.addWidget(QPushButton('恢复默认顺序', self, clicked=self.restoreSort))\n        layout.addWidget(QPushButton('唐', self, clicked=self.sortByClassify))",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self._topIndex = 0\n    def setSortIndex(self, index):",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self._topIndex = 0\n    def setSortIndex(self, index):\n        self._topIndex = index\n        print('在最前面的序号为:', index)\n    def lessThan(self, source_left, source_right):",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass SortFilterProxyModel(QSortFilterProxyModel):\n    def __init__(self, *args, **kwargs):\n        super(SortFilterProxyModel, self).__init__(*args, **kwargs)\n        self._topIndex = 0\n    def setSortIndex(self, index):\n        self._topIndex = index\n        print('在最前面的序号为:', index)\n    def lessThan(self, source_left, source_right):\n        if not source_left.isValid() or not source_right.isValid():",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "NameDict",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "NameDict = {\n    '唐': ['Tang', 0],\n    '宋': ['Song', 1],\n    '元': ['Yuan', 2],\n    '明': ['Ming', 3],\n    '清': ['Qing', 4],\n}\nIndexDict = {\n    0: '唐',\n    1: '宋',",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "IndexDict",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "IndexDict = {\n    0: '唐',\n    1: '宋',\n    2: '元',\n    3: '明',\n    4: '清',\n}\nIdRole = Qt.UserRole + 1            # 정렬을 다시 시작하는 데 사용됩니다 \nClassifyRole = Qt.UserRole + 2      # 분류 시퀀스 번호로 정렬합니다 \nclass Window(QWidget):",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "IdRole",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "IdRole = Qt.UserRole + 1            # 정렬을 다시 시작하는 데 사용됩니다 \nClassifyRole = Qt.UserRole + 2      # 분류 시퀀스 번호로 정렬합니다 \nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(600, 400)\n        layout = QVBoxLayout(self)\n        self.listView = QListView(self)\n        self.listView.setEditTriggers(QListView.NoEditTriggers)\n        layout.addWidget(self.listView)",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "ClassifyRole",
        "kind": 5,
        "importPath": "QListView.SortItemByRole",
        "description": "QListView.SortItemByRole",
        "peekOfCode": "ClassifyRole = Qt.UserRole + 2      # 분류 시퀀스 번호로 정렬합니다 \nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(600, 400)\n        layout = QVBoxLayout(self)\n        self.listView = QListView(self)\n        self.listView.setEditTriggers(QListView.NoEditTriggers)\n        layout.addWidget(self.listView)\n        layout.addWidget(QPushButton('恢复默认顺序', self, clicked=self.restoreSort))",
        "detail": "QListView.SortItemByRole",
        "documentation": {}
    },
    {
        "label": "ItemWidget",
        "kind": 6,
        "importPath": "QListWidget.DeleteCustomItem",
        "description": "QListWidget.DeleteCustomItem",
        "peekOfCode": "class ItemWidget(QWidget):\n    itemDeleted = pyqtSignal(QListWidgetItem)\n    def __init__(self, text, item, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self._item = item  # 保 l 的 对 对 对 引 引 引 \n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self, clicked=self.doDeleteItem))\n    def doDeleteItem(self):",
        "detail": "QListWidget.DeleteCustomItem",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListWidget.DeleteCustomItem",
        "description": "QListWidget.DeleteCustomItem",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        # land. \n        self.listWidget = QListWidget(self)\n        layout.addWidget(self.listWidget)\n        # 清 按 버튼 \n        self.clearBtn = QPushButton('清空', self, clicked=self.doClearItem)\n        layout.addWidget(self.clearBtn)",
        "detail": "QListWidget.DeleteCustomItem",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListWidget.DeleteCustomItem",
        "description": "QListWidget.DeleteCustomItem",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ItemWidget(QWidget):\n    itemDeleted = pyqtSignal(QListWidgetItem)\n    def __init__(self, text, item, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self._item = item  # 保 l 的 对 对 对 引 引 引 ",
        "detail": "QListWidget.DeleteCustomItem",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListWidget.DeleteCustomItem",
        "description": "QListWidget.DeleteCustomItem",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ItemWidget(QWidget):\n    itemDeleted = pyqtSignal(QListWidgetItem)\n    def __init__(self, text, item, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self._item = item  # 保 l 的 对 对 对 引 引 引 \n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))",
        "detail": "QListWidget.DeleteCustomItem",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListWidget.DeleteCustomItem",
        "description": "QListWidget.DeleteCustomItem",
        "peekOfCode": "__Version__ = 1.0\nclass ItemWidget(QWidget):\n    itemDeleted = pyqtSignal(QListWidgetItem)\n    def __init__(self, text, item, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self._item = item  # 保 l 的 对 对 对 引 引 引 \n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLineEdit(text, self))\n        layout.addWidget(QPushButton('x', self, clicked=self.doDeleteItem))",
        "detail": "QListWidget.DeleteCustomItem",
        "documentation": {}
    },
    {
        "label": "DropListWidget",
        "kind": 6,
        "importPath": "QListWidget.DragDrop",
        "description": "QListWidget.DragDrop",
        "peekOfCode": "class DropListWidget(QListWidget):\n    # QListWidget에서 끌 수 있습니다 \n    def __init__(self, *args, **kwargs):\n        super(DropListWidget, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self.setAcceptDrops(True)\n        # 왼쪽에서 오른쪽으로 설정, 자동으로 랩, 배열 \n        self.setFlow(self.LeftToRight)\n        self.setWrapping(True)\n        self.setResizeMode(self.Adjust)",
        "detail": "QListWidget.DragDrop",
        "documentation": {}
    },
    {
        "label": "DragListWidget",
        "kind": 6,
        "importPath": "QListWidget.DragDrop",
        "description": "QListWidget.DragDrop",
        "peekOfCode": "class DragListWidget(QListWidget):\n    # qlistwidget. \n    def __init__(self, *args, **kwargs):\n        super(DragListWidget, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        # 가로 스크롤 막대를 숨 깁니다 \n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        # 편집 할 수 없습니다 \n        self.setEditTriggers(self.NoEditTriggers)\n        # 开 功 ",
        "detail": "QListWidget.DragDrop",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListWidget.DragDrop",
        "description": "QListWidget.DragDrop",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass DropListWidget(QListWidget):\n    # QListWidget에서 끌 수 있습니다 \n    def __init__(self, *args, **kwargs):\n        super(DropListWidget, self).__init__(*args, **kwargs)\n        self.resize(400, 400)",
        "detail": "QListWidget.DragDrop",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListWidget.DragDrop",
        "description": "QListWidget.DragDrop",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass DropListWidget(QListWidget):\n    # QListWidget에서 끌 수 있습니다 \n    def __init__(self, *args, **kwargs):\n        super(DropListWidget, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self.setAcceptDrops(True)\n        # 왼쪽에서 오른쪽으로 설정, 자동으로 랩, 배열 \n        self.setFlow(self.LeftToRight)",
        "detail": "QListWidget.DragDrop",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListWidget.DragDrop",
        "description": "QListWidget.DragDrop",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass DropListWidget(QListWidget):\n    # QListWidget에서 끌 수 있습니다 \n    def __init__(self, *args, **kwargs):\n        super(DropListWidget, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self.setAcceptDrops(True)\n        # 왼쪽에서 오른쪽으로 설정, 자동으로 랩, 배열 \n        self.setFlow(self.LeftToRight)\n        self.setWrapping(True)",
        "detail": "QListWidget.DragDrop",
        "documentation": {}
    },
    {
        "label": "CustomWidget",
        "kind": 6,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "class CustomWidget(QWidget):\n    def __init__(self, item, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        self.oldSize = None\n        self.item = item\n        layout = QFormLayout(self)\n        layout.addRow('我是label', QLineEdit(self))\n        layout.addRow('点击', QCheckBox(\n            '隐藏下面的按钮', self, toggled=self.hideChild))\n        self.button = QPushButton('我是被隐藏的', self)",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "CustomButton",
        "kind": 6,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "class CustomButton(QPushButton):\n    # 버튼 스위치로 \n    def __init__(self, item, *args, **kwargs):\n        super(CustomButton, self).__init__(*args, **kwargs)\n        self.item = item\n        self.setCheckable(True)  # 선택 사항 선택 사항 \n    def resizeEvent(self, event):\n        # 아이템의 높이 문제를 해결하십시오 \n        super(CustomButton, self).resizeEvent(event)\n        self.item.setSizeHint(QSize(self.minimumWidth(), self.height()))",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "class Window(QListWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        for _ in range(3):\n            # 开关 \n            item = QListWidgetItem(self)\n            btn = CustomButton(item, '折叠', self, objectName='testBtn')\n            self.setItemWidget(item, btn)\n            # 접이식 제어 \n            item = QListWidgetItem(self)",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, item, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        self.oldSize = None\n        self.item = item\n        layout = QFormLayout(self)\n        layout.addRow('我是label', QLineEdit(self))",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, item, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        self.oldSize = None\n        self.item = item\n        layout = QFormLayout(self)\n        layout.addRow('我是label', QLineEdit(self))\n        layout.addRow('点击', QCheckBox(",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListWidget.FoldWidget",
        "description": "QListWidget.FoldWidget",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, item, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        self.oldSize = None\n        self.item = item\n        layout = QFormLayout(self)\n        layout.addRow('我是label', QLineEdit(self))\n        layout.addRow('点击', QCheckBox(\n            '隐藏下面的按钮', self, toggled=self.hideChild))",
        "detail": "QListWidget.FoldWidget",
        "documentation": {}
    },
    {
        "label": "CoverLabel",
        "kind": 6,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "class CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n#         super(CoverLabel, self).__init__(\n#             '<html><head/><body><img src=\"{0}\"/></body></html>'.format(os.path.abspath(cover_path)), *args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)\n        self.cover_path = cover_path",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "ItemWidget",
        "kind": 6,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "class ItemWidget(QWidget):\n    def __init__(self, cover_path, figure_info, figure_title,\n                 figure_score, figure_desc, figure_count, video_url, cover_url, img_path, manager, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        self.setMaximumSize(220, 420)\n        self.setMaximumSize(220, 420)\n        self.img_path = img_path\n        self.cover_url = cover_url\n        self._manager = manager\n        layout = QVBoxLayout(self)",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "class Window(QListWidget):\n    Page = 0\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setFrameShape(self.NoFrame)  # 무시건 \n        self.setFlow(self.LeftToRight)  # 왼쪽에서 오른쪽으로 \n        self.setWrapping(True)  #이 세 가지 조합은 flowlayout과 동일한 효과를 얻을 수 있습니다. \n        self.setResizeMode(self.Adjust)\n        self._loadStart = False",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# offset=0,30,60,90\nUrl = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Url",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "Url = \"http://v.qq.com/x/list/movie?pay=-1&offset={0}\"\n# 放 量 아이콘 \nSvg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_play_sm",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "Svg_icon_play_sm = '''<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path d=\"M10.83 8.31v.022l-4.08 2.539-.005.003-.048.03-.012-.005c-.073.051-.15.101-.246.101-.217 0-.376-.165-.413-.369l-.027-.011V5.461l.009-.005c0-.009-.009-.014-.009-.022 0-.24.197-.435.44-.435.096 0 .174.049.247.101l.031-.017 4.129 2.569v.016a.42.42 0 0 1 .153.317.418.418 0 0 1-.169.325zm3.493 2.604a.986.986 0 0 1-.948.742 1 1 0 0 1-1-1 .98.98 0 0 1 .094-.412l-.019-.01C12.79 9.559 13 8.807 13 8a5 5 0 1 0-5 5c.766 0 1.484-.186 2.133-.494l.013.03a.975.975 0 0 1 .417-.097 1 1 0 0 1 1 1 .987.987 0 0 1-.77.954A6.936 6.936 0 0 1 8 14.999a7 7 0 1 1 7-7c0 1.048-.261 2.024-.677 2.915z\" fill=\"#999999\"></path>\n</svg>\n'''.encode()\nSvg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Svg_icon_loading",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "Svg_icon_loading = '''<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n            <stop stop-color=\"#03a9f4\" stop-opacity=\"0\" offset=\"0%\"/>\n            <stop stop-color=\"#03a9f4\" stop-opacity=\".631\" offset=\"63.146%\"/>\n            <stop stop-color=\"#03a9f4\" offset=\"100%\"/>\n        </linearGradient>\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\">",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 5,
        "importPath": "QListWidget.HotPlaylist",
        "description": "QListWidget.HotPlaylist",
        "peekOfCode": "Actor = '''<a href=\"{href}\" target=\"_blank\" title=\"{title}\" style=\"text-decoration: none;font-size: 12px;color: #999999;\">{title}</a>&nbsp;'''\nclass CoverLabel(QLabel):\n    def __init__(self, cover_path, cover_title, video_url, *args, **kwargs):\n        super(CoverLabel, self).__init__(*args, **kwargs)\n#         super(CoverLabel, self).__init__(\n#             '<html><head/><body><img src=\"{0}\"/></body></html>'.format(os.path.abspath(cover_path)), *args, **kwargs)\n        self.setCursor(Qt.PointingHandCursor)\n        self.setScaledContents(True)\n        self.setMinimumSize(220, 308)\n        self.setMaximumSize(220, 308)",
        "detail": "QListWidget.HotPlaylist",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QListWidget.SignalsExample",
        "description": "QListWidget.SignalsExample",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setAlternatingRowColors(True)\n        self.listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)\n        self.listWidget.setMovement(QListView.Free)\n        self.listWidget.setMouseTracking(True)  # itemNTERED 신호에 대한 # \n        self.resultView = QPlainTextEdit(self)",
        "detail": "QListWidget.SignalsExample",
        "documentation": {}
    },
    {
        "label": "formatColor",
        "kind": 2,
        "importPath": "QListWidget.SignalsExample",
        "description": "QListWidget.SignalsExample",
        "peekOfCode": "def formatColor(text, color):\n    return '<font color={0}>{1}</font>'.format(color.name(), text)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setAlternatingRowColors(True)\n        self.listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)\n        self.listWidget.setMovement(QListView.Free)",
        "detail": "QListWidget.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QListWidget.SignalsExample",
        "description": "QListWidget.SignalsExample",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\ndef formatColor(text, color):\n    return '<font color={0}>{1}</font>'.format(color.name(), text)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.listWidget = QListWidget(self)",
        "detail": "QListWidget.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QListWidget.SignalsExample",
        "description": "QListWidget.SignalsExample",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\ndef formatColor(text, color):\n    return '<font color={0}>{1}</font>'.format(color.name(), text)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setAlternatingRowColors(True)",
        "detail": "QListWidget.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QListWidget.SignalsExample",
        "description": "QListWidget.SignalsExample",
        "peekOfCode": "__Version__ = \"Version 1.0\"\ndef formatColor(text, color):\n    return '<font color={0}>{1}</font>'.format(color.name(), text)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setAlternatingRowColors(True)\n        self.listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)",
        "detail": "QListWidget.SignalsExample",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QMenu.MultiSelect",
        "description": "QMenu.MultiSelect",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)\n        self.button = QPushButton('带按钮的菜单', self)\n        layout.addWidget(self.labelInfo)\n        layout.addWidget(self.button)\n        # 추가 메뉴 \n        self._initMenu()",
        "detail": "QMenu.MultiSelect",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QMenu.MultiSelect",
        "description": "QMenu.MultiSelect",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)",
        "detail": "QMenu.MultiSelect",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QMenu.MultiSelect",
        "description": "QMenu.MultiSelect",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)\n        self.button = QPushButton('带按钮的菜单', self)\n        layout.addWidget(self.labelInfo)\n        layout.addWidget(self.button)",
        "detail": "QMenu.MultiSelect",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QMenu.MultiSelect",
        "description": "QMenu.MultiSelect",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)\n        self.button = QPushButton('带按钮的菜单', self)\n        layout.addWidget(self.labelInfo)\n        layout.addWidget(self.button)\n        # 추가 메뉴 ",
        "detail": "QMenu.MultiSelect",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QMenu.QQMenu",
        "description": "QMenu.QQMenu",
        "peekOfCode": "class Window(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self.setAlignment(Qt.AlignCenter)\n        self.setText('右键弹出菜单')\n        self.context_menu = QMenu(self)\n        self.init_menu()\n    def contextMenuEvent(self, event):\n        self.context_menu.exec_(event.globalPos())",
        "detail": "QMenu.QQMenu",
        "documentation": {}
    },
    {
        "label": "get_icon",
        "kind": 2,
        "importPath": "QMenu.QQMenu",
        "description": "QMenu.QQMenu",
        "peekOfCode": "def get_icon():\n    # 아날로그 아이콘을 테스트합니다 \n    pixmap = QPixmap(16, 16)\n    pixmap.fill(Qt.transparent)\n    painter = QPainter()\n    painter.begin(pixmap)\n    painter.setFont(QFont('Webdings', 11))\n    painter.setPen(Qt.GlobalColor(randint(4, 18)))\n    painter.drawText(0, 0, 16, 16, Qt.AlignCenter,\n                     choice(string.ascii_letters))",
        "detail": "QMenu.QQMenu",
        "documentation": {}
    },
    {
        "label": "about_qt",
        "kind": 2,
        "importPath": "QMenu.QQMenu",
        "description": "QMenu.QQMenu",
        "peekOfCode": "def about_qt():\n    # Qt에 대하여 \n    QApplication.instance().aboutQt()\nclass Window(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self.setAlignment(Qt.AlignCenter)\n        self.setText('右键弹出菜单')\n        self.context_menu = QMenu(self)",
        "detail": "QMenu.QQMenu",
        "documentation": {}
    },
    {
        "label": "Style",
        "kind": 5,
        "importPath": "QMenu.QQMenu",
        "description": "QMenu.QQMenu",
        "peekOfCode": "Style = \"\"\"\nQMenu {\n    /* 半透明效果 */\n    background-color: rgba(255, 255, 255, 230);\n    border: none;\n    border-radius: 4px;\n}\nQMenu::item {\n    border-radius: 4px;\n    /* 这个距离很麻烦需要根据菜单的长度和图标等因素微调 */",
        "detail": "QMenu.QQMenu",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QMessageBox.ChineseText",
        "description": "QMessageBox.ChineseText",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nTextStyle = \"\"\"\nQMessageBox QPushButton[text=\"OK\"] {\n    qproperty-text: \"好的\";\n}\nQMessageBox QPushButton[text=\"Open\"] {\n    qproperty-text: \"打开\";\n}",
        "detail": "QMessageBox.ChineseText",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QMessageBox.ChineseText",
        "description": "QMessageBox.ChineseText",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nTextStyle = \"\"\"\nQMessageBox QPushButton[text=\"OK\"] {\n    qproperty-text: \"好的\";\n}\nQMessageBox QPushButton[text=\"Open\"] {\n    qproperty-text: \"打开\";\n}\nQMessageBox QPushButton[text=\"Save\"] {",
        "detail": "QMessageBox.ChineseText",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QMessageBox.ChineseText",
        "description": "QMessageBox.ChineseText",
        "peekOfCode": "__Version__ = 1.0\nTextStyle = \"\"\"\nQMessageBox QPushButton[text=\"OK\"] {\n    qproperty-text: \"好的\";\n}\nQMessageBox QPushButton[text=\"Open\"] {\n    qproperty-text: \"打开\";\n}\nQMessageBox QPushButton[text=\"Save\"] {\n    qproperty-text: \"保存\";",
        "detail": "QMessageBox.ChineseText",
        "documentation": {}
    },
    {
        "label": "TextStyle",
        "kind": 5,
        "importPath": "QMessageBox.ChineseText",
        "description": "QMessageBox.ChineseText",
        "peekOfCode": "TextStyle = \"\"\"\nQMessageBox QPushButton[text=\"OK\"] {\n    qproperty-text: \"好的\";\n}\nQMessageBox QPushButton[text=\"Open\"] {\n    qproperty-text: \"打开\";\n}\nQMessageBox QPushButton[text=\"Save\"] {\n    qproperty-text: \"保存\";\n}",
        "detail": "QMessageBox.ChineseText",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QMessageBox.ChineseText",
        "description": "QMessageBox.ChineseText",
        "peekOfCode": "app = QApplication(sys.argv)\n# QSS 스타일을 통해 버튼 텍스트를 설정하십시오 \napp.setStyleSheet(TextStyle)\n# 오랜 기록으로 인해 QT5의 번역 기능이 업데이트되지 않았거나 사용할 때 사용되는 이전 구조를 번역 할 수 없습니다. \n# 这里 不 不 (QM에 다시 컴파일 할 TS 소스 코드를 수정해야합니다) \n# translator = QTranslator()\n# print(translator.load(QLocale(), 'qt', '_', QLibraryInfo.location(\n#     QLibraryInfo.TranslationsPath)))\n# app.installTranslator(translator)\nQMessageBox.information(",
        "detail": "QMessageBox.ChineseText",
        "documentation": {}
    },
    {
        "label": "MessageBox",
        "kind": 6,
        "importPath": "QMessageBox.CountDownClose",
        "description": "QMessageBox.CountDownClose",
        "peekOfCode": "class MessageBox(QMessageBox):\n    def __init__(self, *args, count=5, time=1000, auto=False, **kwargs):\n        super(MessageBox, self).__init__(*args, **kwargs)\n        self._count = count\n        self._time = time\n        self._auto = auto  # 是 자동 닫기 \n        assert count > 0  # 0보다 커야합니다 \n        assert time >= 500  # = 500ms = ms. \n        self.setStandardButtons(self.Close)  # 关 闭 按 \n        self.closeBtn = self.button(self.Close)  # 获 关 关 关 按. ",
        "detail": "QMessageBox.CountDownClose",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QMessageBox.CountDownClose",
        "description": "QMessageBox.CountDownClose",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass MessageBox(QMessageBox):\n    def __init__(self, *args, count=5, time=1000, auto=False, **kwargs):\n        super(MessageBox, self).__init__(*args, **kwargs)\n        self._count = count\n        self._time = time",
        "detail": "QMessageBox.CountDownClose",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QMessageBox.CountDownClose",
        "description": "QMessageBox.CountDownClose",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass MessageBox(QMessageBox):\n    def __init__(self, *args, count=5, time=1000, auto=False, **kwargs):\n        super(MessageBox, self).__init__(*args, **kwargs)\n        self._count = count\n        self._time = time\n        self._auto = auto  # 是 자동 닫기 \n        assert count > 0  # 0보다 커야합니다 \n        assert time >= 500  # = 500ms = ms. ",
        "detail": "QMessageBox.CountDownClose",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QMessageBox.CountDownClose",
        "description": "QMessageBox.CountDownClose",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass MessageBox(QMessageBox):\n    def __init__(self, *args, count=5, time=1000, auto=False, **kwargs):\n        super(MessageBox, self).__init__(*args, **kwargs)\n        self._count = count\n        self._time = time\n        self._auto = auto  # 是 자동 닫기 \n        assert count > 0  # 0보다 커야합니다 \n        assert time >= 500  # = 500ms = ms. \n        self.setStandardButtons(self.Close)  # 关 闭 按 ",
        "detail": "QMessageBox.CountDownClose",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QMessageBox.CustomColorIcon",
        "description": "QMessageBox.CustomColorIcon",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMessageBox\napp = QApplication(sys.argv)\napp.setStyleSheet('''QDialogButtonBox {\n    dialogbuttonbox-buttons-have-icons: 1;\n    dialog-ok-icon: url(Data/icons/Ok.png);\n    dialog-open-icon: url(Data/icons/Open.png);",
        "detail": "QMessageBox.CustomColorIcon",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QMessageBox.CustomColorIcon",
        "description": "QMessageBox.CustomColorIcon",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMessageBox\napp = QApplication(sys.argv)\napp.setStyleSheet('''QDialogButtonBox {\n    dialogbuttonbox-buttons-have-icons: 1;\n    dialog-ok-icon: url(Data/icons/Ok.png);\n    dialog-open-icon: url(Data/icons/Open.png);\n    dialog-save-icon: url(Data/icons/Save.png);",
        "detail": "QMessageBox.CustomColorIcon",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QMessageBox.CustomColorIcon",
        "description": "QMessageBox.CustomColorIcon",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMessageBox\napp = QApplication(sys.argv)\napp.setStyleSheet('''QDialogButtonBox {\n    dialogbuttonbox-buttons-have-icons: 1;\n    dialog-ok-icon: url(Data/icons/Ok.png);\n    dialog-open-icon: url(Data/icons/Open.png);\n    dialog-save-icon: url(Data/icons/Save.png);\n    dialog-cancel-icon: url(Data/icons/Cancel.png);",
        "detail": "QMessageBox.CustomColorIcon",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QMessageBox.CustomColorIcon",
        "description": "QMessageBox.CustomColorIcon",
        "peekOfCode": "app = QApplication(sys.argv)\napp.setStyleSheet('''QDialogButtonBox {\n    dialogbuttonbox-buttons-have-icons: 1;\n    dialog-ok-icon: url(Data/icons/Ok.png);\n    dialog-open-icon: url(Data/icons/Open.png);\n    dialog-save-icon: url(Data/icons/Save.png);\n    dialog-cancel-icon: url(Data/icons/Cancel.png);\n}\n#qt_msgbox_label {\n    color: red;",
        "detail": "QMessageBox.CustomColorIcon",
        "documentation": {}
    },
    {
        "label": "Pop",
        "kind": 6,
        "importPath": "QProgressBar.Lib.DWaterProgress",
        "description": "QProgressBar.Lib.DWaterProgress",
        "peekOfCode": "class Pop:\n    # https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/dwaterprogress.cpp#L36\n    def __init__(self, size, xs, ys, xo=0, yo=0):\n        self.size = size\n        self.xSpeed = xs\n        self.ySpeed = ys\n        self.xOffset = xo\n        self.yOffset = yo\nclass DWaterProgress(QProgressBar):\n    def __init__(self, *args, **kwargs):",
        "detail": "QProgressBar.Lib.DWaterProgress",
        "documentation": {}
    },
    {
        "label": "DWaterProgress",
        "kind": 6,
        "importPath": "QProgressBar.Lib.DWaterProgress",
        "description": "QProgressBar.Lib.DWaterProgress",
        "peekOfCode": "class DWaterProgress(QProgressBar):\n    def __init__(self, *args, **kwargs):\n        super(DWaterProgress, self).__init__(*args, **kwargs)\n        self.waterFrontImage = QImage()\n        self.waterBackImage = QImage()\n        self.waterFrontSvg = QSvgRenderer(WATER_FRONT.encode())\n        self.waterBackSvg = QSvgRenderer(WATER_BACK.encode())\n        self.pops = []\n        self.initPops()\n        self.setTextVisible(True)",
        "detail": "QProgressBar.Lib.DWaterProgress",
        "documentation": {}
    },
    {
        "label": "WATER_FRONT",
        "kind": 5,
        "importPath": "QProgressBar.Lib.DWaterProgress",
        "description": "QProgressBar.Lib.DWaterProgress",
        "peekOfCode": "WATER_FRONT = \"\"\"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"383\" height=\"115\" viewBox=\"0 0 383 115\">\n  <path fill=\"#01C4FF\" fill-rule=\"evenodd\" d=\"M383,115 L383,14.1688789 C380.269872,14.0716143 377.092672,13.5814974 373.063461,12.4722672 C368.696509,11.2699114 362.241136,10.1727531 357.649256,10.1227411 C347.007291,10.0071963 342.744795,10.6014761 332.930121,12.0276784 C326.157898,13.0120512 317.51313,12.4953762 311.375303,10.33762 C305.58601,8.30230681 299.587109,8.09191178 293.164466,8.16675723 C284.09108,8.27264456 276.303198,11.8021073 267.219716,11.3406179 C260.695053,11.0091595 256.565913,8.56512814 248.546835,8.86450991 C241.871757,9.11387975 235.569934,13.1896798 228.881972,13.3297132 C219.538394,13.525622 215.498041,10.7384053 208.282229,8.42337018 C201.688974,6.30769299 190.725982,6.45048568 185.454442,8.65549452 C170.142255,15.0597811 162.05946,9.31703167 150.536236,5.36712375 C147.826999,4.43862637 144.672431,3.20971247 141.663406,2.90998579 C135.153716,2.26155522 129.812539,3.9788615 123.613779,5.46231888 C115.747555,7.3451819 106.643181,6.73503633 99.4869089,3.84572629 C96.4124243,2.60474055 93.6255416,0.951587506 90.1882469,0.261077932 C79.652131,-1.85528907 69.7970674,9.59778831 58.8051757,9.35186757 C49.4744806,9.14319709 42.6942497,2.4740197 33.3934986,1.93078665 C20.5224457,1.17888312 19.3845731,15.343297 0,13.8463882 L0,115 L383,115 Z\"/>\n</svg>\n\"\"\"\nWATER_BACK = \"\"\"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"383\" height=\"115\" viewBox=\"0 0 383 115\">\n  <path fill=\"#007DFF\" fill-rule=\"evenodd\" d=\"M383,115 L383,14.1688789 C380.269872,14.0716143 377.092672,13.5814974 373.063461,12.4722672 C368.696509,11.2699114 362.241136,10.1727531 357.649256,10.1227411 C347.007291,10.0071963 342.744795,10.6014761 332.930121,12.0276784 C326.157898,13.0120512 317.51313,12.4953762 311.375303,10.33762 C305.58601,8.30230681 299.587109,8.09191178 293.164466,8.16675723 C284.09108,8.27264456 276.303198,11.8021073 267.219716,11.3406179 C260.695053,11.0091595 256.565913,8.56512814 248.546835,8.86450991 C241.871757,9.11387975 235.569934,13.1896798 228.881972,13.3297132 C219.538394,13.525622 215.498041,10.7384053 208.282229,8.42337018 C201.688974,6.30769299 190.725982,6.45048568 185.454442,8.65549452 C170.142255,15.0597811 162.05946,9.31703167 150.536236,5.36712375 C147.826999,4.43862637 144.672431,3.20971247 141.663406,2.90998579 C135.153716,2.26155522 129.812539,3.9788615 123.613779,5.46231888 C115.747555,7.3451819 106.643181,6.73503633 99.4869089,3.84572629 C96.4124243,2.60474055 93.6255416,0.951587506 90.1882469,0.261077932 C79.652131,-1.85528907 69.7970674,9.59778831 58.8051757,9.35186757 C49.4744806,9.14319709 42.6942497,2.4740197 33.3934986,1.93078665 C20.5224457,1.17888312 19.3845731,15.343297 0,13.8463882 L0,115 L383,115 Z\"/>\n</svg>\n\"\"\"\nclass Pop:\n    # https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/dwaterprogress.cpp#L36",
        "detail": "QProgressBar.Lib.DWaterProgress",
        "documentation": {}
    },
    {
        "label": "WATER_BACK",
        "kind": 5,
        "importPath": "QProgressBar.Lib.DWaterProgress",
        "description": "QProgressBar.Lib.DWaterProgress",
        "peekOfCode": "WATER_BACK = \"\"\"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"383\" height=\"115\" viewBox=\"0 0 383 115\">\n  <path fill=\"#007DFF\" fill-rule=\"evenodd\" d=\"M383,115 L383,14.1688789 C380.269872,14.0716143 377.092672,13.5814974 373.063461,12.4722672 C368.696509,11.2699114 362.241136,10.1727531 357.649256,10.1227411 C347.007291,10.0071963 342.744795,10.6014761 332.930121,12.0276784 C326.157898,13.0120512 317.51313,12.4953762 311.375303,10.33762 C305.58601,8.30230681 299.587109,8.09191178 293.164466,8.16675723 C284.09108,8.27264456 276.303198,11.8021073 267.219716,11.3406179 C260.695053,11.0091595 256.565913,8.56512814 248.546835,8.86450991 C241.871757,9.11387975 235.569934,13.1896798 228.881972,13.3297132 C219.538394,13.525622 215.498041,10.7384053 208.282229,8.42337018 C201.688974,6.30769299 190.725982,6.45048568 185.454442,8.65549452 C170.142255,15.0597811 162.05946,9.31703167 150.536236,5.36712375 C147.826999,4.43862637 144.672431,3.20971247 141.663406,2.90998579 C135.153716,2.26155522 129.812539,3.9788615 123.613779,5.46231888 C115.747555,7.3451819 106.643181,6.73503633 99.4869089,3.84572629 C96.4124243,2.60474055 93.6255416,0.951587506 90.1882469,0.261077932 C79.652131,-1.85528907 69.7970674,9.59778831 58.8051757,9.35186757 C49.4744806,9.14319709 42.6942497,2.4740197 33.3934986,1.93078665 C20.5224457,1.17888312 19.3845731,15.343297 0,13.8463882 L0,115 L383,115 Z\"/>\n</svg>\n\"\"\"\nclass Pop:\n    # https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/dwaterprogress.cpp#L36\n    def __init__(self, size, xs, ys, xo=0, yo=0):\n        self.size = size\n        self.xSpeed = xs\n        self.ySpeed = ys",
        "detail": "QProgressBar.Lib.DWaterProgress",
        "documentation": {}
    },
    {
        "label": "WaterRippleProgressBar",
        "kind": 6,
        "importPath": "QProgressBar.Lib.WaterRippleProgressBar",
        "description": "QProgressBar.Lib.WaterRippleProgressBar",
        "peekOfCode": "class WaterRippleProgressBar(QProgressBar):\n    # 高 % \n    waterHeight = 1\n    # 밀도 \n    waterDensity = 1\n    # 样 1은 직사각형, 0은 둥글다 \n    styleType = 1\n    # 文 \n    textColor = Qt.white\n    # 배경색 ",
        "detail": "QProgressBar.Lib.WaterRippleProgressBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.Lib.WaterRippleProgressBar",
        "description": "QProgressBar.Lib.WaterRippleProgressBar",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nimport math\nfrom PyQt5.QtCore import QTimer, Qt, QRectF, QSize\nfrom PyQt5.QtGui import QPainter, QPainterPath, QColor, QFont\nfrom PyQt5.QtWidgets import QProgressBar\nclass WaterRippleProgressBar(QProgressBar):",
        "detail": "QProgressBar.Lib.WaterRippleProgressBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.Lib.WaterRippleProgressBar",
        "description": "QProgressBar.Lib.WaterRippleProgressBar",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nimport math\nfrom PyQt5.QtCore import QTimer, Qt, QRectF, QSize\nfrom PyQt5.QtGui import QPainter, QPainterPath, QColor, QFont\nfrom PyQt5.QtWidgets import QProgressBar\nclass WaterRippleProgressBar(QProgressBar):\n    # 高 % \n    waterHeight = 1\n    # 밀도 ",
        "detail": "QProgressBar.Lib.WaterRippleProgressBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.Lib.WaterRippleProgressBar",
        "description": "QProgressBar.Lib.WaterRippleProgressBar",
        "peekOfCode": "__Version__ = 1.0\nimport math\nfrom PyQt5.QtCore import QTimer, Qt, QRectF, QSize\nfrom PyQt5.QtGui import QPainter, QPainterPath, QColor, QFont\nfrom PyQt5.QtWidgets import QProgressBar\nclass WaterRippleProgressBar(QProgressBar):\n    # 高 % \n    waterHeight = 1\n    # 밀도 \n    waterDensity = 1",
        "detail": "QProgressBar.Lib.WaterRippleProgressBar",
        "documentation": {}
    },
    {
        "label": "CircleItem",
        "kind": 6,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "class CircleItem(QObject):\n    X = 0  # x coordinate. \n    Opacity = 1  # 透 透 0 ~ 1. \n    valueChanged = pyqtSignal()\n    @pyqtProperty(float)\n    def x(self) -> float:\n        return self.X\n    @x.setter\n    def x(self, x: float):\n        self.X = x",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "MetroCircleProgress",
        "kind": 6,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "class MetroCircleProgress(QWidget):\n    Radius = 5  # 등급 \n    Color = QColor(24, 189, 155)  # 서클 색상 \n    BackgroundColor = QColor(Qt.transparent)  # 배경색 \n    def __init__(self, *args, radius=5, color=QColor(24, 189, 155),\n                 backgroundColor=QColor(Qt.transparent), **kwargs):\n        super(MetroCircleProgress, self).__init__(*args, **kwargs)\n        self.Radius = radius\n        self.Color = color\n        self.BackgroundColor = backgroundColor",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(MetroCircleProgress(self))\n        layout.addWidget(MetroCircleProgress(self, radius=10))\n        layout.addWidget(MetroCircleProgress(self, styleSheet=\"\"\"\n            qproperty-color: rgb(255, 0, 0);",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "qBound",
        "kind": 2,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "def qBound(miv, cv, mxv):\n    return max(min(cv, mxv), miv)\nclass MetroCircleProgress(QWidget):\n    Radius = 5  # 등급 \n    Color = QColor(24, 189, 155)  # 서클 색상 \n    BackgroundColor = QColor(Qt.transparent)  # 배경색 \n    def __init__(self, *args, radius=5, color=QColor(24, 189, 155),\n                 backgroundColor=QColor(Qt.transparent), **kwargs):\n        super(MetroCircleProgress, self).__init__(*args, **kwargs)\n        self.Radius = radius",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass CircleItem(QObject):\n    X = 0  # x coordinate. \n    Opacity = 1  # 透 透 0 ~ 1. \n    valueChanged = pyqtSignal()\n    @pyqtProperty(float)",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass CircleItem(QObject):\n    X = 0  # x coordinate. \n    Opacity = 1  # 透 透 0 ~ 1. \n    valueChanged = pyqtSignal()\n    @pyqtProperty(float)\n    def x(self) -> float:\n        return self.X\n    @x.setter",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.MetroCircleProgress",
        "description": "QProgressBar.MetroCircleProgress",
        "peekOfCode": "__Version__ = 1.0\nclass CircleItem(QObject):\n    X = 0  # x coordinate. \n    Opacity = 1  # 透 透 0 ~ 1. \n    valueChanged = pyqtSignal()\n    @pyqtProperty(float)\n    def x(self) -> float:\n        return self.X\n    @x.setter\n    def x(self, x: float):",
        "detail": "QProgressBar.MetroCircleProgress",
        "documentation": {}
    },
    {
        "label": "PercentProgressBar",
        "kind": 6,
        "importPath": "QProgressBar.PercentProgressBar",
        "description": "QProgressBar.PercentProgressBar",
        "peekOfCode": "class PercentProgressBar(QWidget):\n    MinValue = 0\n    MaxValue = 100\n    Value = 0\n    BorderWidth = 8\n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    ShowPercent = True  # 백분율을 표시할지 여부 \n    ShowFreeArea = False  # 남은 뒤에 표시하십시오 \n    ShowSmallCircle = False  # 머리와 작은 원을 보여줍니다 \n    TextColor = QColor(255, 255, 255)  # 文 ",
        "detail": "QProgressBar.PercentProgressBar",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProgressBar.PercentProgressBar",
        "description": "QProgressBar.PercentProgressBar",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        self._value = 0\n        self._widgets = []\n        self._timer = QTimer(self, timeout=self.updateValue)\n        self._widgets.append(PercentProgressBar(self))\n        layout.addWidget(self._widgets[0])\n        self._widgets.append(PercentProgressBar(self, clockwise=False))",
        "detail": "QProgressBar.PercentProgressBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.PercentProgressBar",
        "description": "QProgressBar.PercentProgressBar",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass PercentProgressBar(QWidget):\n    MinValue = 0\n    MaxValue = 100\n    Value = 0\n    BorderWidth = 8",
        "detail": "QProgressBar.PercentProgressBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.PercentProgressBar",
        "description": "QProgressBar.PercentProgressBar",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass PercentProgressBar(QWidget):\n    MinValue = 0\n    MaxValue = 100\n    Value = 0\n    BorderWidth = 8\n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    ShowPercent = True  # 백분율을 표시할지 여부 \n    ShowFreeArea = False  # 남은 뒤에 표시하십시오 ",
        "detail": "QProgressBar.PercentProgressBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.PercentProgressBar",
        "description": "QProgressBar.PercentProgressBar",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass PercentProgressBar(QWidget):\n    MinValue = 0\n    MaxValue = 100\n    Value = 0\n    BorderWidth = 8\n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    ShowPercent = True  # 백분율을 표시할지 여부 \n    ShowFreeArea = False  # 남은 뒤에 표시하십시오 \n    ShowSmallCircle = False  # 머리와 작은 원을 보여줍니다 ",
        "detail": "QProgressBar.PercentProgressBar",
        "documentation": {}
    },
    {
        "label": "CircleProgressBar",
        "kind": 6,
        "importPath": "QProgressBar.RoundProgressBar",
        "description": "QProgressBar.RoundProgressBar",
        "peekOfCode": "class CircleProgressBar(QWidget):\n    Color = QColor(24, 189, 155)  # 서클 색상 \n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    Delta = 36\n    def __init__(self, *args, color=None, clockwise=True, **kwargs):\n        super(CircleProgressBar, self).__init__(*args, **kwargs)\n        self.angle = 0\n        self.Clockwise = clockwise\n        if color:\n            self.Color = color",
        "detail": "QProgressBar.RoundProgressBar",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProgressBar.RoundProgressBar",
        "description": "QProgressBar.RoundProgressBar",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(CircleProgressBar(self))\n        layout.addWidget(CircleProgressBar(\n            self, color=QColor(255, 0, 0), clockwise=False))\n        layout.addWidget(CircleProgressBar(self, styleSheet=\"\"\"\n            qproperty-color: rgb(0, 255, 0);\n        \"\"\"))",
        "detail": "QProgressBar.RoundProgressBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.RoundProgressBar",
        "description": "QProgressBar.RoundProgressBar",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass CircleProgressBar(QWidget):\n    Color = QColor(24, 189, 155)  # 서클 색상 \n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    Delta = 36\n    def __init__(self, *args, color=None, clockwise=True, **kwargs):",
        "detail": "QProgressBar.RoundProgressBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.RoundProgressBar",
        "description": "QProgressBar.RoundProgressBar",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass CircleProgressBar(QWidget):\n    Color = QColor(24, 189, 155)  # 서클 색상 \n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    Delta = 36\n    def __init__(self, *args, color=None, clockwise=True, **kwargs):\n        super(CircleProgressBar, self).__init__(*args, **kwargs)\n        self.angle = 0\n        self.Clockwise = clockwise",
        "detail": "QProgressBar.RoundProgressBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.RoundProgressBar",
        "description": "QProgressBar.RoundProgressBar",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass CircleProgressBar(QWidget):\n    Color = QColor(24, 189, 155)  # 서클 색상 \n    Clockwise = True  # 顺 时 针 또는 반 시계 방향으로 \n    Delta = 36\n    def __init__(self, *args, color=None, clockwise=True, **kwargs):\n        super(CircleProgressBar, self).__init__(*args, **kwargs)\n        self.angle = 0\n        self.Clockwise = clockwise\n        if color:",
        "detail": "QProgressBar.RoundProgressBar",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "kind": 6,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "class ProgressBar(QProgressBar):\n    def __init__(self, *args, **kwargs):\n        super(ProgressBar, self).__init__(*args, **kwargs)\n        self.setValue(0)\n        if self.minimum() != self.maximum():\n            self.timer = QTimer(self, timeout=self.onTimeout)\n            self.timer.start(randint(1, 3) * 1000)\n    def onTimeout(self):\n        if self.value() >= 100:\n            self.timer.stop()",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        layout.addWidget(\n            ProgressBar(self, minimum=0, maximum=100, objectName=\"RedProgressBar\"))\n        layout.addWidget(  # 바쁜 \n            ProgressBar(self, minimum=0, maximum=0, objectName=\"RedProgressBar\"))\n        layout.addWidget(",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*设置红色进度条*/\n#RedProgressBar {\n    text-align: center; /*进度值居中*/\n}\n#RedProgressBar::chunk {\n    background-color: #F44336;",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*设置红色进度条*/\n#RedProgressBar {\n    text-align: center; /*进度值居中*/\n}\n#RedProgressBar::chunk {\n    background-color: #F44336;\n}",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*设置红色进度条*/\n#RedProgressBar {\n    text-align: center; /*进度值居中*/\n}\n#RedProgressBar::chunk {\n    background-color: #F44336;\n}\n#GreenProgressBar {",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "QProgressBar.SimpleStyle",
        "description": "QProgressBar.SimpleStyle",
        "peekOfCode": "StyleSheet = '''\n/*设置红色进度条*/\n#RedProgressBar {\n    text-align: center; /*进度值居中*/\n}\n#RedProgressBar::chunk {\n    background-color: #F44336;\n}\n#GreenProgressBar {\n    min-height: 12px;",
        "detail": "QProgressBar.SimpleStyle",
        "documentation": {}
    },
    {
        "label": "WaterProgressWindow",
        "kind": 6,
        "importPath": "QProgressBar.WaterProgress",
        "description": "QProgressBar.WaterProgress",
        "peekOfCode": "class WaterProgressWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WaterProgressWindow, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.progress = DWaterProgress(self)\n        self.progress.setFixedSize(100, 100)\n        self.progress.setValue(0)\n        self.progress.start()\n        layout.addWidget(self.progress)\n        self.timer = QTimer(self, timeout=self.updateProgress)",
        "detail": "QProgressBar.WaterProgress",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProgressBar.WaterProgressBar",
        "description": "QProgressBar.WaterProgressBar",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.bar = WaterRippleProgressBar(self)\n        self.bar.setMinimumSize(400, 400)\n        self.bar.setMaximumSize(400, 400)\n        layout = QFormLayout(self)\n        layout.addWidget(QRadioButton(\n            '矩形', self, checked=True, clicked=lambda: self.bar.setStyleType(1)))",
        "detail": "QProgressBar.WaterProgressBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProgressBar.WaterProgressBar",
        "description": "QProgressBar.WaterProgressBar",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nfrom random import randint\nfrom PyQt5.Qt import QSpinBox\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtGui import QPixmap, QIcon\nfrom PyQt5.QtWidgets import QWidget, QFormLayout, QRadioButton, QPushButton,\\",
        "detail": "QProgressBar.WaterProgressBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProgressBar.WaterProgressBar",
        "description": "QProgressBar.WaterProgressBar",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nfrom random import randint\nfrom PyQt5.Qt import QSpinBox\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtGui import QPixmap, QIcon\nfrom PyQt5.QtWidgets import QWidget, QFormLayout, QRadioButton, QPushButton,\\\n    QColorDialog\nfrom Lib.WaterRippleProgressBar import WaterRippleProgressBar  # @UnresolvedImport\nclass Window(QWidget):",
        "detail": "QProgressBar.WaterProgressBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProgressBar.WaterProgressBar",
        "description": "QProgressBar.WaterProgressBar",
        "peekOfCode": "__Version__ = 1.0\nfrom random import randint\nfrom PyQt5.Qt import QSpinBox\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtGui import QPixmap, QIcon\nfrom PyQt5.QtWidgets import QWidget, QFormLayout, QRadioButton, QPushButton,\\\n    QColorDialog\nfrom Lib.WaterRippleProgressBar import WaterRippleProgressBar  # @UnresolvedImport\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):",
        "detail": "QProgressBar.WaterProgressBar",
        "documentation": {}
    },
    {
        "label": "FlipWidget",
        "kind": 6,
        "importPath": "QPropertyAnimation.Lib.FlipWidget",
        "description": "QPropertyAnimation.Lib.FlipWidget",
        "peekOfCode": "class FlipWidget(QWidget):\n    Left = 0                        # 오른쪽에서 \n    Right = 1                       # 왼쪽에서 오른쪽으로 \n    Scale = 3                       # 이미지 줌 비율 \n    finished = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(FlipWidget, self).__init__(*args, **kwargs)\n        # 无球 无 无 任 \n        self.setWindowFlags(self.windowFlags() |\n                            Qt.FramelessWindowHint | Qt.SubWindow)",
        "detail": "QPropertyAnimation.Lib.FlipWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.Lib.FlipWidget",
        "description": "QPropertyAnimation.Lib.FlipWidget",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\nclass FlipWidget(QWidget):\n    Left = 0                        # 오른쪽에서 \n    Right = 1                       # 왼쪽에서 오른쪽으로 \n    Scale = 3                       # 이미지 줌 비율 \n    finished = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(FlipWidget, self).__init__(*args, **kwargs)\n        # 无球 无 无 任 ",
        "detail": "QPropertyAnimation.Lib.FlipWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.Lib.FlipWidget",
        "description": "QPropertyAnimation.Lib.FlipWidget",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\nclass FlipWidget(QWidget):\n    Left = 0                        # 오른쪽에서 \n    Right = 1                       # 왼쪽에서 오른쪽으로 \n    Scale = 3                       # 이미지 줌 비율 \n    finished = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(FlipWidget, self).__init__(*args, **kwargs)\n        # 无球 无 无 任 \n        self.setWindowFlags(self.windowFlags() |",
        "detail": "QPropertyAnimation.Lib.FlipWidget",
        "documentation": {}
    },
    {
        "label": "SlidingStackedWidget",
        "kind": 6,
        "importPath": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "description": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "peekOfCode": "class SlidingStackedWidget(QStackedWidget):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self, *args, **kwargs):\n        super(SlidingStackedWidget, self).__init__(*args, **kwargs)\n        self._pnow = QPoint(0, 0)\n        # 动画 \n        self._speed = 500\n        # 현재 색인 \n        self._now = 0\n        # 자동 모드 현재 색인 ",
        "detail": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "description": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass SlidingStackedWidget(QStackedWidget):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self, *args, **kwargs):\n        super(SlidingStackedWidget, self).__init__(*args, **kwargs)\n        self._pnow = QPoint(0, 0)",
        "detail": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "description": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass SlidingStackedWidget(QStackedWidget):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self, *args, **kwargs):\n        super(SlidingStackedWidget, self).__init__(*args, **kwargs)\n        self._pnow = QPoint(0, 0)\n        # 动画 \n        self._speed = 500\n        # 현재 색인 ",
        "detail": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "description": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "peekOfCode": "__Version__ = 1.0\nclass SlidingStackedWidget(QStackedWidget):\n    LEFT2RIGHT, RIGHT2LEFT, TOP2BOTTOM, BOTTOM2TOP, AUTOMATIC = range(5)\n    def __init__(self, *args, **kwargs):\n        super(SlidingStackedWidget, self).__init__(*args, **kwargs)\n        self._pnow = QPoint(0, 0)\n        # 动画 \n        self._speed = 500\n        # 현재 색인 \n        self._now = 0",
        "detail": "QPropertyAnimation.Lib.SlidingStackedWidget",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "QPropertyAnimation.Lib.UiImageSlider",
        "description": "QPropertyAnimation.Lib.UiImageSlider",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(656, 612)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.stackedWidget = SlidingStackedWidget(Form)\n        self.stackedWidget.setObjectName(\"stackedWidget\")\n        self.verticalLayout.addWidget(self.stackedWidget)\n        self.groupBox = QtWidgets.QGroupBox(Form)",
        "detail": "QPropertyAnimation.Lib.UiImageSlider",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPropertyAnimation.FadeInOut",
        "description": "QPropertyAnimation.FadeInOut",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('退出', self, clicked=self.doClose))\n        # 透 透 动 动 动. \n        self.animation = QPropertyAnimation(self, b'windowOpacity')\n        self.animation.setDuration(1000)  # 持 时间 1. \n        # 执行 入 ",
        "detail": "QPropertyAnimation.FadeInOut",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FadeInOut",
        "description": "QPropertyAnimation.FadeInOut",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)",
        "detail": "QPropertyAnimation.FadeInOut",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FadeInOut",
        "description": "QPropertyAnimation.FadeInOut",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('退出', self, clicked=self.doClose))\n        # 透 透 动 动 动. \n        self.animation = QPropertyAnimation(self, b'windowOpacity')",
        "detail": "QPropertyAnimation.FadeInOut",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FadeInOut",
        "description": "QPropertyAnimation.FadeInOut",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('退出', self, clicked=self.doClose))\n        # 透 透 动 动 动. \n        self.animation = QPropertyAnimation(self, b'windowOpacity')\n        self.animation.setDuration(1000)  # 持 时间 1. ",
        "detail": "QPropertyAnimation.FadeInOut",
        "documentation": {}
    },
    {
        "label": "LoginWidget",
        "kind": 6,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "class LoginWidget(QLabel):\n    # 只 显示 로그인 인터페이스 표시 스크린 샷 \n    windowClosed = pyqtSignal()\n    windowChanged = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(LoginWidget, self).__init__(*args, **kwargs)\n        self.setPixmap(QPixmap('Data/1.png'))\n    def mousePressEvent(self, event):\n        super(LoginWidget, self).mousePressEvent(event)\n        pos = event.pos()",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "SettingWidget",
        "kind": 6,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "class SettingWidget(QLabel):\n    # 只 是 设置 设置 设置 设置 스크린 샷 \n    windowClosed = pyqtSignal()\n    windowChanged = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(SettingWidget, self).__init__(*args, **kwargs)\n        self.setPixmap(QPixmap('Data/2.png'))\n    def mousePressEvent(self, event):\n        super(SettingWidget, self).mousePressEvent(event)\n        pos = event.pos()",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "class Window(QStackedWidget):\n    # 메인 창 \n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(428, 329)\n        self.setWindowFlags(self.windowFlags() | Qt.FramelessWindowHint)\n        # 这个 是 动, 먼저 표시되지 않습니다 \n        self.flipWidget = FlipWidget()\n        self.flipWidget.finished.connect(self.showWidget)\n        #luge 창 ",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass LoginWidget(QLabel):\n    # 只 显示 로그인 인터페이스 표시 스크린 샷 \n    windowClosed = pyqtSignal()\n    windowChanged = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(LoginWidget, self).__init__(*args, **kwargs)\n        self.setPixmap(QPixmap('Data/1.png'))",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass LoginWidget(QLabel):\n    # 只 显示 로그인 인터페이스 표시 스크린 샷 \n    windowClosed = pyqtSignal()\n    windowChanged = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(LoginWidget, self).__init__(*args, **kwargs)\n        self.setPixmap(QPixmap('Data/1.png'))\n    def mousePressEvent(self, event):",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.FlipWidgetAnimation",
        "description": "QPropertyAnimation.FlipWidgetAnimation",
        "peekOfCode": "__Version__ = 1.0\nclass LoginWidget(QLabel):\n    # 只 显示 로그인 인터페이스 표시 스크린 샷 \n    windowClosed = pyqtSignal()\n    windowChanged = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(LoginWidget, self).__init__(*args, **kwargs)\n        self.setPixmap(QPixmap('Data/1.png'))\n    def mousePressEvent(self, event):\n        super(LoginWidget, self).mousePressEvent(event)",
        "detail": "QPropertyAnimation.FlipWidgetAnimation",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPropertyAnimation.MenuAnimation",
        "description": "QPropertyAnimation.MenuAnimation",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.initMenu()\n        self.initAnimation()\n    def contextMenuEvent(self, event):\n        pos = event.globalPos()\n        size = self._contextMenu.sizeHint()\n        x, y, w, h = pos.x(), pos.y(), size.width(), size.height()",
        "detail": "QPropertyAnimation.MenuAnimation",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.MenuAnimation",
        "description": "QPropertyAnimation.MenuAnimation",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.initMenu()",
        "detail": "QPropertyAnimation.MenuAnimation",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.MenuAnimation",
        "description": "QPropertyAnimation.MenuAnimation",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.initMenu()\n        self.initAnimation()\n    def contextMenuEvent(self, event):\n        pos = event.globalPos()",
        "detail": "QPropertyAnimation.MenuAnimation",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.MenuAnimation",
        "description": "QPropertyAnimation.MenuAnimation",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.initMenu()\n        self.initAnimation()\n    def contextMenuEvent(self, event):\n        pos = event.globalPos()\n        size = self._contextMenu.sizeHint()",
        "detail": "QPropertyAnimation.MenuAnimation",
        "documentation": {}
    },
    {
        "label": "ImageSliderWidget",
        "kind": 6,
        "importPath": "QPropertyAnimation.PageSwitching",
        "description": "QPropertyAnimation.PageSwitching",
        "peekOfCode": "class ImageSliderWidget(QWidget, Ui_Form):\n    def __init__(self, *args, **kwargs):\n        super(ImageSliderWidget, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # 애니메이션 곡선 유형을 초기화하십시오 \n        curve_types = [(n, c) for n, c in QEasingCurve.__dict__.items()\n                       if isinstance(c, QEasingCurve.Type)]\n        curve_types.sort(key=lambda ct: ct[1])\n        curve_types = [c[0] for c in curve_types]\n        self.comboBoxEasing.addItems(curve_types)",
        "detail": "QPropertyAnimation.PageSwitching",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.PageSwitching",
        "description": "QPropertyAnimation.PageSwitching",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ImageSliderWidget(QWidget, Ui_Form):\n    def __init__(self, *args, **kwargs):\n        super(ImageSliderWidget, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # 애니메이션 곡선 유형을 초기화하십시오 ",
        "detail": "QPropertyAnimation.PageSwitching",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.PageSwitching",
        "description": "QPropertyAnimation.PageSwitching",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ImageSliderWidget(QWidget, Ui_Form):\n    def __init__(self, *args, **kwargs):\n        super(ImageSliderWidget, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # 애니메이션 곡선 유형을 초기화하십시오 \n        curve_types = [(n, c) for n, c in QEasingCurve.__dict__.items()\n                       if isinstance(c, QEasingCurve.Type)]\n        curve_types.sort(key=lambda ct: ct[1])",
        "detail": "QPropertyAnimation.PageSwitching",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.PageSwitching",
        "description": "QPropertyAnimation.PageSwitching",
        "peekOfCode": "__Version__ = 1.0\nclass ImageSliderWidget(QWidget, Ui_Form):\n    def __init__(self, *args, **kwargs):\n        super(ImageSliderWidget, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # 애니메이션 곡선 유형을 초기화하십시오 \n        curve_types = [(n, c) for n, c in QEasingCurve.__dict__.items()\n                       if isinstance(c, QEasingCurve.Type)]\n        curve_types.sort(key=lambda ct: ct[1])\n        curve_types = [c[0] for c in curve_types]",
        "detail": "QPropertyAnimation.PageSwitching",
        "documentation": {}
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "class Target:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nclass Point(QObject):\n    valueChanged = pyqtSignal()\n    def __init__(self, x, ox, y, oy, *args, **kwargs):\n        super(Point, self).__init__(*args, **kwargs)\n        self.__x = x\n        self._x = x",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "class Point(QObject):\n    valueChanged = pyqtSignal()\n    def __init__(self, x, ox, y, oy, *args, **kwargs):\n        super(Point, self).__init__(*args, **kwargs)\n        self.__x = x\n        self._x = x\n        self.originX = ox\n        self._y = y\n        self.__y = y\n        self.originY = oy",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setMouseTracking(True)\n        self.resize(800, 600)\n        self.points = []\n        self.target = Target(self.width() / 2, self.height() / 2)\n        self.initPoints()\n    def paintEvent(self, event):\n        super(Window, self).paintEvent(event)",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ntry:\n    from Lib import pointtool  # @UnusedImport @UnresolvedImport\n    getDistance = pointtool.getDistance\n    findClose = pointtool.findClose\nexcept:",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ntry:\n    from Lib import pointtool  # @UnusedImport @UnresolvedImport\n    getDistance = pointtool.getDistance\n    findClose = pointtool.findClose\nexcept:\n    import math\n    def getDistance(p1, p2):\n        return math.pow(p1.x - p2.x, 2) + math.pow(p1.y - p2.y, 2)",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.RlatticeEffect",
        "description": "QPropertyAnimation.RlatticeEffect",
        "peekOfCode": "__Version__ = 1.0\ntry:\n    from Lib import pointtool  # @UnusedImport @UnresolvedImport\n    getDistance = pointtool.getDistance\n    findClose = pointtool.findClose\nexcept:\n    import math\n    def getDistance(p1, p2):\n        return math.pow(p1.x - p2.x, 2) + math.pow(p1.y - p2.y, 2)\n    def findClose(points):",
        "detail": "QPropertyAnimation.RlatticeEffect",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPropertyAnimation.ShakeWindow",
        "description": "QPropertyAnimation.ShakeWindow",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('抖动', self, clicked=self.doShake))\n    def doShake(self):\n        self.doShakeWindow(self)\n    이 방법 아래의 # ¶이 방법은 모든 컨트롤을 제공 할 패키지를 만들 수 있습니다. \n    def doShakeWindow(self, target):",
        "detail": "QPropertyAnimation.ShakeWindow",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPropertyAnimation.ShakeWindow",
        "description": "QPropertyAnimation.ShakeWindow",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('抖动', self, clicked=self.doShake))\n    def doShake(self):",
        "detail": "QPropertyAnimation.ShakeWindow",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPropertyAnimation.ShakeWindow",
        "description": "QPropertyAnimation.ShakeWindow",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('抖动', self, clicked=self.doShake))\n    def doShake(self):\n        self.doShakeWindow(self)",
        "detail": "QPropertyAnimation.ShakeWindow",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPropertyAnimation.ShakeWindow",
        "description": "QPropertyAnimation.ShakeWindow",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('抖动', self, clicked=self.doShake))\n    def doShake(self):\n        self.doShakeWindow(self)\n    이 방법 아래의 # ¶이 방법은 모든 컨트롤을 제공 할 패키지를 만들 수 있습니다. ",
        "detail": "QPropertyAnimation.ShakeWindow",
        "documentation": {}
    },
    {
        "label": "TabBarStyle",
        "kind": 6,
        "importPath": "QProxyStyle.Lib.TabBarStyle",
        "description": "QProxyStyle.Lib.TabBarStyle",
        "peekOfCode": "class TabBarStyle(QProxyStyle):\n    def sizeFromContents(self, types, option, size, widget):\n        size = super(TabBarStyle, self).sizeFromContents(\n            types, option, size, widget)\n        if types == self.CT_TabBarTab:\n            size.transpose()\n        return size\n    def drawControl(self, element, option, painter, widget):\n        if element == self.CE_TabBarTabLabel:\n            painter.drawText(option.rect, Qt.AlignCenter, option.text)",
        "detail": "QProxyStyle.Lib.TabBarStyle",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProxyStyle.Lib.TabBarStyle",
        "description": "QProxyStyle.Lib.TabBarStyle",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass TabBarStyle(QProxyStyle):\n    def sizeFromContents(self, types, option, size, widget):\n        size = super(TabBarStyle, self).sizeFromContents(\n            types, option, size, widget)\n        if types == self.CT_TabBarTab:",
        "detail": "QProxyStyle.Lib.TabBarStyle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProxyStyle.Lib.TabBarStyle",
        "description": "QProxyStyle.Lib.TabBarStyle",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass TabBarStyle(QProxyStyle):\n    def sizeFromContents(self, types, option, size, widget):\n        size = super(TabBarStyle, self).sizeFromContents(\n            types, option, size, widget)\n        if types == self.CT_TabBarTab:\n            size.transpose()\n        return size\n    def drawControl(self, element, option, painter, widget):",
        "detail": "QProxyStyle.Lib.TabBarStyle",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProxyStyle.Lib.TabBarStyle",
        "description": "QProxyStyle.Lib.TabBarStyle",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass TabBarStyle(QProxyStyle):\n    def sizeFromContents(self, types, option, size, widget):\n        size = super(TabBarStyle, self).sizeFromContents(\n            types, option, size, widget)\n        if types == self.CT_TabBarTab:\n            size.transpose()\n        return size\n    def drawControl(self, element, option, painter, widget):\n        if element == self.CE_TabBarTabLabel:",
        "detail": "QProxyStyle.Lib.TabBarStyle",
        "documentation": {}
    },
    {
        "label": "TabWidget",
        "kind": 6,
        "importPath": "QProxyStyle.TabTextDirection",
        "description": "QProxyStyle.TabTextDirection",
        "peekOfCode": "class TabWidget(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(TabWidget, self).__init__(*args, **kwargs)\n        for i in range(10):\n            self.addTab(QLabel('Tab' + str(i)), str(i))\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QGridLayout(self)\n        layout.addWidget(TabWidget(self, tabPosition=TabWidget.North), 0, 1)",
        "detail": "QProxyStyle.TabTextDirection",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QProxyStyle.TabTextDirection",
        "description": "QProxyStyle.TabTextDirection",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QGridLayout(self)\n        layout.addWidget(TabWidget(self, tabPosition=TabWidget.North), 0, 1)\n        layout.addWidget(TabWidget(self, tabPosition=TabWidget.South), 2, 1)\n        layout.addWidget(TabWidget(self, tabPosition=TabWidget.West), 1, 0)\n        layout.addWidget(TabWidget(self, tabPosition=TabWidget.East), 1, 2)\nif __name__ == '__main__':\n    import sys",
        "detail": "QProxyStyle.TabTextDirection",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QProxyStyle.TabTextDirection",
        "description": "QProxyStyle.TabTextDirection",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass TabWidget(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(TabWidget, self).__init__(*args, **kwargs)\n        for i in range(10):\n            self.addTab(QLabel('Tab' + str(i)), str(i))",
        "detail": "QProxyStyle.TabTextDirection",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QProxyStyle.TabTextDirection",
        "description": "QProxyStyle.TabTextDirection",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass TabWidget(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(TabWidget, self).__init__(*args, **kwargs)\n        for i in range(10):\n            self.addTab(QLabel('Tab' + str(i)), str(i))\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QProxyStyle.TabTextDirection",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QProxyStyle.TabTextDirection",
        "description": "QProxyStyle.TabTextDirection",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass TabWidget(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(TabWidget, self).__init__(*args, **kwargs)\n        for i in range(10):\n            self.addTab(QLabel('Tab' + str(i)), str(i))\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QGridLayout(self)",
        "detail": "QProxyStyle.TabTextDirection",
        "documentation": {}
    },
    {
        "label": "LoadingThread",
        "kind": 6,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "class LoadingThread(QThread):\n    valueChanged = pyqtSignal(float)  # 현재 값 / 최대 \n    def __init__(self, *args, **kwargs):\n        super(LoadingThread, self).__init__(*args, **kwargs)\n        self.totalValue = randint(100, 200)  # 模 模 \n    def run(self):\n        for i in range(self.totalValue + 1):\n            self.valueChanged.emit(i / self.totalValue)\n            QThread.msleep(randint(50, 100))\nclass PushButtonLine(QPushButton):",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "PushButtonLine",
        "kind": 6,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "class PushButtonLine(QPushButton):\n    lineColor = QColor(0, 150, 136)\n    def __init__(self, *args, **kwargs):\n        self._waitText = kwargs.pop(\"waitText\", \"等待中\")\n        super(PushButtonLine, self).__init__(*args, **kwargs)\n        self._text = self.text()\n        self._percent = 0\n        self._timer = QTimer(self, timeout=self.update)\n        self.clicked.connect(self.start)\n    def paintEvent(self, event):",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(PushButtonLine(\"点击加载\"))\n        layout.addWidget(PushButtonLine(\"点击加载\").setLineColor(\"#ef5350\"))\n        layout.addWidget(PushButtonLine(\"点击加载\").setLineColor(\"#ffc107\"))\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    app.setStyleSheet(StyleSheet)",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\nPushButtonLine {\n    color: white;\n    border: none;\n    min-height: 48px;\n    background-color: #90caf9;\n}",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\nPushButtonLine {\n    color: white;\n    border: none;\n    min-height: 48px;\n    background-color: #90caf9;\n}\n'''",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nStyleSheet = '''\nPushButtonLine {\n    color: white;\n    border: none;\n    min-height: 48px;\n    background-color: #90caf9;\n}\n'''\nclass LoadingThread(QThread):",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "QPushButton.BottomLineProgress",
        "description": "QPushButton.BottomLineProgress",
        "peekOfCode": "StyleSheet = '''\nPushButtonLine {\n    color: white;\n    border: none;\n    min-height: 48px;\n    background-color: #90caf9;\n}\n'''\nclass LoadingThread(QThread):\n    valueChanged = pyqtSignal(float)  # 현재 값 / 최대 ",
        "detail": "QPushButton.BottomLineProgress",
        "documentation": {}
    },
    {
        "label": "PushButtonFont",
        "kind": 6,
        "importPath": "QPushButton.FontRotate",
        "description": "QPushButton.FontRotate",
        "peekOfCode": "class PushButtonFont(QPushButton):\n    LoadingText = \"\\uf110\"\n    def __init__(self, *args, **kwargs):\n        super(PushButtonFont, self).__init__(*args, **kwargs)\n        self.fontSize = self.font().pointSize() * 2\n        self._rotateAnimationStarted = False\n        self._rotateAnimation = QPropertyAnimation(self)\n        self._rotateAnimation.setTargetObject(self)\n        self._rotateAnimation.setStartValue(1)\n        self._rotateAnimation.setEndValue(12)",
        "detail": "QPushButton.FontRotate",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPushButton.FontRotate",
        "description": "QPushButton.FontRotate",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass PushButtonFont(QPushButton):\n    LoadingText = \"\\uf110\"\n    def __init__(self, *args, **kwargs):\n        super(PushButtonFont, self).__init__(*args, **kwargs)\n        self.fontSize = self.font().pointSize() * 2\n        self._rotateAnimationStarted = False\n        self._rotateAnimation = QPropertyAnimation(self)",
        "detail": "QPushButton.FontRotate",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPushButton.FontRotate",
        "description": "QPushButton.FontRotate",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass PushButtonFont(QPushButton):\n    LoadingText = \"\\uf110\"\n    def __init__(self, *args, **kwargs):\n        super(PushButtonFont, self).__init__(*args, **kwargs)\n        self.fontSize = self.font().pointSize() * 2\n        self._rotateAnimationStarted = False\n        self._rotateAnimation = QPropertyAnimation(self)\n        self._rotateAnimation.setTargetObject(self)",
        "detail": "QPushButton.FontRotate",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPushButton.FontRotate",
        "description": "QPushButton.FontRotate",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass PushButtonFont(QPushButton):\n    LoadingText = \"\\uf110\"\n    def __init__(self, *args, **kwargs):\n        super(PushButtonFont, self).__init__(*args, **kwargs)\n        self.fontSize = self.font().pointSize() * 2\n        self._rotateAnimationStarted = False\n        self._rotateAnimation = QPropertyAnimation(self)\n        self._rotateAnimation.setTargetObject(self)\n        self._rotateAnimation.setStartValue(1)",
        "detail": "QPushButton.FontRotate",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPushButton.NormalStyle",
        "description": "QPushButton.NormalStyle",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(QPushButton(\"red button\", self,\n                                     objectName=\"RedButton\", minimumHeight=48))\n        layout.addWidget(QPushButton(\"green button\", self,\n                                     objectName=\"GreenButton\", minimumHeight=48))\n        layout.addWidget(QPushButton(\"blue button\", self,\n                                     objectName=\"BlueButton\", minimumHeight=48))",
        "detail": "QPushButton.NormalStyle",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPushButton.NormalStyle",
        "description": "QPushButton.NormalStyle",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*这里是通用设置，所有按钮都有效，不过后面的可以覆盖这个*/\nQPushButton {\n    border: none; /*去掉边框*/\n}\n/*\nQPushButton#xxx",
        "detail": "QPushButton.NormalStyle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPushButton.NormalStyle",
        "description": "QPushButton.NormalStyle",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*这里是通用设置，所有按钮都有效，不过后面的可以覆盖这个*/\nQPushButton {\n    border: none; /*去掉边框*/\n}\n/*\nQPushButton#xxx\n或者",
        "detail": "QPushButton.NormalStyle",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPushButton.NormalStyle",
        "description": "QPushButton.NormalStyle",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nStyleSheet = '''\n/*这里是通用设置，所有按钮都有效，不过后面的可以覆盖这个*/\nQPushButton {\n    border: none; /*去掉边框*/\n}\n/*\nQPushButton#xxx\n或者\n#xx",
        "detail": "QPushButton.NormalStyle",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "QPushButton.NormalStyle",
        "description": "QPushButton.NormalStyle",
        "peekOfCode": "StyleSheet = '''\n/*这里是通用设置，所有按钮都有效，不过后面的可以覆盖这个*/\nQPushButton {\n    border: none; /*去掉边框*/\n}\n/*\nQPushButton#xxx\n或者\n#xx\n都表示通过设置的objectName来指定",
        "detail": "QPushButton.NormalStyle",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QPushButton.SignalsExample",
        "description": "QPushButton.SignalsExample",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        btn1 = QPushButton('按钮点击信号', self)\n        btn1.setObjectName('ClickBtn')\n        btn1.clicked.connect(self.onClicked)\n        layout.addWidget(btn1)\n        layout.addWidget(QPushButton(\n            '按钮按下信号', self, objectName='PressBtn', pressed=self.onPressed))",
        "detail": "QPushButton.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QPushButton.SignalsExample",
        "description": "QPushButton.SignalsExample",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        btn1 = QPushButton('按钮点击信号', self)\n        btn1.setObjectName('ClickBtn')\n        btn1.clicked.connect(self.onClicked)",
        "detail": "QPushButton.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QPushButton.SignalsExample",
        "description": "QPushButton.SignalsExample",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        btn1 = QPushButton('按钮点击信号', self)\n        btn1.setObjectName('ClickBtn')\n        btn1.clicked.connect(self.onClicked)\n        layout.addWidget(btn1)",
        "detail": "QPushButton.SignalsExample",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QPushButton.SignalsExample",
        "description": "QPushButton.SignalsExample",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        btn1 = QPushButton('按钮点击信号', self)\n        btn1.setObjectName('ClickBtn')\n        btn1.clicked.connect(self.onClicked)\n        layout.addWidget(btn1)\n        layout.addWidget(QPushButton(",
        "detail": "QPushButton.SignalsExample",
        "documentation": {}
    },
    {
        "label": "Ui_Setting",
        "kind": 6,
        "importPath": "QScrollArea.Lib.SettingUi",
        "description": "QScrollArea.Lib.SettingUi",
        "peekOfCode": "class Ui_Setting(object):\n    def setupUi(self, Setting):\n        Setting.setObjectName(\"Setting\")\n        Setting.resize(498, 498)\n        self.horizontalLayout = QtWidgets.QHBoxLayout(Setting)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setSpacing(0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.listWidget = QtWidgets.QListWidget(Setting)\n        self.listWidget.setFrameShape(QtWidgets.QFrame.NoFrame)",
        "detail": "QScrollArea.Lib.SettingUi",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QScrollArea.QQSettingPanel",
        "description": "QScrollArea.QQSettingPanel",
        "peekOfCode": "class Window(QWidget, Ui_Setting):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.resize(700, 435)\n        self._blockSignals = False\n        # 和 및 왼쪽 항목 이벤트 \n        self.scrollArea.verticalScrollBar().valueChanged.connect(\n            self.onValueChanged)\n        self.listWidget.itemClicked.connect(self.onItemClicked)",
        "detail": "QScrollArea.QQSettingPanel",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QScrollArea.QQSettingPanel",
        "description": "QScrollArea.QQSettingPanel",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget, Ui_Setting):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.resize(700, 435)",
        "detail": "QScrollArea.QQSettingPanel",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QScrollArea.QQSettingPanel",
        "description": "QScrollArea.QQSettingPanel",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget, Ui_Setting):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.resize(700, 435)\n        self._blockSignals = False\n        # 和 및 왼쪽 항목 이벤트 \n        self.scrollArea.verticalScrollBar().valueChanged.connect(",
        "detail": "QScrollArea.QQSettingPanel",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QScrollArea.QQSettingPanel",
        "description": "QScrollArea.QQSettingPanel",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget, Ui_Setting):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.resize(700, 435)\n        self._blockSignals = False\n        # 和 및 왼쪽 항목 이벤트 \n        self.scrollArea.verticalScrollBar().valueChanged.connect(\n            self.onValueChanged)",
        "detail": "QScrollArea.QQSettingPanel",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QScrollBar.StyleScrollBar",
        "description": "QScrollBar.StyleScrollBar",
        "peekOfCode": "class Window(QTextEdit):\n    def __init__(self, parent=None):\n        super(Window, self).__init__(parent)\n        self.resize(800, 600)\n        # 가로 세로 스크롤 막대를 항상 표시합니다 \n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        with open(\"Data/ScrollBar.qss\", \"rb\") as fp:\n            content = fp.read()\n            encoding = chardet.detect(content) or {}",
        "detail": "QScrollBar.StyleScrollBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QScrollBar.StyleScrollBar",
        "description": "QScrollBar.StyleScrollBar",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QTextEdit):\n    def __init__(self, parent=None):\n        super(Window, self).__init__(parent)\n        self.resize(800, 600)\n        # 가로 세로 스크롤 막대를 항상 표시합니다 \n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)",
        "detail": "QScrollBar.StyleScrollBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QScrollBar.StyleScrollBar",
        "description": "QScrollBar.StyleScrollBar",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QTextEdit):\n    def __init__(self, parent=None):\n        super(Window, self).__init__(parent)\n        self.resize(800, 600)\n        # 가로 세로 스크롤 막대를 항상 표시합니다 \n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        with open(\"Data/ScrollBar.qss\", \"rb\") as fp:",
        "detail": "QScrollBar.StyleScrollBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QScrollBar.StyleScrollBar",
        "description": "QScrollBar.StyleScrollBar",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QTextEdit):\n    def __init__(self, parent=None):\n        super(Window, self).__init__(parent)\n        self.resize(800, 600)\n        # 가로 세로 스크롤 막대를 항상 표시합니다 \n        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)\n        with open(\"Data/ScrollBar.qss\", \"rb\") as fp:\n            content = fp.read()",
        "detail": "QScrollBar.StyleScrollBar",
        "documentation": {}
    },
    {
        "label": "Ui_FormSerialPort",
        "kind": 6,
        "importPath": "QSerialPort.Lib.UiSerialPort",
        "description": "QSerialPort.Lib.UiSerialPort",
        "peekOfCode": "class Ui_FormSerialPort(object):\n    def setupUi(self, FormSerialPort):\n        FormSerialPort.setObjectName(\"FormSerialPort\")\n        FormSerialPort.resize(721, 597)\n        FormSerialPort.setStyleSheet(\"#labelStatus {\\n\"\n\"    border-radius: 13px;\\n\"\n\"    background-color: gray;\\n\"\n\"}\\n\"\n\"#labelStatus[isOn=\\\"true\\\"] {\\n\"\n\"    background-color: green;\\n\"",
        "detail": "QSerialPort.Lib.UiSerialPort",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QSerialPort.SerialDebugAssistant",
        "description": "QSerialPort.SerialDebugAssistant",
        "peekOfCode": "class Window(QWidget, Ui_FormSerialPort):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self._serial = QSerialPort(self)  # # 用 连接 连接 对 \n        self._serial.readyRead.connect(self.onReadyRead)  # 定 数据 数据 读 信号 信号 \n        # 먼저 사용 가능한 직렬 포트 목록을 가져옵니다 \n        self.getAvailablePorts()\n    @pyqtSlot()\n    def on_buttonConnect_clicked(self):",
        "detail": "QSerialPort.SerialDebugAssistant",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSerialPort.SerialDebugAssistant",
        "description": "QSerialPort.SerialDebugAssistant",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget, Ui_FormSerialPort):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self._serial = QSerialPort(self)  # # 用 连接 连接 对 ",
        "detail": "QSerialPort.SerialDebugAssistant",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSerialPort.SerialDebugAssistant",
        "description": "QSerialPort.SerialDebugAssistant",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Window(QWidget, Ui_FormSerialPort):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self._serial = QSerialPort(self)  # # 用 连接 连接 对 \n        self._serial.readyRead.connect(self.onReadyRead)  # 定 数据 数据 读 信号 信号 \n        # 먼저 사용 가능한 직렬 포트 목록을 가져옵니다 \n        self.getAvailablePorts()",
        "detail": "QSerialPort.SerialDebugAssistant",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSerialPort.SerialDebugAssistant",
        "description": "QSerialPort.SerialDebugAssistant",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWidget, Ui_FormSerialPort):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self._serial = QSerialPort(self)  # # 用 连接 连接 对 \n        self._serial.readyRead.connect(self.onReadyRead)  # 定 数据 数据 读 信号 信号 \n        # 먼저 사용 가능한 직렬 포트 목록을 가져옵니다 \n        self.getAvailablePorts()\n    @pyqtSlot()",
        "detail": "QSerialPort.SerialDebugAssistant",
        "documentation": {}
    },
    {
        "label": "ClickJumpSlider",
        "kind": 6,
        "importPath": "QSlider.ClickJumpSlider",
        "description": "QSlider.ClickJumpSlider",
        "peekOfCode": "class ClickJumpSlider(QSlider):\n    def mousePressEvent(self, event):\n        # 获取 上 上 拉 块 위치 \n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        rect = self.style().subControlRect(\n            QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)\n        if rect.contains(event.pos()):\n            # 슬라이더를 마우스 클릭하는 위치가있는 경우 QT 셀프 처리로 손을 긋습니다. \n            super(ClickJumpSlider, self).mousePressEvent(event)",
        "detail": "QSlider.ClickJumpSlider",
        "documentation": {}
    },
    {
        "label": "DemoWindow",
        "kind": 6,
        "importPath": "QSlider.ClickJumpSlider",
        "description": "QSlider.ClickJumpSlider",
        "peekOfCode": "class DemoWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(DemoWindow, self).__init__(*args, **kwargs)\n        self.resize(600, 600)\n        layout = QFormLayout(self)\n        self.label1 = QLabel('0', self)\n        layout.addRow(self.label1, ClickJumpSlider(\n            Qt.Horizontal, valueChanged=lambda v: self.label1.setText(str(v))))\n        # 横 - 역전 \n        self.label2 = QLabel('0', self)",
        "detail": "QSlider.ClickJumpSlider",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSlider.ClickJumpSlider",
        "description": "QSlider.ClickJumpSlider",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ClickJumpSlider(QSlider):\n    def mousePressEvent(self, event):\n        # 获取 上 上 拉 块 위치 \n        option = QStyleOptionSlider()\n        self.initStyleOption(option)",
        "detail": "QSlider.ClickJumpSlider",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSlider.ClickJumpSlider",
        "description": "QSlider.ClickJumpSlider",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ClickJumpSlider(QSlider):\n    def mousePressEvent(self, event):\n        # 获取 上 上 拉 块 위치 \n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        rect = self.style().subControlRect(\n            QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)\n        if rect.contains(event.pos()):",
        "detail": "QSlider.ClickJumpSlider",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSlider.ClickJumpSlider",
        "description": "QSlider.ClickJumpSlider",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ClickJumpSlider(QSlider):\n    def mousePressEvent(self, event):\n        # 获取 上 上 拉 块 위치 \n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        rect = self.style().subControlRect(\n            QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)\n        if rect.contains(event.pos()):\n            # 슬라이더를 마우스 클릭하는 위치가있는 경우 QT 셀프 처리로 손을 긋습니다. ",
        "detail": "QSlider.ClickJumpSlider",
        "documentation": {}
    },
    {
        "label": "LfSlider",
        "kind": 6,
        "importPath": "QSlider.LfSlider",
        "description": "QSlider.LfSlider",
        "peekOfCode": "class LfSlider(QSlider):\n    valueChanged = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        delay = kwargs.pop('delay', 500)\n        super(LfSlider, self).__init__(*args, **kwargs)\n        self.lastValue = self.value()\n        self.uTimer = QTimer(self)\n        self.uTimer.timeout.connect(self.onValueChanged)\n        self.uTimer.start(delay)\n    def onValueChanged(self):",
        "detail": "QSlider.LfSlider",
        "documentation": {}
    },
    {
        "label": "TestWindow",
        "kind": 6,
        "importPath": "QSlider.LfSlider",
        "description": "QSlider.LfSlider",
        "peekOfCode": "class TestWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(TestWindow, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # 原 原 \n        left_group = QGroupBox('原始QSlider', self)\n        left_layout = QVBoxLayout(left_group)\n        self.leftLabel = QPlainTextEdit(self)\n        left_layout.addWidget(self.leftLabel)\n        self.leftSlider = QSlider(Qt.Horizontal, self)",
        "detail": "QSlider.LfSlider",
        "documentation": {}
    },
    {
        "label": "SliderStyle",
        "kind": 6,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "class SliderStyle(QProxyStyle):\n    def subControlRect(self, control, option, subControl, widget=None):\n        rect = super(SliderStyle, self).subControlRect(\n            control, option, subControl, widget)\n        if subControl == QStyle.SC_SliderHandle:\n            if option.orientation == Qt.Horizontal:\n                # 高度 1/3. \n                radius = int(widget.height() / 3)\n                offset = int(radius / 3)\n                if option.state & QStyle.State_MouseOver:",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "PaintQSlider",
        "kind": 6,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "class PaintQSlider(QSlider):\n    def __init__(self, *args, **kwargs):\n        super(PaintQSlider, self).__init__(*args, **kwargs)\n        # 프록시 스타일을 설정하십시오. 주로 마우스 클릭 영역을 계산하고 해결하는 데 사용됩니다. \n        self.setStyle(SliderStyle())\n    def paintEvent(self, _):\n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing)",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        layout = QVBoxLayout(self)\n        layout.addWidget(PaintQSlider(Qt.Vertical, self, minimumWidth=90))\n        layout.addWidget(PaintQSlider(Qt.Horizontal, self, minimumHeight=90))\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SliderStyle(QProxyStyle):\n    def subControlRect(self, control, option, subControl, widget=None):\n        rect = super(SliderStyle, self).subControlRect(\n            control, option, subControl, widget)\n        if subControl == QStyle.SC_SliderHandle:",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass SliderStyle(QProxyStyle):\n    def subControlRect(self, control, option, subControl, widget=None):\n        rect = super(SliderStyle, self).subControlRect(\n            control, option, subControl, widget)\n        if subControl == QStyle.SC_SliderHandle:\n            if option.orientation == Qt.Horizontal:\n                # 高度 1/3. \n                radius = int(widget.height() / 3)",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSlider.PaintQSlider",
        "description": "QSlider.PaintQSlider",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass SliderStyle(QProxyStyle):\n    def subControlRect(self, control, option, subControl, widget=None):\n        rect = super(SliderStyle, self).subControlRect(\n            control, option, subControl, widget)\n        if subControl == QStyle.SC_SliderHandle:\n            if option.orientation == Qt.Horizontal:\n                # 高度 1/3. \n                radius = int(widget.height() / 3)\n                offset = int(radius / 3)",
        "detail": "QSlider.PaintQSlider",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QSlider.QssQSlider",
        "description": "QSlider.QssQSlider",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QSlider(Qt.Vertical, self))\n        layout.addWidget(QSlider(Qt.Horizontal, self))\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication",
        "detail": "QSlider.QssQSlider",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSlider.QssQSlider",
        "description": "QSlider.QssQSlider",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nStyleSheet = \"\"\"\nQWidget {\n    background: gray;\n}\n/*横向*/",
        "detail": "QSlider.QssQSlider",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSlider.QssQSlider",
        "description": "QSlider.QssQSlider",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nStyleSheet = \"\"\"\nQWidget {\n    background: gray;\n}\n/*横向*/\nQSlider:horizontal {\n    min-height: 60px;\n}",
        "detail": "QSlider.QssQSlider",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSlider.QssQSlider",
        "description": "QSlider.QssQSlider",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nStyleSheet = \"\"\"\nQWidget {\n    background: gray;\n}\n/*横向*/\nQSlider:horizontal {\n    min-height: 60px;\n}\nQSlider::groove:horizontal {",
        "detail": "QSlider.QssQSlider",
        "documentation": {}
    },
    {
        "label": "StyleSheet",
        "kind": 5,
        "importPath": "QSlider.QssQSlider",
        "description": "QSlider.QssQSlider",
        "peekOfCode": "StyleSheet = \"\"\"\nQWidget {\n    background: gray;\n}\n/*横向*/\nQSlider:horizontal {\n    min-height: 60px;\n}\nQSlider::groove:horizontal {\n    height: 1px;",
        "detail": "QSlider.QssQSlider",
        "documentation": {}
    },
    {
        "label": "GifSplashScreen",
        "kind": 6,
        "importPath": "QSplashScreen.GifSplashScreen",
        "description": "QSplashScreen.GifSplashScreen",
        "peekOfCode": "class GifSplashScreen(QSplashScreen):\n    def __init__(self, *args, **kwargs):\n        super(GifSplashScreen, self).__init__(*args, **kwargs)\n        self.movie = QMovie('Data/splash.gif')\n        self.movie.frameChanged.connect(self.onFrameChanged)\n        self.movie.start()\n    def onFrameChanged(self, _):\n        self.setPixmap(self.movie.currentPixmap())\n    def finish(self, widget):\n        self.movie.stop()",
        "detail": "QSplashScreen.GifSplashScreen",
        "documentation": {}
    },
    {
        "label": "BusyWindow",
        "kind": 6,
        "importPath": "QSplashScreen.GifSplashScreen",
        "description": "QSplashScreen.GifSplashScreen",
        "peekOfCode": "class BusyWindow(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(BusyWindow, self).__init__(*args, **kwargs)\n        # 模 模 操作 操作, 일반적으로 시간 소모적 인로드 데이터가 스레드에 넣어야합니다. \n        for i in range(5):\n            sleep(1)\n            splash.showMessage('加载进度: %d' % i, Qt.AlignHCenter | Qt.AlignBottom, Qt.white)\n            QApplication.instance().processEvents()\n        splash.showMessage('初始化完成', Qt.AlignHCenter | Qt.AlignBottom, Qt.white)\n        splash.finish(self)",
        "detail": "QSplashScreen.GifSplashScreen",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSplashScreen.GifSplashScreen",
        "description": "QSplashScreen.GifSplashScreen",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nfrom time import sleep\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QMovie\nfrom PyQt5.QtWidgets import QApplication, QSplashScreen, QWidget\nclass GifSplashScreen(QSplashScreen):\n    def __init__(self, *args, **kwargs):\n        super(GifSplashScreen, self).__init__(*args, **kwargs)",
        "detail": "QSplashScreen.GifSplashScreen",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSplashScreen.GifSplashScreen",
        "description": "QSplashScreen.GifSplashScreen",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nfrom time import sleep\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QMovie\nfrom PyQt5.QtWidgets import QApplication, QSplashScreen, QWidget\nclass GifSplashScreen(QSplashScreen):\n    def __init__(self, *args, **kwargs):\n        super(GifSplashScreen, self).__init__(*args, **kwargs)\n        self.movie = QMovie('Data/splash.gif')",
        "detail": "QSplashScreen.GifSplashScreen",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSplashScreen.GifSplashScreen",
        "description": "QSplashScreen.GifSplashScreen",
        "peekOfCode": "__Version__ = 'Version 1.0'\nfrom time import sleep\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QMovie\nfrom PyQt5.QtWidgets import QApplication, QSplashScreen, QWidget\nclass GifSplashScreen(QSplashScreen):\n    def __init__(self, *args, **kwargs):\n        super(GifSplashScreen, self).__init__(*args, **kwargs)\n        self.movie = QMovie('Data/splash.gif')\n        self.movie.frameChanged.connect(self.onFrameChanged)",
        "detail": "QSplashScreen.GifSplashScreen",
        "documentation": {}
    },
    {
        "label": "SplitterHandle",
        "kind": 6,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "class SplitterHandle(QSplitterHandle):\n    clicked = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(SplitterHandle, self).__init__(*args, **kwargs)\n        #이 설정이 설정되어 있지 않으면 마우스는 누르면 MouseMoveEvent에 응답하여 이동할 수 있습니다. \n        self.setMouseTracking(True)\n    def mousePressEvent(self, event):\n        super(SplitterHandle, self).mousePressEvent(event)\n        if event.pos().y() <= 24:\n            # 클릭 신호를 보냅니다 ",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "Splitter",
        "kind": 6,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "class Splitter(QSplitter):\n    def onClicked(self):\n        print('clicked')\n    def createHandle(self):\n        if self.count() == 1:\n            # 여기, 첫 번째 분할 스트립 \n            handle = SplitterHandle(self.orientation(), self)\n            handle.clicked.connect(self.onClicked)\n            return handle\n        return super(Splitter, self).createHandle()",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "SplitterWindow",
        "kind": 6,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "class SplitterWindow(QMainWindow):\n    def __init__(self, parent=None):\n        super(SplitterWindow, self).__init__(parent)\n        self.resize(400, 400)\n        self.setWindowTitle('PyQt Qsplitter')\n        textedit = QTextEdit('QTextEdit', self)\n        listwidget = QListWidget(self)\n        listwidget.addItem(\"This is  a \\nListWidget!\")\n        treewidget = QTreeWidget()\n        treewidget.setHeaderLabels(['This', 'is', 'a', 'TreeWidgets!'])",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\\\nclass SplitterHandle(QSplitterHandle):\n    clicked = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(SplitterHandle, self).__init__(*args, **kwargs)\n        #이 설정이 설정되어 있지 않으면 마우스는 누르면 MouseMoveEvent에 응답하여 이동할 수 있습니다. ",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\\\nclass SplitterHandle(QSplitterHandle):\n    clicked = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(SplitterHandle, self).__init__(*args, **kwargs)\n        #이 설정이 설정되어 있지 않으면 마우스는 누르면 MouseMoveEvent에 응답하여 이동할 수 있습니다. \n        self.setMouseTracking(True)\n    def mousePressEvent(self, event):\n        super(SplitterHandle, self).mousePressEvent(event)",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QSplitter.RewriteHandle",
        "description": "QSplitter.RewriteHandle",
        "peekOfCode": "__Version__ = \"Version 1.0\"\\\nclass SplitterHandle(QSplitterHandle):\n    clicked = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(SplitterHandle, self).__init__(*args, **kwargs)\n        #이 설정이 설정되어 있지 않으면 마우스는 누르면 MouseMoveEvent에 응답하여 이동할 수 있습니다. \n        self.setMouseTracking(True)\n    def mousePressEvent(self, event):\n        super(SplitterHandle, self).mousePressEvent(event)\n        if event.pos().y() <= 24:",
        "detail": "QSplitter.RewriteHandle",
        "documentation": {}
    },
    {
        "label": "LeftTabWidget",
        "kind": 6,
        "importPath": "QStackedWidget.LeftTabStacked",
        "description": "QStackedWidget.LeftTabStacked",
        "peekOfCode": "class LeftTabWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(LeftTabWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 左 右 布 (q qtwidget + qstackedwidget + qstackedwidget) \n        layout = QHBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        # 左 목록 \n        self.listWidget = QListWidget(self)\n        layout.addWidget(self.listWidget)",
        "detail": "QStackedWidget.LeftTabStacked",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QStackedWidget.LeftTabStacked",
        "description": "QStackedWidget.LeftTabStacked",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass LeftTabWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(LeftTabWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 左 右 布 (q qtwidget + qstackedwidget + qstackedwidget) ",
        "detail": "QStackedWidget.LeftTabStacked",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QStackedWidget.LeftTabStacked",
        "description": "QStackedWidget.LeftTabStacked",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass LeftTabWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(LeftTabWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 左 右 布 (q qtwidget + qstackedwidget + qstackedwidget) \n        layout = QHBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        # 左 목록 ",
        "detail": "QStackedWidget.LeftTabStacked",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QStackedWidget.LeftTabStacked",
        "description": "QStackedWidget.LeftTabStacked",
        "peekOfCode": "__Version__ = 1.0\nclass LeftTabWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(LeftTabWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 左 右 布 (q qtwidget + qstackedwidget + qstackedwidget) \n        layout = QHBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        # 左 목록 \n        self.listWidget = QListWidget(self)",
        "detail": "QStackedWidget.LeftTabStacked",
        "documentation": {}
    },
    {
        "label": "Stylesheet",
        "kind": 5,
        "importPath": "QStackedWidget.LeftTabStacked",
        "description": "QStackedWidget.LeftTabStacked",
        "peekOfCode": "Stylesheet = \"\"\"\n/*去掉item虚线边框*/\nQListWidget, QListView, QTreeWidget, QTreeView {\n    outline: 0px;\n}\n/*设置左侧选项的最小最大宽度,文字颜色和背景颜色*/\nQListWidget {\n    min-width: 120px;\n    max-width: 120px;\n    color: white;",
        "detail": "QStackedWidget.LeftTabStacked",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "QSystemTrayIcon.MinimizeToTray",
        "description": "QSystemTrayIcon.MinimizeToTray",
        "peekOfCode": "class MainWindow(QMainWindow):\n    \"\"\"\n         Сheckbox and system tray icons.\n         Will initialize in the constructor.\n    \"\"\"\n    check_box = None\n    tray_icon = None\n    # Override the class constructor\n    def __init__(self):\n        # Be sure to call the super class method",
        "detail": "QSystemTrayIcon.MinimizeToTray",
        "documentation": {}
    },
    {
        "label": "TableView",
        "kind": 6,
        "importPath": "QTableView.CopyContent",
        "description": "QTableView.CopyContent",
        "peekOfCode": "class TableView(QTableView):\n    def __init__(self, parent=None):\n        super(TableView, self).__init__(parent)\n        self.resize(800, 600)\n        self.setContextMenuPolicy(Qt.ActionsContextMenu)  # 键 메뉴 \n        self.setEditTriggers(self.NoEditTriggers)  # 禁 编 编 \n        self.doubleClicked.connect(self.onDoubleClick)\n        self.addAction(QAction(\"复制\", self, triggered=self.copyData))\n        self.myModel = QStandardItemModel()  # model\n        self.initHeader()  # 초기화 머리 ",
        "detail": "QTableView.CopyContent",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QTableView.CopyContent",
        "description": "QTableView.CopyContent",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass TableView(QTableView):\n    def __init__(self, parent=None):\n        super(TableView, self).__init__(parent)\n        self.resize(800, 600)\n        self.setContextMenuPolicy(Qt.ActionsContextMenu)  # 键 메뉴 \n        self.setEditTriggers(self.NoEditTriggers)  # 禁 编 编 \n        self.doubleClicked.connect(self.onDoubleClick)",
        "detail": "QTableView.CopyContent",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QTableView.CopyContent",
        "description": "QTableView.CopyContent",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass TableView(QTableView):\n    def __init__(self, parent=None):\n        super(TableView, self).__init__(parent)\n        self.resize(800, 600)\n        self.setContextMenuPolicy(Qt.ActionsContextMenu)  # 键 메뉴 \n        self.setEditTriggers(self.NoEditTriggers)  # 禁 编 编 \n        self.doubleClicked.connect(self.onDoubleClick)\n        self.addAction(QAction(\"复制\", self, triggered=self.copyData))",
        "detail": "QTableView.CopyContent",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QTableView.CopyContent",
        "description": "QTableView.CopyContent",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass TableView(QTableView):\n    def __init__(self, parent=None):\n        super(TableView, self).__init__(parent)\n        self.resize(800, 600)\n        self.setContextMenuPolicy(Qt.ActionsContextMenu)  # 键 메뉴 \n        self.setEditTriggers(self.NoEditTriggers)  # 禁 编 编 \n        self.doubleClicked.connect(self.onDoubleClick)\n        self.addAction(QAction(\"复制\", self, triggered=self.copyData))\n        self.myModel = QStandardItemModel()  # model",
        "detail": "QTableView.CopyContent",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "QTableWidget.Lib.mainui",
        "description": "QTableWidget.Lib.mainui",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(400, 362)\n        self.gridLayout = QtWidgets.QGridLayout(Form)\n        self.gridLayout.setObjectName(\"gridLayout\")\n        self.checkBoxName = QtWidgets.QCheckBox(Form)\n        self.checkBoxName.setObjectName(\"checkBoxName\")\n        self.gridLayout.addWidget(self.checkBoxName, 0, 0, 1, 1)\n        self.checkBoxSeat = QtWidgets.QCheckBox(Form)",
        "detail": "QTableWidget.Lib.mainui",
        "documentation": {}
    },
    {
        "label": "MyTable",
        "kind": 6,
        "importPath": "QTableWidget.Lib.TableWidget",
        "description": "QTableWidget.Lib.TableWidget",
        "peekOfCode": "class MyTable(QTableWidget):\n    def __init__(self,parent=None):\n        super(MyTable, self).__init__(parent)\n        self.setWindowTitle(\"我是一个表格\")\n        self.setWindowIcon(QIcon(\"male.png\"))\n        self.resize(920, 240)\n        self.setColumnCount(6)\n        self.setRowCount(2)\n        # 두 행의 행으로 테이블을 설정합니다. \n        self.setColumnWidth(0, 200)",
        "detail": "QTableWidget.Lib.TableWidget",
        "documentation": {}
    },
    {
        "label": "Tourist",
        "kind": 6,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "class Tourist(Base):\n    __tablename__ = 'tourist'\n    id = Column(Integer, primary_key=True)\n    name = Column(Text)\n    license = Column(Text)\n    flightnumber = Column(Text)\n    flightdate = Column(Text)\n    seatnumber = Column(Text)\n    boardingport = Column(Text)\n    no = Column(Text)",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "class Window(QWidget, Ui_Form):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        # SQL SPLICING 필드 \n        self.sql = {}\n        # 데이터베이스 연결 \n        self.session = sessionmaker(bind=engine)()\n    @pyqtSlot()\n    def on_pushButtonQuery_clicked(self):",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n# engine = create_engine('mysql+mysqldb://root@localhost:3306/tourist?charset=utf8')\nengine = create_engine('sqlite:///Data/data.sqlite3', echo=True)  # echo는 명령이 표시됩니다 \nBase = declarative_base()\nclass Tourist(Base):\n    __tablename__ = 'tourist'",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n# engine = create_engine('mysql+mysqldb://root@localhost:3306/tourist?charset=utf8')\nengine = create_engine('sqlite:///Data/data.sqlite3', echo=True)  # echo는 명령이 표시됩니다 \nBase = declarative_base()\nclass Tourist(Base):\n    __tablename__ = 'tourist'\n    id = Column(Integer, primary_key=True)\n    name = Column(Text)\n    license = Column(Text)",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# engine = create_engine('mysql+mysqldb://root@localhost:3306/tourist?charset=utf8')\nengine = create_engine('sqlite:///Data/data.sqlite3', echo=True)  # echo는 명령이 표시됩니다 \nBase = declarative_base()\nclass Tourist(Base):\n    __tablename__ = 'tourist'\n    id = Column(Integer, primary_key=True)\n    name = Column(Text)\n    license = Column(Text)\n    flightnumber = Column(Text)",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "engine = create_engine('sqlite:///Data/data.sqlite3', echo=True)  # echo는 명령이 표시됩니다 \nBase = declarative_base()\nclass Tourist(Base):\n    __tablename__ = 'tourist'\n    id = Column(Integer, primary_key=True)\n    name = Column(Text)\n    license = Column(Text)\n    flightnumber = Column(Text)\n    flightdate = Column(Text)\n    seatnumber = Column(Text)",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "QTableWidget.SqlQuery",
        "description": "QTableWidget.SqlQuery",
        "peekOfCode": "Base = declarative_base()\nclass Tourist(Base):\n    __tablename__ = 'tourist'\n    id = Column(Integer, primary_key=True)\n    name = Column(Text)\n    license = Column(Text)\n    flightnumber = Column(Text)\n    flightdate = Column(Text)\n    seatnumber = Column(Text)\n    boardingport = Column(Text)",
        "detail": "QTableWidget.SqlQuery",
        "documentation": {}
    },
    {
        "label": "MyTable",
        "kind": 6,
        "importPath": "QTableWidget.TableWidget",
        "description": "QTableWidget.TableWidget",
        "peekOfCode": "class MyTable(QTableWidget):\n    def __init__(self,parent=None):\n        super(MyTable, self).__init__(parent)\n        self.setWindowTitle(\"我是一个表格\")\n        self.setWindowIcon(QIcon(\"male.png\"))\n        self.resize(920, 240)\n        self.setColumnCount(6)\n        self.setRowCount(2)\n        # 두 행의 행으로 테이블을 설정합니다. \n        self.setColumnWidth(0, 200)",
        "detail": "QTableWidget.TableWidget",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.AreaChart",
        "description": "QtChart.AreaChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.AreaChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.BarChart",
        "description": "QtChart.BarChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.BarChart",
        "documentation": {}
    },
    {
        "label": "ToolTipItem",
        "kind": 6,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "class ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (\n            color.red(), color.green(), color.blue(), color.alpha()))",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "ToolTipWidget",
        "kind": 6,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "class ToolTipWidget(QWidget):\n    Cache = {}\n    def __init__(self, *args, **kwargs):\n        super(ToolTipWidget, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet(\n            \"ToolTipWidget{background: rgba(50, 50, 50, 100);}\")\n        layout = QVBoxLayout(self)\n        self.titleLabel = QLabel(self, styleSheet=\"color:white;\")\n        layout.addWidget(self.titleLabel)",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "GraphicsProxyWidget",
        "kind": 6,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "class GraphicsProxyWidget(QGraphicsProxyWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsProxyWidget, self).__init__(*args, **kwargs)\n        self.setZValue(999)\n        self.tipWidget = ToolTipWidget()\n        self.setWidget(self.tipWidget)\n        self.hide()\n    def width(self):\n        return self.size().width()\n    def height(self):",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "kind": 6,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "class ChartView(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(ChartView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setRenderHint(QPainter.Antialiasing)  # 抗锯 齿齿 \n        self.initChart()\n        # 提 위젯 \n        self.toolTipWidget = GraphicsProxyWidget(self._chart)\n        # 선 너비를 조정해야합니다 \n        self.lineItem = QGraphicsLineItem(self._chart)",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtChart.BarStack",
        "description": "QtChart.BarStack",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (",
        "detail": "QtChart.BarStack",
        "documentation": {}
    },
    {
        "label": "ThemeWidget",
        "kind": 6,
        "importPath": "QtChart.ChartThemes",
        "description": "QtChart.ChartThemes",
        "peekOfCode": "class ThemeWidget(QWidget):\n    def __init__(self, parent=None):\n        super(ThemeWidget, self).__init__(parent)\n        self.m_charts = []\n        self.m_listCount = 3\n        self.m_valueMax = 10\n        self.m_valueCount = 7\n        self.m_dataTable = self.generateRandomData(self.m_listCount,\n                                                   self.m_valueMax, self.m_valueCount)\n        self.m_themeComboBox = self.createThemeBox()",
        "detail": "QtChart.ChartThemes",
        "documentation": {}
    },
    {
        "label": "CpuLineChart",
        "kind": 6,
        "importPath": "QtChart.CpuLineChart",
        "description": "QtChart.CpuLineChart",
        "peekOfCode": "class CpuLineChart(QChart):\n    def __init__(self, *args, **kwargs):\n        super(CpuLineChart, self).__init__(*args, **kwargs)\n        self.m_count = 10\n        # 隐 图 \n        self.legend().hide()\n        self.m_series = QSplineSeries(self)\n        # 설치 브러시 \n        self.m_series.setPen(QPen(QColor('#3B8CFF'), 2, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))\n        self.addSeries(self.m_series)",
        "detail": "QtChart.CpuLineChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        # x 축을 사용자 정의하십시오 (원래 x 축 값에 해당). \n        chart = getChart(\"自定义x轴(和原来的x轴值对应等分)\")\n        customAxisX(chart)\n        layout.addWidget(QChartView(chart, self))\n        # 사용자 정의 오른쪽 축을 추가 (왼쪽에 해당하는 분취 량) \n        chart = getChart(\"自定义添加右侧y轴(等分,与左侧不对应)\")",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "generateRandomData",
        "kind": 2,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "def generateRandomData(listCount, valueMax, valueCount):\n    random.seed()\n    dataTable = []\n    for i in range(listCount):\n        dataList = []\n        yValue = 0.0\n        f_valueCount = float(valueCount)\n        for j in range(valueCount):\n            yValue += random.uniform(0, valueMax) / f_valueCount\n            value = j + random.random() * m_valueMax / f_valueCount, yValue",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "getChart",
        "kind": 2,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "def getChart(title):\n    chart = QChart(title=title)\n    for i, data_list in enumerate(m_dataTable):\n        series = QLineSeries(chart)\n        for value, _ in data_list:\n            series.append(*value)\n        series.setName(\"Series \" + str(i))\n        chart.addSeries(series)\n    chart.createDefaultAxes()  # 기본 축을 만듭니다 \n    return chart",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "customAxisX",
        "kind": 2,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "def customAxisX(chart):\n    # 사용자 정의 X 축 (000) \n    series = chart.series()\n    if not series:\n        return\n    axisx = QCategoryAxis(\n        chart, labelsPosition=QCategoryAxis.AxisLabelsPositionOnValue)\n    minx = chart.axisX().min()\n    maxx = chart.axisX().max()\n    tickc = chart.axisX().tickCount()",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "customTopAxisX",
        "kind": 2,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "def customTopAxisX(chart):\n    # 사용자 정의 탑 x 축 \n    series = chart.series()\n    if not series:\n        return\n    category = [\"%d月\" % i for i in range(1, 9)]  # 1 1 8 1. \n    axisx = QCategoryAxis(\n        chart, labelsPosition=QCategoryAxis.AxisLabelsPositionOnValue)\n    axisx.setGridLineVisible(False)  # 숨겨진 격자 선 \n    axisx.setTickCount(len(category))  # 포인트 수를 설정하십시오 ",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "customAxisY",
        "kind": 2,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "def customAxisY(chart):\n    # 사용자 정의 Y 축 (불평등) \n    series = chart.series()\n    if not series:\n        return\n    category = [\"周一\", \"周二\", \"周三\", \"周四\",\n                \"周五\", \"周六\", \"周日\"]\n    axisy = QCategoryAxis(\n        chart, labelsPosition=QCategoryAxis.AxisLabelsPositionOnValue)\n    axisy.setGridLineVisible(False)  # 숨겨진 격자 선 ",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "__version__ = \"0.0.1\"\nm_listCount = 3\nm_valueMax = 10\nm_valueCount = 7\ndef generateRandomData(listCount, valueMax, valueCount):\n    random.seed()\n    dataTable = []\n    for i in range(listCount):\n        dataList = []\n        yValue = 0.0",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "m_listCount",
        "kind": 5,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "m_listCount = 3\nm_valueMax = 10\nm_valueCount = 7\ndef generateRandomData(listCount, valueMax, valueCount):\n    random.seed()\n    dataTable = []\n    for i in range(listCount):\n        dataList = []\n        yValue = 0.0\n        f_valueCount = float(valueCount)",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "m_valueMax",
        "kind": 5,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "m_valueMax = 10\nm_valueCount = 7\ndef generateRandomData(listCount, valueMax, valueCount):\n    random.seed()\n    dataTable = []\n    for i in range(listCount):\n        dataList = []\n        yValue = 0.0\n        f_valueCount = float(valueCount)\n        for j in range(valueCount):",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "m_valueCount",
        "kind": 5,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "m_valueCount = 7\ndef generateRandomData(listCount, valueMax, valueCount):\n    random.seed()\n    dataTable = []\n    for i in range(listCount):\n        dataList = []\n        yValue = 0.0\n        f_valueCount = float(valueCount)\n        for j in range(valueCount):\n            yValue += random.uniform(0, valueMax) / f_valueCount",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "m_dataTable",
        "kind": 5,
        "importPath": "QtChart.CustomXYaxis",
        "description": "QtChart.CustomXYaxis",
        "peekOfCode": "m_dataTable = generateRandomData(m_listCount, m_valueMax, m_valueCount)\ndef getChart(title):\n    chart = QChart(title=title)\n    for i, data_list in enumerate(m_dataTable):\n        series = QLineSeries(chart)\n        for value, _ in data_list:\n            series.append(*value)\n        series.setName(\"Series \" + str(i))\n        chart.addSeries(series)\n    chart.createDefaultAxes()  # 기본 축을 만듭니다 ",
        "detail": "QtChart.CustomXYaxis",
        "documentation": {}
    },
    {
        "label": "DynamicSpline",
        "kind": 6,
        "importPath": "QtChart.DynamicSpline",
        "description": "QtChart.DynamicSpline",
        "peekOfCode": "class DynamicSpline(QChart):\n    def __init__(self):\n        super().__init__()\n        self.m_step = 0\n        self.m_x = 5\n        self.m_y = 1\n        # 이미지를 초기화하십시오 \n        self.series = QSplineSeries(self)\n        green_pen = QPen(Qt.red)\n        green_pen.setWidth(3)",
        "detail": "QtChart.DynamicSpline",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "QtChart.DynamicSpline",
        "description": "QtChart.DynamicSpline",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass DynamicSpline(QChart):\n    def __init__(self):\n        super().__init__()\n        self.m_step = 0\n        self.m_x = 5\n        self.m_y = 1\n        # 이미지를 초기화하십시오 \n        self.series = QSplineSeries(self)\n        green_pen = QPen(Qt.red)",
        "detail": "QtChart.DynamicSpline",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.HorizontalBarChart",
        "description": "QtChart.HorizontalBarChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.HorizontalBarChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.HorizontalPercentBarChart",
        "description": "QtChart.HorizontalPercentBarChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.HorizontalPercentBarChart",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "QtChart.LineChart",
        "description": "QtChart.LineChart",
        "peekOfCode": "__version__ = \"0.0.1\"\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    chart = QChart()\n    chart.setTitle(\"Line Chart 1\")\n    series = QLineSeries(chart)\n    series.append(0, 6)\n    series.append(2, 4)\n    chart.addSeries(series)\n    chart.createDefaultAxes()  # 기본 축을 만듭니다 ",
        "detail": "QtChart.LineChart",
        "documentation": {}
    },
    {
        "label": "ToolTipItem",
        "kind": 6,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "class ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (\n            color.red(), color.green(), color.blue(), color.alpha()))",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "ToolTipWidget",
        "kind": 6,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "class ToolTipWidget(QWidget):\n    Cache = {}\n    def __init__(self, *args, **kwargs):\n        super(ToolTipWidget, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet(\n            \"ToolTipWidget{background: rgba(50, 50, 50, 100);}\")\n        layout = QVBoxLayout(self)\n        self.titleLabel = QLabel(self, styleSheet=\"color:white;\")\n        layout.addWidget(self.titleLabel)",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "GraphicsProxyWidget",
        "kind": 6,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "class GraphicsProxyWidget(QGraphicsProxyWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsProxyWidget, self).__init__(*args, **kwargs)\n        self.setZValue(999)\n        self.tipWidget = ToolTipWidget()\n        self.setWidget(self.tipWidget)\n        self.hide()\n    def width(self):\n        return self.size().width()\n    def height(self):",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "kind": 6,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "class ChartView(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(ChartView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setRenderHint(QPainter.Antialiasing)  # 抗锯 齿齿 \n        # 사용자 정의 x 축 레이블 \n        self.category = [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"]\n        self.initChart()\n        # 提 위젯 \n        self.toolTipWidget = GraphicsProxyWidget(self._chart)",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtChart.LineStack",
        "description": "QtChart.LineStack",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (",
        "detail": "QtChart.LineStack",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.PercentBarChart",
        "description": "QtChart.PercentBarChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.PercentBarChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.PieChart",
        "description": "QtChart.PieChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.PieChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.ScatterChart",
        "description": "QtChart.ScatterChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 아날로그 데이터 생성 \n        self.m_dataTable = self.generateRandomData(3, 10, 7)\n        # 图片 \n        chart = QChart()",
        "detail": "QtChart.ScatterChart",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtChart.SplineChart",
        "description": "QtChart.SplineChart",
        "peekOfCode": "class Window(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 300)\n        # 抗锯 齿齿 \n        self.setRenderHint(QPainter.Antialiasing)\n        # 图片 \n        chart = QChart()\n        self.setChart(chart)\n        # 제목을 설정하십시오 ",
        "detail": "QtChart.SplineChart",
        "documentation": {}
    },
    {
        "label": "CircleWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(\n            \"border:1px solid green;border-radius:6px;background: %s;\" % color)\n        self.setWidget(label)\nclass TextWidget(QGraphicsProxyWidget):",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "TextWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class TextWidget(QGraphicsProxyWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(TextWidget, self).__init__(*args, **kwargs)\n        self.setWidget(QLabel(text, styleSheet=\"color:white;\"))\nclass GraphicsWidget(QGraphicsWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsWidget, self).__init__(*args, **kwargs)\n#         self.setFlags(self.ItemClipsChildrenToShape)\n        self.setZValue(999)\n        layout = QGraphicsGridLayout(self)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "GraphicsWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class GraphicsWidget(QGraphicsWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsWidget, self).__init__(*args, **kwargs)\n#         self.setFlags(self.ItemClipsChildrenToShape)\n        self.setZValue(999)\n        layout = QGraphicsGridLayout(self)\n        for row in range(6):\n            layout.addItem(CircleWidget(\"red\"), row, 0)\n            layout.addItem(TextWidget(\"red\"), row, 1)\n        self.hide()",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "ToolTipItem",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (\n            color.red(), color.green(), color.blue(), color.alpha()))",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "ToolTipWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class ToolTipWidget(QWidget):\n    Cache = {}\n    def __init__(self, *args, **kwargs):\n        super(ToolTipWidget, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet(\n            \"ToolTipWidget{background: rgba(50,50,50,70);}\")\n        layout = QVBoxLayout(self)\n        self.titleLabel = QLabel(self, styleSheet=\"color:white;\")\n        layout.addWidget(self.titleLabel)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "GraphicsProxyWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class GraphicsProxyWidget(QGraphicsProxyWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsProxyWidget, self).__init__(*args, **kwargs)\n        self.setZValue(999)\n        self.tipWidget = ToolTipWidget()\n        self.setWidget(self.tipWidget)\n        self.hide()\n    def show(self, title, points, pos):\n        self.setGeometry(QRectF(pos, self.size()))\n        self.tipWidget.updateUi(title, points)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "kind": 6,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "class ChartView(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(ChartView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setRenderHint(QPainter.Antialiasing)  # 抗锯 齿齿 \n        self.initChart()\n        self.toolTipWidget = GraphicsProxyWidget(self._chart)\n        # line\n        self.lineItem = QGraphicsLineItem(self._chart)\n        self.lineItem.setZValue(998)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtChart.ToolTip",
        "description": "QtChart.ToolTip",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(\n            \"border:1px solid green;border-radius:6px;background: %s;\" % color)",
        "detail": "QtChart.ToolTip",
        "documentation": {}
    },
    {
        "label": "CircleWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(\n            \"border:1px solid green;border-radius:6px;background: %s;\" % color)\n        self.setWidget(label)\nclass TextWidget(QGraphicsProxyWidget):",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "TextWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class TextWidget(QGraphicsProxyWidget):\n    def __init__(self, text, *args, **kwargs):\n        super(TextWidget, self).__init__(*args, **kwargs)\n        self.setWidget(QLabel(text, styleSheet=\"color:white;\"))\nclass GraphicsWidget(QGraphicsWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsWidget, self).__init__(*args, **kwargs)\n#         self.setFlags(self.ItemClipsChildrenToShape)\n        self.setZValue(999)\n        layout = QGraphicsGridLayout(self)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "GraphicsWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class GraphicsWidget(QGraphicsWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsWidget, self).__init__(*args, **kwargs)\n#         self.setFlags(self.ItemClipsChildrenToShape)\n        self.setZValue(999)\n        layout = QGraphicsGridLayout(self)\n        for row in range(6):\n            layout.addItem(CircleWidget(\"red\"), row, 0)\n            layout.addItem(TextWidget(\"red\"), row, 1)\n        self.hide()",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "ToolTipItem",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class ToolTipItem(QWidget):\n    def __init__(self, color, text, parent=None):\n        super(ToolTipItem, self).__init__(parent)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        clabel = QLabel(self)\n        clabel.setMinimumSize(12, 12)\n        clabel.setMaximumSize(12, 12)\n        clabel.setStyleSheet(\"border-radius:6px;background: rgba(%s,%s,%s,%s);\" % (\n            color.red(), color.green(), color.blue(), color.alpha()))",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "ToolTipWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class ToolTipWidget(QWidget):\n    Cache = {}\n    def __init__(self, *args, **kwargs):\n        super(ToolTipWidget, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet(\n            \"ToolTipWidget{background: rgba(50,50,50,70);}\")\n        layout = QVBoxLayout(self)\n        self.titleLabel = QLabel(self, styleSheet=\"color:white;\")\n        layout.addWidget(self.titleLabel)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "GraphicsProxyWidget",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class GraphicsProxyWidget(QGraphicsProxyWidget):\n    def __init__(self, *args, **kwargs):\n        super(GraphicsProxyWidget, self).__init__(*args, **kwargs)\n        self.setZValue(999)\n        self.tipWidget = ToolTipWidget()\n        self.setWidget(self.tipWidget)\n        self.hide()\n    def show(self, title, points, pos):\n        self.setGeometry(QRectF(pos, self.size()))\n        self.tipWidget.updateUi(title, points)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "kind": 6,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "class ChartView(QChartView):\n    def __init__(self, *args, **kwargs):\n        super(ChartView, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.setRenderHint(QPainter.Antialiasing)  # 抗锯 齿齿 \n        self.initChart()\n        self.toolTipWidget = GraphicsProxyWidget(self._chart)\n        # line\n        self.lineItem = QGraphicsLineItem(self._chart)\n        self.lineItem.setZValue(998)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtChart.ToolTip2",
        "description": "QtChart.ToolTip2",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n'''\nclass CircleWidget(QGraphicsProxyWidget):\n    def __init__(self, color, *args, **kwargs):\n        super(CircleWidget, self).__init__(*args, **kwargs)\n        label = QLabel()\n        label.setMinimumSize(12, 12)\n        label.setMaximumSize(12, 12)\n        label.setStyleSheet(\n            \"border:1px solid green;border-radius:6px;background: %s;\" % color)",
        "detail": "QtChart.ToolTip2",
        "documentation": {}
    },
    {
        "label": "GraphModifier",
        "kind": 6,
        "importPath": "QtDataVisualization.BarsVisualization",
        "description": "QtDataVisualization.BarsVisualization",
        "peekOfCode": "class GraphModifier(QObject):\n    # 卢 온도 \n    tempOulu = (\n        (-6.7, -11.7, -9.7, 3.3, 9.2, 14.0, 16.3, 17.8, 10.2, 2.1, -2.6, -0.3),\n        (-6.8, -13.3, 0.2, 1.5, 7.9, 13.4, 16.1, 15.5, 8.2, 5.4, -2.6, -0.8),\n        (-4.2, -4.0, -4.6, 1.9, 7.3, 12.5, 15.0, 12.8, 7.6, 5.1, -0.9, -1.3),\n        (-7.8, -8.8, -4.2, 0.7, 9.3, 13.2, 15.8, 15.5, 11.2, 0.6, 0.7, -8.4),\n        (-14.4, -12.1, -7.0, 2.3, 11.0, 12.6, 18.8, 13.8, 9.4, 3.9, -5.6, -13.0),\n        (-9.0, -15.2, -3.8, 2.6, 8.3, 15.9, 18.6, 14.9, 11.1, 5.3, 1.8, -0.2),\n        (-8.7, -11.3, -2.3, 0.4, 7.5, 12.2, 16.4, 14.1, 9.2, 3.1, 0.3, -12.1),",
        "detail": "QtDataVisualization.BarsVisualization",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "QtDataVisualization.BarsVisualization",
        "description": "QtDataVisualization.BarsVisualization",
        "peekOfCode": "country = QLocale.system().country()\nif country in (QLocale.China, QLocale.HongKong, QLocale.Taiwan):\n    Tr = {\n        'Average temperature': '平均温度',\n        'Average temperatures in Oulu and Helsinki, Finland (2006-2013)': '芬兰奥卢和赫尔辛基的平均气温（2006-2013）',\n        'Change label style': '更改label样式',\n        'Smooth bars': '平滑bars',\n        'Change camera preset': '更改相机预设',\n        'Show background': '显示背景',\n        'Show grid': '显示网格',",
        "detail": "QtDataVisualization.BarsVisualization",
        "documentation": {}
    },
    {
        "label": "ScatterDataModifier",
        "kind": 6,
        "importPath": "QtDataVisualization.MagneticOfSun",
        "description": "QtDataVisualization.MagneticOfSun",
        "peekOfCode": "class ScatterDataModifier(QObject):\n    verticalRange = 8.0\n    horizontalRange = verticalRange\n    ellipse_a = horizontalRange / 3.0\n    ellipse_b = verticalRange\n    doublePi = math.pi * 2.0\n    radiansToDegrees = 360.0 / doublePi\n    animationFrames = 30.0  # 动动 动 \n    def __init__(self, scatter):\n        super(ScatterDataModifier, self).__init__()",
        "detail": "QtDataVisualization.MagneticOfSun",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "QtDataVisualization.MagneticOfSun",
        "description": "QtDataVisualization.MagneticOfSun",
        "peekOfCode": "country = QLocale.system().country()\nif country in (QLocale.China, QLocale.HongKong, QLocale.Taiwan):\n    Tr = {\n        'Item rotations example - Magnetic field of the sun': '项目旋转示例-太阳磁场',\n        'Toggle animation': '开启/关闭 动画',\n        'Toggle Sun': '显示/隐藏 太阳',\n        'Field Lines (1 - 128):': '磁场线条数(1 - 128)：',\n        'Arrows per line (8 - 32):': '箭头数(8 - 32)：'\n    }\nelse:",
        "detail": "QtDataVisualization.MagneticOfSun",
        "documentation": {}
    },
    {
        "label": "ScatterDataModifier",
        "kind": 6,
        "importPath": "QtDataVisualization.ScatterVisualization",
        "description": "QtDataVisualization.ScatterVisualization",
        "peekOfCode": "class ScatterDataModifier(QObject):\n    numberOfItems = 3600\n    curveDivider = 3.0\n    lowerNumberOfItems = 900\n    lowerCurveDivider = 0.75\n    backgroundEnabledChanged = pyqtSignal(bool)\n    gridEnabledChanged = pyqtSignal(bool)\n    shadowQualityChanged = pyqtSignal(int)\n    fontChanged = pyqtSignal(QFont)\n    def __init__(self, scatter):",
        "detail": "QtDataVisualization.ScatterVisualization",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "QtDataVisualization.ScatterVisualization",
        "description": "QtDataVisualization.ScatterVisualization",
        "peekOfCode": "country = QLocale.system().country()\nif country in (QLocale.China, QLocale.HongKong, QLocale.Taiwan):\n    Tr = {\n        'A Cosine Wave': '余弦波',\n        'Change label style': '更改label样式',\n        'Smooth dots': '平滑圆点',\n        'Change camera preset': '更改相机预设',\n        'Show background': '显示背景',\n        'Show grid': '显示网格',\n        'Change dot style': '更改点样式',",
        "detail": "QtDataVisualization.ScatterVisualization",
        "documentation": {}
    },
    {
        "label": "TextBrowser",
        "kind": 6,
        "importPath": "QTextBrowser.DynamicRes",
        "description": "QTextBrowser.DynamicRes",
        "peekOfCode": "class TextBrowser(QTextBrowser):\n    NetImages = {}\n    def __init__(self, *args, **kwargs):\n        super(TextBrowser, self).__init__(*args, **kwargs)\n        self.setOpenLinks(False)  # URL을 열지 마십시오 \n    def downloadImage(self, url):\n        try:\n            self.NetImages[url] = [QByteArray(requests.get(url.toString()).content), 1]\n            print('下载完成', url)\n        except Exception as e:",
        "detail": "QTextBrowser.DynamicRes",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QTextBrowser.DynamicRes",
        "description": "QTextBrowser.DynamicRes",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.textBrowser = TextBrowser(self)\n        self.downButton = QPushButton('加载网络图片', self)\n        layout.addWidget(self.textBrowser)\n        layout.addWidget(self.downButton)\n        # 로딩 사진로드 \n        img = QImage('../Donate/weixin.png')",
        "detail": "QTextBrowser.DynamicRes",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QTextBrowser.DynamicRes",
        "description": "QTextBrowser.DynamicRes",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nclass TextBrowser(QTextBrowser):\n    NetImages = {}\n    def __init__(self, *args, **kwargs):\n        super(TextBrowser, self).__init__(*args, **kwargs)\n        self.setOpenLinks(False)  # URL을 열지 마십시오 \n    def downloadImage(self, url):\n        try:",
        "detail": "QTextBrowser.DynamicRes",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QTextBrowser.DynamicRes",
        "description": "QTextBrowser.DynamicRes",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nclass TextBrowser(QTextBrowser):\n    NetImages = {}\n    def __init__(self, *args, **kwargs):\n        super(TextBrowser, self).__init__(*args, **kwargs)\n        self.setOpenLinks(False)  # URL을 열지 마십시오 \n    def downloadImage(self, url):\n        try:\n            self.NetImages[url] = [QByteArray(requests.get(url.toString()).content), 1]",
        "detail": "QTextBrowser.DynamicRes",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QTextBrowser.DynamicRes",
        "description": "QTextBrowser.DynamicRes",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass TextBrowser(QTextBrowser):\n    NetImages = {}\n    def __init__(self, *args, **kwargs):\n        super(TextBrowser, self).__init__(*args, **kwargs)\n        self.setOpenLinks(False)  # URL을 열지 마십시오 \n    def downloadImage(self, url):\n        try:\n            self.NetImages[url] = [QByteArray(requests.get(url.toString()).content), 1]\n            print('下载完成', url)",
        "detail": "QTextBrowser.DynamicRes",
        "documentation": {}
    },
    {
        "label": "TextEdit",
        "kind": 6,
        "importPath": "QTextEdit.HighlightText",
        "description": "QTextEdit.HighlightText",
        "peekOfCode": "class TextEdit(QMainWindow):\n    def __init__(self, parent=None):\n        super(TextEdit, self).__init__(parent)\n        self.textEdit = QTextEdit(self)\n        self.setCentralWidget(self.textEdit)\n        widget = QWidget(self)\n        vb = QHBoxLayout(widget)\n        vb.setContentsMargins(0, 0, 0, 0)\n        self.findText = QLineEdit(self)\n        self.findText.setText('self')",
        "detail": "QTextEdit.HighlightText",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "QThread.InheritQThread",
        "description": "QThread.InheritQThread",
        "peekOfCode": "class Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):",
        "detail": "QThread.InheritQThread",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QThread.InheritQThread",
        "description": "QThread.InheritQThread",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.progressBar = QProgressBar(self)\n        self.progressBar.setRange(0, 100)\n        layout.addWidget(self.progressBar)\n        layout.addWidget(QPushButton('开启线程', self, clicked=self.onStart))\n        # 현재 스레드 ID. \n        print('main id', int(QThread.currentThreadId()))",
        "detail": "QThread.InheritQThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QThread.InheritQThread",
        "description": "QThread.InheritQThread",
        "peekOfCode": "__Author__ = 'By: Irony\\nQQ: 892768447\\nEmail: 892768447@qq.com'\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)",
        "detail": "QThread.InheritQThread",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QThread.InheritQThread",
        "description": "QThread.InheritQThread",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)",
        "detail": "QThread.InheritQThread",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QThread.InheritQThread",
        "description": "QThread.InheritQThread",
        "peekOfCode": "__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)\nclass Window(QWidget):",
        "detail": "QThread.InheritQThread",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "QThread.moveToThread",
        "description": "QThread.moveToThread",
        "peekOfCode": "class Worker(QObject):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):",
        "detail": "QThread.moveToThread",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QThread.moveToThread",
        "description": "QThread.moveToThread",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.progressBar = QProgressBar(self)\n        self.progressBar.setRange(0, 100)\n        layout.addWidget(self.progressBar)\n        layout.addWidget(QPushButton('开启线程', self, clicked=self.onStart))\n        # 현재 스레드 ID. \n        print('main id', int(QThread.currentThreadId()))",
        "detail": "QThread.moveToThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QThread.moveToThread",
        "description": "QThread.moveToThread",
        "peekOfCode": "__Author__ = 'By: Irony\\nQQ: 892768447\\nEmail: 892768447@qq.com'\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QObject):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)",
        "detail": "QThread.moveToThread",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QThread.moveToThread",
        "description": "QThread.moveToThread",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QObject):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)",
        "detail": "QThread.moveToThread",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QThread.moveToThread",
        "description": "QThread.moveToThread",
        "peekOfCode": "__Version__ = 1.0\nclass Worker(QObject):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        for i in range(1, 101):\n            print('value', i)\n            self.valueChanged.emit(i)\n            QThread.sleep(1)\nclass Window(QWidget):",
        "detail": "QThread.moveToThread",
        "documentation": {}
    },
    {
        "label": "Thread",
        "kind": 6,
        "importPath": "QThread.QuitThread",
        "description": "QThread.QuitThread",
        "peekOfCode": "class Thread(QThread):\n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        i = 0\n        while i < 101 and not self.isInterruptionRequested():\n            print('value', i, time())\n            i += 1\n            QThread.msleep(500)\n        print('thread quit')\nif __name__ == '__main__':",
        "detail": "QThread.QuitThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QThread.QuitThread",
        "description": "QThread.QuitThread",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport sys\nfrom time import time\nfrom PyQt5.QtCore import QThread, QCoreApplication, QTimer\nclass Thread(QThread):\n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        i = 0",
        "detail": "QThread.QuitThread",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QThread.QuitThread",
        "description": "QThread.QuitThread",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport sys\nfrom time import time\nfrom PyQt5.QtCore import QThread, QCoreApplication, QTimer\nclass Thread(QThread):\n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        i = 0\n        while i < 101 and not self.isInterruptionRequested():",
        "detail": "QThread.QuitThread",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QThread.QuitThread",
        "description": "QThread.QuitThread",
        "peekOfCode": "__Version__ = 'Version 1.0'\nimport sys\nfrom time import time\nfrom PyQt5.QtCore import QThread, QCoreApplication, QTimer\nclass Thread(QThread):\n    def run(self):\n        print('thread id', int(QThread.currentThreadId()))\n        i = 0\n        while i < 101 and not self.isInterruptionRequested():\n            print('value', i, time())",
        "detail": "QThread.QuitThread",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "QThread.SuspendThread",
        "description": "QThread.SuspendThread",
        "peekOfCode": "class Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    handle = -1\n    def run(self):\n        try:\n            self.handle = ctypes.windll.kernel32.OpenThread(  # @UndefinedVariable\n                win32con.PROCESS_ALL_ACCESS, False, int(QThread.currentThreadId()))\n        except Exception as e:\n            print('get thread handle failed', e)\n        print('thread id', int(QThread.currentThreadId()))",
        "detail": "QThread.SuspendThread",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QThread.SuspendThread",
        "description": "QThread.SuspendThread",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.progressBar = QProgressBar(self)\n        self.progressBar.setRange(0, 100)\n        layout.addWidget(self.progressBar)\n        self.startButton = QPushButton('开启线程', self, clicked=self.onStart)\n        layout.addWidget(self.startButton)\n        self.suspendButton = QPushButton(",
        "detail": "QThread.SuspendThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QThread.SuspendThread",
        "description": "QThread.SuspendThread",
        "peekOfCode": "__Author__ = 'By: Irony\\nQQ: 892768447\\nEmail: 892768447@qq.com'\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    handle = -1\n    def run(self):\n        try:\n            self.handle = ctypes.windll.kernel32.OpenThread(  # @UndefinedVariable\n                win32con.PROCESS_ALL_ACCESS, False, int(QThread.currentThreadId()))",
        "detail": "QThread.SuspendThread",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QThread.SuspendThread",
        "description": "QThread.SuspendThread",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    handle = -1\n    def run(self):\n        try:\n            self.handle = ctypes.windll.kernel32.OpenThread(  # @UndefinedVariable\n                win32con.PROCESS_ALL_ACCESS, False, int(QThread.currentThreadId()))\n        except Exception as e:",
        "detail": "QThread.SuspendThread",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QThread.SuspendThread",
        "description": "QThread.SuspendThread",
        "peekOfCode": "__Version__ = 1.0\nclass Worker(QThread):\n    valueChanged = pyqtSignal(int)  # 값 변경 신호 \n    handle = -1\n    def run(self):\n        try:\n            self.handle = ctypes.windll.kernel32.OpenThread(  # @UndefinedVariable\n                win32con.PROCESS_ALL_ACCESS, False, int(QThread.currentThreadId()))\n        except Exception as e:\n            print('get thread handle failed', e)",
        "detail": "QThread.SuspendThread",
        "documentation": {}
    },
    {
        "label": "Thread",
        "kind": 6,
        "importPath": "QThread.WakeupThread",
        "description": "QThread.WakeupThread",
        "peekOfCode": "class Thread(QThread):\n    valueChange = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(Thread, self).__init__(*args, **kwargs)\n        self._isPause = False\n        self._value = 0\n        self.cond = QWaitCondition()\n        self.mutex = QMutex()\n    def pause(self):\n        self._isPause = True",
        "detail": "QThread.WakeupThread",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QThread.WakeupThread",
        "description": "QThread.WakeupThread",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.progressBar = QProgressBar(self)\n        layout.addWidget(self.progressBar)\n        layout.addWidget(QPushButton('休眠', self, clicked=self.doWait))\n        layout.addWidget(QPushButton('唤醒', self, clicked=self.doWake))\n        self.t = Thread(self)\n        self.t.valueChange.connect(self.progressBar.setValue)",
        "detail": "QThread.WakeupThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QThread.WakeupThread",
        "description": "QThread.WakeupThread",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Thread(QThread):\n    valueChange = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(Thread, self).__init__(*args, **kwargs)\n        self._isPause = False",
        "detail": "QThread.WakeupThread",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QThread.WakeupThread",
        "description": "QThread.WakeupThread",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass Thread(QThread):\n    valueChange = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(Thread, self).__init__(*args, **kwargs)\n        self._isPause = False\n        self._value = 0\n        self.cond = QWaitCondition()\n        self.mutex = QMutex()",
        "detail": "QThread.WakeupThread",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QThread.WakeupThread",
        "description": "QThread.WakeupThread",
        "peekOfCode": "__Version__ = 1.0\nclass Thread(QThread):\n    valueChange = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(Thread, self).__init__(*args, **kwargs)\n        self._isPause = False\n        self._value = 0\n        self.cond = QWaitCondition()\n        self.mutex = QMutex()\n    def pause(self):",
        "detail": "QThread.WakeupThread",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtQuick.FlatStyle",
        "description": "QtQuick.FlatStyle",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\nif __name__ == '__main__':\n    try:\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling)\n    except:\n        pass\n    os.chdir('FlatStyle')\n    app = QApplication(sys.argv)\n    engine = QQmlApplicationEngine()",
        "detail": "QtQuick.FlatStyle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtQuick.FlatStyle",
        "description": "QtQuick.FlatStyle",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\nif __name__ == '__main__':\n    try:\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling)\n    except:\n        pass\n    os.chdir('FlatStyle')\n    app = QApplication(sys.argv)\n    engine = QQmlApplicationEngine()\n    engine.objectCreated.connect(",
        "detail": "QtQuick.FlatStyle",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtQuick.Signals",
        "description": "QtQuick.Signals",
        "peekOfCode": "class Window(QWidget):\n    # 시간 신호를 정의하십시오 \n    timerSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('Python调用qml中的函数',\n                                     self, clicked=self.callQmlFunc))\n        self.resultView = QTextBrowser(self)\n        layout.addWidget(self.resultView)",
        "detail": "QtQuick.Signals",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtQuick.Signals",
        "description": "QtQuick.Signals",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\nQML = \"\"\"import QtQuick 2.0\nimport QtQuick.Controls 1.6\nimport QtQuick.Layouts 1.3\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 400\n    id: root",
        "detail": "QtQuick.Signals",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtQuick.Signals",
        "description": "QtQuick.Signals",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\nQML = \"\"\"import QtQuick 2.0\nimport QtQuick.Controls 1.6\nimport QtQuick.Layouts 1.3\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 400\n    id: root\n    title: \"editor\"",
        "detail": "QtQuick.Signals",
        "documentation": {}
    },
    {
        "label": "QML",
        "kind": 5,
        "importPath": "QtQuick.Signals",
        "description": "QtQuick.Signals",
        "peekOfCode": "QML = \"\"\"import QtQuick 2.0\nimport QtQuick.Controls 1.6\nimport QtQuick.Layouts 1.3\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 400\n    id: root\n    title: \"editor\"\n    // 定义信号槽",
        "detail": "QtQuick.Signals",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "QTreeWidget.Lib.testTree",
        "description": "QTreeWidget.Lib.testTree",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(719, 544)\n        self.treeWidget = QtWidgets.QTreeWidget(Form)\n        self.treeWidget.setGeometry(QtCore.QRect(80, 80, 256, 192))\n        self.treeWidget.setObjectName(\"treeWidget\")\n        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)\n        item_0.setCheckState(0, QtCore.Qt.Unchecked)\n        item_1 = QtWidgets.QTreeWidgetItem(item_0)",
        "detail": "QTreeWidget.Lib.testTree",
        "documentation": {}
    },
    {
        "label": "NoColorItemDelegate",
        "kind": 6,
        "importPath": "QTreeWidget.ParentNodeForbid",
        "description": "QTreeWidget.ParentNodeForbid",
        "peekOfCode": "class NoColorItemDelegate(QStyledItemDelegate):\n    def paint(self, painter, option, index):\n        if option.state & QStyle.State_HasFocus:\n            # 取 消 消 虚 \n            option.state = option.state & ~ QStyle.State_HasFocus\n        if option.state & QStyle.State_MouseOver and index.data(Qt.UserRole + 1):\n            # 마우스 호버 색상을 표시하지 마십시오 \n            option.state = option.state & ~ QStyle.State_MouseOver\n        super(NoColorItemDelegate, self).paint(painter, option, index)\nclass Window(QTreeWidget):",
        "detail": "QTreeWidget.ParentNodeForbid",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QTreeWidget.ParentNodeForbid",
        "description": "QTreeWidget.ParentNodeForbid",
        "peekOfCode": "class Window(QTreeWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setItemDelegateForColumn(0, NoColorItemDelegate(self))\n        # 体 节 (不 选) \n        pitem1 = QTreeWidgetItem(self, ['parent item 1'])\n        # 设置 不 不 \n        pitem1.setFlags(pitem1.flags() & ~Qt.ItemIsSelectable)\n        # 마우스 이벤트를 차폐하기위한 식별자를 설정합니다 \n        pitem1.setData(0, Qt.UserRole + 1, True)",
        "detail": "QTreeWidget.ParentNodeForbid",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QTreeWidget.ParentNodeForbid",
        "description": "QTreeWidget.ParentNodeForbid",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 1.0\nclass NoColorItemDelegate(QStyledItemDelegate):\n    def paint(self, painter, option, index):\n        if option.state & QStyle.State_HasFocus:\n            # 取 消 消 虚 \n            option.state = option.state & ~ QStyle.State_HasFocus\n        if option.state & QStyle.State_MouseOver and index.data(Qt.UserRole + 1):\n            # 마우스 호버 색상을 표시하지 마십시오 ",
        "detail": "QTreeWidget.ParentNodeForbid",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QTreeWidget.ParentNodeForbid",
        "description": "QTreeWidget.ParentNodeForbid",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 1.0\nclass NoColorItemDelegate(QStyledItemDelegate):\n    def paint(self, painter, option, index):\n        if option.state & QStyle.State_HasFocus:\n            # 取 消 消 虚 \n            option.state = option.state & ~ QStyle.State_HasFocus\n        if option.state & QStyle.State_MouseOver and index.data(Qt.UserRole + 1):\n            # 마우스 호버 색상을 표시하지 마십시오 \n            option.state = option.state & ~ QStyle.State_MouseOver",
        "detail": "QTreeWidget.ParentNodeForbid",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QTreeWidget.ParentNodeForbid",
        "description": "QTreeWidget.ParentNodeForbid",
        "peekOfCode": "__Version__ = 1.0\nclass NoColorItemDelegate(QStyledItemDelegate):\n    def paint(self, painter, option, index):\n        if option.state & QStyle.State_HasFocus:\n            # 取 消 消 虚 \n            option.state = option.state & ~ QStyle.State_HasFocus\n        if option.state & QStyle.State_MouseOver and index.data(Qt.UserRole + 1):\n            # 마우스 호버 색상을 표시하지 마십시오 \n            option.state = option.state & ~ QStyle.State_MouseOver\n        super(NoColorItemDelegate, self).paint(painter, option, index)",
        "detail": "QTreeWidget.ParentNodeForbid",
        "documentation": {}
    },
    {
        "label": "ItemWidget",
        "kind": 6,
        "importPath": "QTreeWidget.ParsingJson",
        "description": "QTreeWidget.ParsingJson",
        "peekOfCode": "class ItemWidget(QWidget):\n    \"\"\"自定义的item\"\"\"\n    def __init__(self, text, badge, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLabel(text, self, styleSheet='color: white;'))\n        layout.addSpacerItem(QSpacerItem(\n            60, 1, QSizePolicy.Maximum, QSizePolicy.Minimum))\n        if badge and len(badge) == 2:  # # 面 标 ",
        "detail": "QTreeWidget.ParsingJson",
        "documentation": {}
    },
    {
        "label": "JsonTreeWidget",
        "kind": 6,
        "importPath": "QTreeWidget.ParsingJson",
        "description": "QTreeWidget.ParsingJson",
        "peekOfCode": "class JsonTreeWidget(QTreeWidget):\n    def __init__(self, *args, **kwargs):\n        super(JsonTreeWidget, self).__init__(*args, **kwargs)\n        self.setEditTriggers(self.NoEditTriggers)\n        self.header().setVisible(False)\n        # 帮 点 点 单 事 事 \n        self.itemClicked.connect(self.onItemClicked)\n    def onItemClicked(self, item):\n        \"\"\"item单击事件\"\"\"\n        if item.url:  # URL을 여는 브라우저를 호출하십시오 ",
        "detail": "QTreeWidget.ParsingJson",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QTreeWidget.ParsingJson",
        "description": "QTreeWidget.ParsingJson",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ItemWidget(QWidget):\n    \"\"\"自定义的item\"\"\"\n    def __init__(self, text, badge, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)",
        "detail": "QTreeWidget.ParsingJson",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QTreeWidget.ParsingJson",
        "description": "QTreeWidget.ParsingJson",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ItemWidget(QWidget):\n    \"\"\"自定义的item\"\"\"\n    def __init__(self, text, badge, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLabel(text, self, styleSheet='color: white;'))\n        layout.addSpacerItem(QSpacerItem(",
        "detail": "QTreeWidget.ParsingJson",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QTreeWidget.ParsingJson",
        "description": "QTreeWidget.ParsingJson",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ItemWidget(QWidget):\n    \"\"\"自定义的item\"\"\"\n    def __init__(self, text, badge, *args, **kwargs):\n        super(ItemWidget, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(QLabel(text, self, styleSheet='color: white;'))\n        layout.addSpacerItem(QSpacerItem(\n            60, 1, QSizePolicy.Maximum, QSizePolicy.Minimum))",
        "detail": "QTreeWidget.ParsingJson",
        "documentation": {}
    },
    {
        "label": "graphAnalysis",
        "kind": 6,
        "importPath": "QTreeWidget.testTreeWidget",
        "description": "QTreeWidget.testTreeWidget",
        "peekOfCode": "class graphAnalysis(QDialog, Ui_Form):\n    def __init__(self):\n        super(graphAnalysis, self).__init__()\n        self.setupUi(self)\n        # 상위 노드를 클릭하십시오 \n        self.treeWidget.itemChanged.connect(self.handleChanged)\n    def handleChanged(self, item, column):\n        count = item.childCount()\n        if item.checkState(column) == Qt.Checked:\n            for index in range(count):",
        "detail": "QTreeWidget.testTreeWidget",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "QtRemoteObjects.modelview.modelviewclient",
        "description": "QtRemoteObjects.modelview.modelviewclient",
        "peekOfCode": "app = QApplication(sys.argv)\nnode = QRemoteObjectNode(QUrl('local:registry'))\nnode.setHeartbeatInterval(1000)\nview = QTreeView()\nview.setWindowTitle(\"RemoteView\")\nview.resize(640, 480)\nmodel = node.acquireModel('RemoteModel')\nview.setModel(model)\nview.show();\nsys.exit(app.exec_())",
        "detail": "QtRemoteObjects.modelview.modelviewclient",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "QtRemoteObjects.modelview.modelviewclient",
        "description": "QtRemoteObjects.modelview.modelviewclient",
        "peekOfCode": "node = QRemoteObjectNode(QUrl('local:registry'))\nnode.setHeartbeatInterval(1000)\nview = QTreeView()\nview.setWindowTitle(\"RemoteView\")\nview.resize(640, 480)\nmodel = node.acquireModel('RemoteModel')\nview.setModel(model)\nview.show();\nsys.exit(app.exec_())",
        "detail": "QtRemoteObjects.modelview.modelviewclient",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 5,
        "importPath": "QtRemoteObjects.modelview.modelviewclient",
        "description": "QtRemoteObjects.modelview.modelviewclient",
        "peekOfCode": "view = QTreeView()\nview.setWindowTitle(\"RemoteView\")\nview.resize(640, 480)\nmodel = node.acquireModel('RemoteModel')\nview.setModel(model)\nview.show();\nsys.exit(app.exec_())",
        "detail": "QtRemoteObjects.modelview.modelviewclient",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "QtRemoteObjects.modelview.modelviewclient",
        "description": "QtRemoteObjects.modelview.modelviewclient",
        "peekOfCode": "model = node.acquireModel('RemoteModel')\nview.setModel(model)\nview.show();\nsys.exit(app.exec_())",
        "detail": "QtRemoteObjects.modelview.modelviewclient",
        "documentation": {}
    },
    {
        "label": "TimerHandler",
        "kind": 6,
        "importPath": "QtRemoteObjects.modelview.modelviewserver",
        "description": "QtRemoteObjects.modelview.modelviewserver",
        "peekOfCode": "class TimerHandler(QObject):\n    def __init__(self, model, parent=None):\n        super().__init__(parent)\n        self._model = model\n    @pyqtSlot()\n    def changeData(self):\n        for i in range(10, 50):\n            self._model.setData(self._model.index(i, 1), QColor(Qt.blue),\n                    Qt.BackgroundRole)\n    @pyqtSlot()",
        "detail": "QtRemoteObjects.modelview.modelviewserver",
        "documentation": {}
    },
    {
        "label": "addChild",
        "kind": 2,
        "importPath": "QtRemoteObjects.modelview.modelviewserver",
        "description": "QtRemoteObjects.modelview.modelviewserver",
        "peekOfCode": "def addChild(numChildren, nestingLevel):\n    result = []\n    if nestingLevel == 0:\n        return result\n    for i in range(numChildren):\n        child = QStandardItem(\n                \"Child num {}, nesting level {}\".format(i + 1, nestingLevel))\n        if i == 0:\n            child.appendRow(addChild(numChildren, nestingLevel - 1))\n        result.append(child)",
        "detail": "QtRemoteObjects.modelview.modelviewserver",
        "documentation": {}
    },
    {
        "label": "DynamicClient",
        "kind": 6,
        "importPath": "QtRemoteObjects.simpleswitch.directconnectdynamicclient",
        "description": "QtRemoteObjects.simpleswitch.directconnectdynamicclient",
        "peekOfCode": "class DynamicClient(QObject):\n    # This signal is connected with server_slot() slot of the source object and\n    # echoes back the switch state received from the source.\n    echoSwitchState = pyqtSignal(bool)\n    def __init__(self, replica, parent=None):\n        super().__init__(parent)\n        self._replica = replica\n        self._clientSwitchState = False\n        replica.initialized.connect(self.initConnection)\n    @pyqtSlot(bool)",
        "detail": "QtRemoteObjects.simpleswitch.directconnectdynamicclient",
        "documentation": {}
    },
    {
        "label": "SimpleSwitch",
        "kind": 6,
        "importPath": "QtRemoteObjects.simpleswitch.directconnectdynamicserver",
        "description": "QtRemoteObjects.simpleswitch.directconnectdynamicserver",
        "peekOfCode": "class SimpleSwitch(QObject):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self._currState = False\n        self._stateChangeTimer = QTimer(self)\n        self._stateChangeTimer.timeout.connect(self._timeout)\n        self._stateChangeTimer.start(2000)\n        print(\"Source node started\")\n    # PyQt does not support the use of static source types defined in .rep\n    # files.  However we can manually specify a dynamic type that matches a",
        "detail": "QtRemoteObjects.simpleswitch.directconnectdynamicserver",
        "documentation": {}
    },
    {
        "label": "DynamicClient",
        "kind": 6,
        "importPath": "QtRemoteObjects.simpleswitch.registryconnecteddynamicclient",
        "description": "QtRemoteObjects.simpleswitch.registryconnecteddynamicclient",
        "peekOfCode": "class DynamicClient(QObject):\n    # This signal is connected with server_slot() slot of the source object and\n    # echoes back the switch state received from the source.\n    echoSwitchState = pyqtSignal(bool)\n    def __init__(self, replica, parent=None):\n        super().__init__(parent)\n        self._replica = replica\n        self._clientSwitchState = False\n        replica.initialized.connect(self.initConnection)\n    @pyqtSlot(bool)",
        "detail": "QtRemoteObjects.simpleswitch.registryconnecteddynamicclient",
        "documentation": {}
    },
    {
        "label": "SimpleSwitch",
        "kind": 6,
        "importPath": "QtRemoteObjects.simpleswitch.registryconnecteddynamicserver",
        "description": "QtRemoteObjects.simpleswitch.registryconnecteddynamicserver",
        "peekOfCode": "class SimpleSwitch(QObject):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self._currState = False\n        self._stateChangeTimer = QTimer(self)\n        self._stateChangeTimer.timeout.connect(self._timeout)\n        self._stateChangeTimer.start(2000)\n        print(\"Source node started\")\n    # PyQt does not support the use of static source types defined in .rep\n    # files.  However we can manually specify a dynamic type that matches a",
        "detail": "QtRemoteObjects.simpleswitch.registryconnecteddynamicserver",
        "documentation": {}
    },
    {
        "label": "WindowMaster",
        "kind": 6,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "description": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "peekOfCode": "class WindowMaster(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls\n    )\n    def __init__(self, *args, **kwargs):\n        super(WindowMaster, self).__init__(*args, **kwargs)",
        "detail": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "description": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nimport sys\nclass WindowMaster(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text",
        "detail": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "description": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nimport sys\nclass WindowMaster(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls",
        "detail": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "description": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "peekOfCode": "__Version__ = 1.0\nimport sys\nclass WindowMaster(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls\n    )",
        "detail": "QtRemoteObjects.SyncUi.ClipboardMaster",
        "documentation": {}
    },
    {
        "label": "WindowSlave",
        "kind": 6,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "description": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "peekOfCode": "class WindowSlave(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls\n        bool, QVariant,  # files\n    )\n    def __init__(self, *args, **kwargs):",
        "detail": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "description": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowSlave(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls",
        "detail": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "description": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowSlave(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls\n        bool, QVariant,  # files",
        "detail": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "description": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "peekOfCode": "__Version__ = 1.0\nclass WindowSlave(QTextBrowser):\n    SignalUpdateMimeData = pyqtSignal(\n        bool, QVariant,  # color\n        bool, QVariant,  # html\n        bool, QVariant,  # image\n        bool, QVariant,  # text\n        bool, QVariant,  # urls\n        bool, QVariant,  # files\n    )",
        "detail": "QtRemoteObjects.SyncUi.ClipboardSlave",
        "documentation": {}
    },
    {
        "label": "WindowMaster",
        "kind": 6,
        "importPath": "QtRemoteObjects.SyncUi.WindowMaster",
        "description": "QtRemoteObjects.SyncUi.WindowMaster",
        "peekOfCode": "class WindowMaster(QWidget):\n    # 상자 내용 변경 신호를 입력하십시오 \n    editValueChanged = pyqtSignal(str)\n    # 变化 信号 信号 \n    checkToggled = pyqtSignal(bool)\n    # 成度 变 变 变 信号. \n    progressValueChanged = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(WindowMaster, self).__init__(*args, **kwargs)\n        self.setupUi()",
        "detail": "QtRemoteObjects.SyncUi.WindowMaster",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowMaster",
        "description": "QtRemoteObjects.SyncUi.WindowMaster",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowMaster(QWidget):\n    # 상자 내용 변경 신호를 입력하십시오 \n    editValueChanged = pyqtSignal(str)\n    # 变化 信号 信号 \n    checkToggled = pyqtSignal(bool)\n    # 成度 变 变 变 信号. \n    progressValueChanged = pyqtSignal(int)",
        "detail": "QtRemoteObjects.SyncUi.WindowMaster",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowMaster",
        "description": "QtRemoteObjects.SyncUi.WindowMaster",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowMaster(QWidget):\n    # 상자 내용 변경 신호를 입력하십시오 \n    editValueChanged = pyqtSignal(str)\n    # 变化 信号 信号 \n    checkToggled = pyqtSignal(bool)\n    # 成度 变 变 变 信号. \n    progressValueChanged = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):",
        "detail": "QtRemoteObjects.SyncUi.WindowMaster",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowMaster",
        "description": "QtRemoteObjects.SyncUi.WindowMaster",
        "peekOfCode": "__Version__ = 1.0\nclass WindowMaster(QWidget):\n    # 상자 내용 변경 신호를 입력하십시오 \n    editValueChanged = pyqtSignal(str)\n    # 变化 信号 信号 \n    checkToggled = pyqtSignal(bool)\n    # 成度 变 变 变 信号. \n    progressValueChanged = pyqtSignal(int)\n    def __init__(self, *args, **kwargs):\n        super(WindowMaster, self).__init__(*args, **kwargs)",
        "detail": "QtRemoteObjects.SyncUi.WindowMaster",
        "documentation": {}
    },
    {
        "label": "WindowSlave",
        "kind": 6,
        "importPath": "QtRemoteObjects.SyncUi.WindowSlave",
        "description": "QtRemoteObjects.SyncUi.WindowSlave",
        "peekOfCode": "class WindowSlave(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WindowSlave, self).__init__(*args, **kwargs)\n        self.setupUi()\n        # 마스터 노드 가입 \n        node = QRemoteObjectNode(parent=self)\n        node.connectToNode(QUrl('local:WindowMaster'))\n        # windowmaster object를 얻으십시오 \n        self.windowMaster = node.acquireDynamic('WindowMaster')\n        # 초기화, 바인딩 신호 등으로 이동할 수 있습니다. ",
        "detail": "QtRemoteObjects.SyncUi.WindowSlave",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowSlave",
        "description": "QtRemoteObjects.SyncUi.WindowSlave",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowSlave(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WindowSlave, self).__init__(*args, **kwargs)\n        self.setupUi()\n        # 마스터 노드 가입 \n        node = QRemoteObjectNode(parent=self)\n        node.connectToNode(QUrl('local:WindowMaster'))",
        "detail": "QtRemoteObjects.SyncUi.WindowSlave",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowSlave",
        "description": "QtRemoteObjects.SyncUi.WindowSlave",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass WindowSlave(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WindowSlave, self).__init__(*args, **kwargs)\n        self.setupUi()\n        # 마스터 노드 가입 \n        node = QRemoteObjectNode(parent=self)\n        node.connectToNode(QUrl('local:WindowMaster'))\n        # windowmaster object를 얻으십시오 ",
        "detail": "QtRemoteObjects.SyncUi.WindowSlave",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtRemoteObjects.SyncUi.WindowSlave",
        "description": "QtRemoteObjects.SyncUi.WindowSlave",
        "peekOfCode": "__Version__ = 1.0\nclass WindowSlave(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(WindowSlave, self).__init__(*args, **kwargs)\n        self.setupUi()\n        # 마스터 노드 가입 \n        node = QRemoteObjectNode(parent=self)\n        node.connectToNode(QUrl('local:WindowMaster'))\n        # windowmaster object를 얻으십시오 \n        self.windowMaster = node.acquireDynamic('WindowMaster')",
        "detail": "QtRemoteObjects.SyncUi.WindowSlave",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtWinExtras.TaskbarProgress",
        "description": "QtWinExtras.TaskbarProgress",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 获取任务栏按钮\n        self.taskButton = QWinTaskbarButton(self)\n        # 获取任务栏进度条\n        self.taskProgress = self.taskButton.progress()\n        # 定时器模拟进度\n        self.timerProgress = QTimer(self)\n        self.timerProgress.timeout.connect(self.update_progress)",
        "detail": "QtWinExtras.TaskbarProgress",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtWinExtras.TaskbarProgress",
        "description": "QtWinExtras.TaskbarProgress",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QApplication, QGridLayout, QSpinBox, QPushButton, QLabel\nfrom PyQt5.QtWinExtras import QWinTaskbarButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):",
        "detail": "QtWinExtras.TaskbarProgress",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtWinExtras.TaskbarProgress",
        "description": "QtWinExtras.TaskbarProgress",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QApplication, QGridLayout, QSpinBox, QPushButton, QLabel\nfrom PyQt5.QtWinExtras import QWinTaskbarButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QtWinExtras.TaskbarProgress",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtWinExtras.TaskbarProgress",
        "description": "QtWinExtras.TaskbarProgress",
        "peekOfCode": "__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QApplication, QGridLayout, QSpinBox, QPushButton, QLabel\nfrom PyQt5.QtWinExtras import QWinTaskbarButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 获取任务栏按钮",
        "detail": "QtWinExtras.TaskbarProgress",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QtWinExtras.ThumbnailToolBar",
        "description": "QtWinExtras.ThumbnailToolBar",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.countPrev = 0\n        self.countNext = 0\n        self.init_ui()\n    def init_ui(self):\n        layout = QVBoxLayout(self)\n        self.labelPrev = QLabel(self)\n        self.labelControl = QLabel('暂停播放', self)",
        "detail": "QtWinExtras.ThumbnailToolBar",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QtWinExtras.ThumbnailToolBar",
        "description": "QtWinExtras.ThumbnailToolBar",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtWidgets import QWidget, QApplication, QLabel, QStyle, QVBoxLayout\nfrom PyQt5.QtWinExtras import QWinThumbnailToolBar, QWinThumbnailToolButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QtWinExtras.ThumbnailToolBar",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QtWinExtras.ThumbnailToolBar",
        "description": "QtWinExtras.ThumbnailToolBar",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtWidgets import QWidget, QApplication, QLabel, QStyle, QVBoxLayout\nfrom PyQt5.QtWinExtras import QWinThumbnailToolBar, QWinThumbnailToolButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.countPrev = 0",
        "detail": "QtWinExtras.ThumbnailToolBar",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QtWinExtras.ThumbnailToolBar",
        "description": "QtWinExtras.ThumbnailToolBar",
        "peekOfCode": "__Version__ = 'Version 1.0'\nimport cgitb\nimport sys\nfrom PyQt5.QtWidgets import QWidget, QApplication, QLabel, QStyle, QVBoxLayout\nfrom PyQt5.QtWinExtras import QWinThumbnailToolBar, QWinThumbnailToolButton\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.countPrev = 0\n        self.countNext = 0",
        "detail": "QtWinExtras.ThumbnailToolBar",
        "documentation": {}
    },
    {
        "label": "RequestInterceptor",
        "kind": 6,
        "importPath": "QWebEngineView.BlockRequest",
        "description": "QWebEngineView.BlockRequest",
        "peekOfCode": "class RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:\n            # 가로 촬영 Baidu Alliance 광고 \n            print('block:', url)\n            info.block(True)\nclass Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QWebEngineView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.BlockRequest",
        "description": "QWebEngineView.BlockRequest",
        "peekOfCode": "class Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        QWebEngineProfile.defaultProfile().setRequestInterceptor(RequestInterceptor(self))\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()",
        "detail": "QWebEngineView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequest",
        "description": "QWebEngineView.BlockRequest",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:\n            # 가로 촬영 Baidu Alliance 광고 \n            print('block:', url)\n            info.block(True)",
        "detail": "QWebEngineView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequest",
        "description": "QWebEngineView.BlockRequest",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:\n            # 가로 촬영 Baidu Alliance 광고 \n            print('block:', url)\n            info.block(True)\nclass Window(QWebEngineView):",
        "detail": "QWebEngineView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequest",
        "description": "QWebEngineView.BlockRequest",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:\n            # 가로 촬영 Baidu Alliance 광고 \n            print('block:', url)\n            info.block(True)\nclass Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):",
        "detail": "QWebEngineView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "UrlSchemeHandler",
        "kind": 6,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "class UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    def requestStarted(self, job):\n        url = job.requestUrl().toString()\n        if url == 'myurl://png':\n            file = QFile('Data/app.png', job)\n            file.open(QIODevice.ReadOnly)\n            job.reply(b'image/png', file)\n# 가난자를 요청하십시오 \nclass RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "RequestInterceptor",
        "kind": 6,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "class RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl().toString()\n        # 여기서 데모는 JS 파일을 가로 채는 것과 같이 자유롭게 재생할 수있는 모든 PNG 그림을 가로 챌 수 있습니다. \n        if url.endswith('.png'):\n            # Ration은 자체 URL 프로토콜로 리디렉션하는 것입니다. \n            info.redirect(QUrl('myurl://png'))\nclass Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "class Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 먼저 기본 URL 프로토콜을 가져옵니다 \n        h1 = QWebEngineUrlScheme.schemeByName(b'http')\n        h2 = QWebEngineUrlScheme.schemeByName(b'https')\n        # 여기에서 로컬 파일과 도메인 간 지원을 수정해야합니다. \n        CorsEnabled = 0x80  # 5.14 증가 \n        h1.setFlags(h1.flags() |",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\n# 사용자 정의 URL 프로토콜 헤더 \nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    def requestStarted(self, job):\n        url = job.requestUrl().toString()\n        if url == 'myurl://png':\n            file = QFile('Data/app.png', job)\n            file.open(QIODevice.ReadOnly)",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\n# 사용자 정의 URL 프로토콜 헤더 \nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    def requestStarted(self, job):\n        url = job.requestUrl().toString()\n        if url == 'myurl://png':\n            file = QFile('Data/app.png', job)\n            file.open(QIODevice.ReadOnly)\n            job.reply(b'image/png', file)",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.BlockRequestData",
        "description": "QWebEngineView.BlockRequestData",
        "peekOfCode": "__Version__ = 'Version 1.0'\n# 사용자 정의 URL 프로토콜 헤더 \nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    def requestStarted(self, job):\n        url = job.requestUrl().toString()\n        if url == 'myurl://png':\n            file = QFile('Data/app.png', job)\n            file.open(QIODevice.ReadOnly)\n            job.reply(b'image/png', file)\n# 가난자를 요청하십시오 ",
        "detail": "QWebEngineView.BlockRequestData",
        "documentation": {}
    },
    {
        "label": "WebEngineView",
        "kind": 6,
        "importPath": "QWebEngineView.GetCookie",
        "description": "QWebEngineView.GetCookie",
        "peekOfCode": "class WebEngineView(QWebEngineView):\n    DomainCookies = {}  # 存 d 的 的 的 乐乐 K K. \n    PathCookies = {}  # 存 d d + 경로 키 - 값 \n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')\n        self.cookieView.show()",
        "detail": "QWebEngineView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.GetCookie",
        "description": "QWebEngineView.GetCookie",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass WebEngineView(QWebEngineView):\n    DomainCookies = {}  # 存 d 的 的 的 乐乐 K K. \n    PathCookies = {}  # 存 d d + 경로 키 - 값 \n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)",
        "detail": "QWebEngineView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.GetCookie",
        "description": "QWebEngineView.GetCookie",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass WebEngineView(QWebEngineView):\n    DomainCookies = {}  # 存 d 的 的 的 乐乐 K K. \n    PathCookies = {}  # 存 d d + 경로 키 - 값 \n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)",
        "detail": "QWebEngineView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.GetCookie",
        "description": "QWebEngineView.GetCookie",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass WebEngineView(QWebEngineView):\n    DomainCookies = {}  # 存 d 的 的 的 乐乐 K K. \n    PathCookies = {}  # 存 d d + 경로 키 - 값 \n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')",
        "detail": "QWebEngineView.GetCookie",
        "documentation": {}
    },
    {
        "label": "UrlSchemeHandler",
        "kind": 6,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "class UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    AttrType = QNetworkRequest.User + 1\n    def __init__(self, *args, **kwargs):\n        super(UrlSchemeHandler, self).__init__(*args, **kwargs)\n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)\n    def requestStarted(self, request):\n        # \n        # request.fail(QWebEngineUrlRequestJob.RequestDenied)\n        # print('initiator:', request.initiator())",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "RequestInterceptor",
        "kind": 6,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "class RequestInterceptor(QWebEngineUrlRequestInterceptor):\n    def interceptRequest(self, info):\n        url = info.requestUrl()\n        if url.scheme() == 'http':\n            # 重 向 \n            url.setScheme('myurl')\n            info.redirect(url)\n        elif url.scheme() == 'https':\n            # 重 向 \n            url.setScheme('myurls')",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "class Window(QWebEngineView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        profile = QWebEngineProfile.defaultProfile()\n        # 먼저 기본 URL 프로토콜을 가져옵니다 \n        o_http = QWebEngineUrlScheme.schemeByName(b'http')\n        o_https = QWebEngineUrlScheme.schemeByName(b'https')\n        print('scheme:', o_http, o_https)\n        # 여기에서 로컬 파일과 도메인 간 지원을 수정해야합니다. ",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    AttrType = QNetworkRequest.User + 1\n    def __init__(self, *args, **kwargs):\n        super(UrlSchemeHandler, self).__init__(*args, **kwargs)\n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)\n    def requestStarted(self, request):",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    AttrType = QNetworkRequest.User + 1\n    def __init__(self, *args, **kwargs):\n        super(UrlSchemeHandler, self).__init__(*args, **kwargs)\n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)\n    def requestStarted(self, request):\n        # ",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.GetRequestInfo",
        "description": "QWebEngineView.GetRequestInfo",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass UrlSchemeHandler(QWebEngineUrlSchemeHandler):\n    AttrType = QNetworkRequest.User + 1\n    def __init__(self, *args, **kwargs):\n        super(UrlSchemeHandler, self).__init__(*args, **kwargs)\n        self._manager = QNetworkAccessManager(self)\n        self._manager.finished.connect(self.onFinished)\n    def requestStarted(self, request):\n        # \n        # request.fail(QWebEngineUrlRequestJob.RequestDenied)",
        "detail": "QWebEngineView.GetRequestInfo",
        "documentation": {}
    },
    {
        "label": "WebEngineView",
        "kind": 6,
        "importPath": "QWebEngineView.JsSignals",
        "description": "QWebEngineView.JsSignals",
        "peekOfCode": "class WebEngineView(QWebEngineView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        self.channel = QWebChannel(self)\n        # 자신의 개체를 통과하십시오 \n        self.channel.registerObject('Bridge', self)\n        # 대화 형 인터페이스를 설정하십시오 \n        self.page().setWebChannel(self.channel)",
        "detail": "QWebEngineView.JsSignals",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.JsSignals",
        "description": "QWebEngineView.JsSignals",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.webview = WebEngineView(self)\n        layout.addWidget(self.webview)\n        layout.addWidget(QPushButton(\n            '发送自定义信号', self, clicked=self.webview.sendCustomSignal))\n        self.webview.windowTitleChanged.connect(self.setWindowTitle)\n        self.webview.load(QUrl.fromLocalFile(",
        "detail": "QWebEngineView.JsSignals",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.JsSignals",
        "description": "QWebEngineView.JsSignals",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\nclass WebEngineView(QWebEngineView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        self.channel = QWebChannel(self)\n        # 자신의 개체를 통과하십시오 \n        self.channel.registerObject('Bridge', self)",
        "detail": "QWebEngineView.JsSignals",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.JsSignals",
        "description": "QWebEngineView.JsSignals",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\nclass WebEngineView(QWebEngineView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        self.channel = QWebChannel(self)\n        # 자신의 개체를 통과하십시오 \n        self.channel.registerObject('Bridge', self)\n        # 대화 형 인터페이스를 설정하십시오 ",
        "detail": "QWebEngineView.JsSignals",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(600, 400)\n        layout = QHBoxLayout(self)\n        # 左 \n        widgetLeft = QWidget(self)\n        layoutLeft = QVBoxLayout(widgetLeft)\n        # 권리 \n        self.widgetRight = QListWidget(",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    window._self.saveImage(canvas.toDataURL());",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    window._self.saveImage(canvas.toDataURL());\n    canvas = null;",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "CODE",
        "kind": 5,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "CODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    window._self.saveImage(canvas.toDataURL());\n    canvas = null;\n});\n\"\"\"",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "CreateBridge",
        "kind": 5,
        "importPath": "QWebEngineView.ScreenShotPage",
        "description": "QWebEngineView.ScreenShotPage",
        "peekOfCode": "CreateBridge = \"\"\"\nnew QWebChannel(qt.webChannelTransport,\n    function(channel) {\n        window._self = channel.objects._self;\n    }\n);\n\"\"\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)",
        "detail": "QWebEngineView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebEngineView.SiteDiffUser",
        "description": "QWebEngineView.SiteDiffUser",
        "peekOfCode": "class Window(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 用户 用户 1. \n        self.webView1 = QWebEngineView(self)\n        profile1 = QWebEngineProfile('storage1', self.webView1)\n        profile1.setPersistentStoragePath('Tmp/Storage1')\n        print(profile1.cookieStore())\n        # 쿠키를 지우고 싶으면 \n        # cookieStore = profile1.cookieStore()",
        "detail": "QWebEngineView.SiteDiffUser",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebEngineView.SiteDiffUser",
        "description": "QWebEngineView.SiteDiffUser",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass Window(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 用户 用户 1. \n        self.webView1 = QWebEngineView(self)\n        profile1 = QWebEngineProfile('storage1', self.webView1)\n        profile1.setPersistentStoragePath('Tmp/Storage1')",
        "detail": "QWebEngineView.SiteDiffUser",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebEngineView.SiteDiffUser",
        "description": "QWebEngineView.SiteDiffUser",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass Window(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 用户 用户 1. \n        self.webView1 = QWebEngineView(self)\n        profile1 = QWebEngineProfile('storage1', self.webView1)\n        profile1.setPersistentStoragePath('Tmp/Storage1')\n        print(profile1.cookieStore())",
        "detail": "QWebEngineView.SiteDiffUser",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebEngineView.SiteDiffUser",
        "description": "QWebEngineView.SiteDiffUser",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass Window(QTabWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        # 用户 用户 1. \n        self.webView1 = QWebEngineView(self)\n        profile1 = QWebEngineProfile('storage1', self.webView1)\n        profile1.setPersistentStoragePath('Tmp/Storage1')\n        print(profile1.cookieStore())\n        # 쿠키를 지우고 싶으면 ",
        "detail": "QWebEngineView.SiteDiffUser",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "QWebView.Lib.data_rc",
        "description": "QWebView.Lib.data_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "QWebView.Lib.data_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "QWebView.Lib.data_rc",
        "description": "QWebView.Lib.data_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "QWebView.Lib.data_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "QWebView.Lib.data_rc",
        "description": "QWebView.Lib.data_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x01\\x78\\x7c\\\n\\x2f\\\n\\x2a\\x21\\x20\\x6a\\x51\\x75\\x65\\x72\\x79\\x20\\x76\\x31\\x2e\\x31\\x31\\x2e\\\n\\x30\\x20\\x7c\\x20\\x28\\x63\\x29\\x20\\x32\\x30\\x30\\x35\\x2c\\x20\\x32\\x30\\\n\\x31\\x34\\x20\\x6a\\x51\\x75\\x65\\x72\\x79\\x20\\x46\\x6f\\x75\\x6e\\x64\\x61\\\n\\x74\\x69\\x6f\\x6e\\x2c\\x20\\x49\\x6e\\x63\\x2e\\x20\\x7c\\x20\\x6a\\x71\\x75\\\n\\x65\\x72\\x79\\x2e\\x6f\\x72\\x67\\x2f\\x6c\\x69\\x63\\x65\\x6e\\x73\\x65\\x20\\\n\\x2a\\x2f\\x0a\\x21\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x61\\x2c\\x62\\\n\\x29\\x7b\\x22\\x6f\\x62\\x6a\\x65\\x63\\x74\\x22\\x3d\\x3d\\x74\\x79\\x70\\x65\\",
        "detail": "QWebView.Lib.data_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "QWebView.Lib.data_rc",
        "description": "QWebView.Lib.data_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x09\\\n\\x0b\\xc9\\x66\\x13\\\n\\x00\\x6a\\\n\\x00\\x71\\x00\\x75\\x00\\x65\\x00\\x72\\x00\\x79\\x00\\x2e\\x00\\x6a\\x00\\x73\\\n\\x00\\x09\\\n\\x0b\\x84\\x0c\\x3c\\\n\\x00\\x74\\\n\\x00\\x72\\x00\\x65\\x00\\x65\\x00\\x2e\\x00\\x68\\x00\\x74\\x00\\x6d\\x00\\x6c\\\n\"",
        "detail": "QWebView.Lib.data_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct",
        "kind": 5,
        "importPath": "QWebView.Lib.data_rc",
        "description": "QWebView.Lib.data_rc",
        "peekOfCode": "qt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x18\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x01\\x78\\x80\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\"\ndef qInitResources():\n    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "QWebView.Lib.data_rc",
        "documentation": {}
    },
    {
        "label": "RequestInterceptor",
        "kind": 6,
        "importPath": "QWebView.BlockRequest",
        "description": "QWebView.BlockRequest",
        "peekOfCode": "class RequestInterceptor(QNetworkAccessManager):\n    def createRequest(self, op, originalReq, outgoingData):\n        \"\"\"创建请求\n        :param op:           操作类型见http://doc.qt.io/qt-5/qnetworkaccessmanager.html#Operation-enum\n        :param originalReq:  原始请求\n        :param outgoingData: 输出数据\n        \"\"\"\n        url = originalReq.url().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:\n            # 가로 촬영 Baidu Alliance 광고 ",
        "detail": "QWebView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebView.BlockRequest",
        "description": "QWebView.BlockRequest",
        "peekOfCode": "class Window(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        self.page().setNetworkAccessManager(RequestInterceptor(self))\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()",
        "detail": "QWebView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.BlockRequest",
        "description": "QWebView.BlockRequest",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass RequestInterceptor(QNetworkAccessManager):\n    def createRequest(self, op, originalReq, outgoingData):\n        \"\"\"创建请求\n        :param op:           操作类型见http://doc.qt.io/qt-5/qnetworkaccessmanager.html#Operation-enum\n        :param originalReq:  原始请求\n        :param outgoingData: 输出数据\n        \"\"\"",
        "detail": "QWebView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.BlockRequest",
        "description": "QWebView.BlockRequest",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\n__Version__ = 'Version 1.0'\nclass RequestInterceptor(QNetworkAccessManager):\n    def createRequest(self, op, originalReq, outgoingData):\n        \"\"\"创建请求\n        :param op:           操作类型见http://doc.qt.io/qt-5/qnetworkaccessmanager.html#Operation-enum\n        :param originalReq:  原始请求\n        :param outgoingData: 输出数据\n        \"\"\"\n        url = originalReq.url().toString()",
        "detail": "QWebView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebView.BlockRequest",
        "description": "QWebView.BlockRequest",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass RequestInterceptor(QNetworkAccessManager):\n    def createRequest(self, op, originalReq, outgoingData):\n        \"\"\"创建请求\n        :param op:           操作类型见http://doc.qt.io/qt-5/qnetworkaccessmanager.html#Operation-enum\n        :param originalReq:  原始请求\n        :param outgoingData: 输出数据\n        \"\"\"\n        url = originalReq.url().toString()\n        if url.find('pos.baidu.com') > -1 and url.find('ltu=') > -1:",
        "detail": "QWebView.BlockRequest",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebView.DreamTree",
        "description": "QWebView.DreamTree",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)  # 부모 컨트롤 위젯 배경을 투명하게 설정합니다 \n        self.setWindowFlags(Qt.FramelessWindowHint)  # 去 掉 掉 边 \n        palette = self.palette()\n        palette.setBrush(QPalette.Base, Qt.transparent)  # 父 控 控 背景 透 透 \n        self.setPalette(palette)\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "QWebView.DreamTree",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.DreamTree",
        "description": "QWebView.DreamTree",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 투명한 WebView를 얻으려면 QWidget을 상위 제어로 사용해야합니다. \nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)  # 부모 컨트롤 위젯 배경을 투명하게 설정합니다 \n        self.setWindowFlags(Qt.FramelessWindowHint)  # 去 掉 掉 边 \n        palette = self.palette()",
        "detail": "QWebView.DreamTree",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.DreamTree",
        "description": "QWebView.DreamTree",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 투명한 WebView를 얻으려면 QWidget을 상위 제어로 사용해야합니다. \nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)  # 부모 컨트롤 위젯 배경을 투명하게 설정합니다 \n        self.setWindowFlags(Qt.FramelessWindowHint)  # 去 掉 掉 边 \n        palette = self.palette()\n        palette.setBrush(QPalette.Base, Qt.transparent)  # 父 控 控 背景 透 透 ",
        "detail": "QWebView.DreamTree",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebView.DreamTree",
        "description": "QWebView.DreamTree",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 투명한 WebView를 얻으려면 QWidget을 상위 제어로 사용해야합니다. \nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.setAttribute(Qt.WA_TranslucentBackground, True)  # 부모 컨트롤 위젯 배경을 투명하게 설정합니다 \n        self.setWindowFlags(Qt.FramelessWindowHint)  # 去 掉 掉 边 \n        palette = self.palette()\n        palette.setBrush(QPalette.Base, Qt.transparent)  # 父 控 控 背景 透 透 \n        self.setPalette(palette)",
        "detail": "QWebView.DreamTree",
        "documentation": {}
    },
    {
        "label": "WebView",
        "kind": 6,
        "importPath": "QWebView.GetCookie",
        "description": "QWebView.GetCookie",
        "peekOfCode": "class WebView(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')\n        self.cookieView.show()\n        self.loadFinished.connect(self.onLoadFinished)\n    def closeEvent(self, event):",
        "detail": "QWebView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.GetCookie",
        "description": "QWebView.GetCookie",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass WebView(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')",
        "detail": "QWebView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.GetCookie",
        "description": "QWebView.GetCookie",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass WebView(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')\n        self.cookieView.show()",
        "detail": "QWebView.GetCookie",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebView.GetCookie",
        "description": "QWebView.GetCookie",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass WebView(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.cookieView = QTextEdit()\n        self.cookieView.resize(800, 400)\n        self.cookieView.move(400, 400)\n        self.cookieView.setWindowTitle('Cookies')\n        self.cookieView.show()\n        self.loadFinished.connect(self.onLoadFinished)",
        "detail": "QWebView.GetCookie",
        "documentation": {}
    },
    {
        "label": "WebView",
        "kind": 6,
        "importPath": "QWebView.JsSignals",
        "description": "QWebView.JsSignals",
        "peekOfCode": "class WebView(QWebView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        # 노출 인터페이스 개체 \n        self.page().mainFrame().javaScriptWindowObjectCleared.connect(self._exposeInterface)\n    def _exposeInterface(self):\n        \"\"\"向Js暴露调用本地方法接口\n        \"\"\"",
        "detail": "QWebView.JsSignals",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebView.JsSignals",
        "description": "QWebView.JsSignals",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.webview = WebView(self)\n        layout.addWidget(self.webview)\n        layout.addWidget(QPushButton(\n            '发送自定义信号', self, clicked=self.webview.sendCustomSignal))\n        self.webview.windowTitleChanged.connect(self.setWindowTitle)\n        self.webview.load(QUrl.fromLocalFile(",
        "detail": "QWebView.JsSignals",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.JsSignals",
        "description": "QWebView.JsSignals",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019'\nclass WebView(QWebView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        # 노출 인터페이스 개체 \n        self.page().mainFrame().javaScriptWindowObjectCleared.connect(self._exposeInterface)\n    def _exposeInterface(self):",
        "detail": "QWebView.JsSignals",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.JsSignals",
        "description": "QWebView.JsSignals",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019'\nclass WebView(QWebView):\n    customSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        # 노출 인터페이스 개체 \n        self.page().mainFrame().javaScriptWindowObjectCleared.connect(self._exposeInterface)\n    def _exposeInterface(self):\n        \"\"\"向Js暴露调用本地方法接口",
        "detail": "QWebView.JsSignals",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebView.PlayFlash",
        "description": "QWebView.PlayFlash",
        "peekOfCode": "class Window(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 览 设置 \n        setting = QWebSettings.globalSettings()\n        setting.setAttribute(QWebSettings.PluginsEnabled, True)\n        # 解 x 下 s 문제 \n        self.page().networkAccessManager().sslErrors.connect(self.handleSslErrors)\n        sslconf = QSslConfiguration.defaultConfiguration()",
        "detail": "QWebView.PlayFlash",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.PlayFlash",
        "description": "QWebView.PlayFlash",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 览 设置 \n        setting = QWebSettings.globalSettings()\n        setting.setAttribute(QWebSettings.PluginsEnabled, True)",
        "detail": "QWebView.PlayFlash",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.PlayFlash",
        "description": "QWebView.PlayFlash",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\nclass Window(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 览 设置 \n        setting = QWebSettings.globalSettings()\n        setting.setAttribute(QWebSettings.PluginsEnabled, True)\n        # 解 x 下 s 문제 ",
        "detail": "QWebView.PlayFlash",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebView.PlayFlash",
        "description": "QWebView.PlayFlash",
        "peekOfCode": "__Version__ = 1.0\nclass Window(QWebView):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        # 览 设置 \n        setting = QWebSettings.globalSettings()\n        setting.setAttribute(QWebSettings.PluginsEnabled, True)\n        # 解 x 下 s 문제 \n        self.page().networkAccessManager().sslErrors.connect(self.handleSslErrors)",
        "detail": "QWebView.PlayFlash",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWebView.ScreenShotPage",
        "description": "QWebView.ScreenShotPage",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(600, 400)\n        layout = QHBoxLayout(self)\n        # 左 \n        widgetLeft = QWidget(self)\n        layoutLeft = QVBoxLayout(widgetLeft)\n        # 권리 \n        self.widgetRight = QListWidget(",
        "detail": "QWebView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWebView.ScreenShotPage",
        "description": "QWebView.ScreenShotPage",
        "peekOfCode": "__Author__ = \"Irony\"\n__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {",
        "detail": "QWebView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWebView.ScreenShotPage",
        "description": "QWebView.ScreenShotPage",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2019\"\n__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    _self.saveImage(canvas.toDataURL());",
        "detail": "QWebView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWebView.ScreenShotPage",
        "description": "QWebView.ScreenShotPage",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 일부 콘텐츠의 스크린 샷 \nCODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    _self.saveImage(canvas.toDataURL());\n});",
        "detail": "QWebView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "CODE",
        "kind": 5,
        "importPath": "QWebView.ScreenShotPage",
        "description": "QWebView.ScreenShotPage",
        "peekOfCode": "CODE = \"\"\"\nvar el = $(\"%s\");\nhtml2canvas(el[0], {\n    width: el.outerWidth(true), \n    windowWidth: el.outerWidth(true),\n}).then(function(canvas) {\n    _self.saveImage(canvas.toDataURL());\n});\n\"\"\"\nclass Window(QWidget):",
        "detail": "QWebView.ScreenShotPage",
        "documentation": {}
    },
    {
        "label": "CustomPaintWidget",
        "kind": 6,
        "importPath": "QWidget.Lib.CustomPaintWidget",
        "description": "QWidget.Lib.CustomPaintWidget",
        "peekOfCode": "class CustomPaintWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomPaintWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomPaintWidget\", self))\n    def paintEvent(self, event):\n        # QSS 문제를 해결하십시오 \n        option = QStyleOption()\n        option.initFrom(self)\n        painter = QPainter(self)",
        "detail": "QWidget.Lib.CustomPaintWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomPaintWidget",
        "description": "QWidget.Lib.CustomPaintWidget",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass CustomPaintWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomPaintWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomPaintWidget\", self))\n    def paintEvent(self, event):\n        # QSS 문제를 해결하십시오 ",
        "detail": "QWidget.Lib.CustomPaintWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomPaintWidget",
        "description": "QWidget.Lib.CustomPaintWidget",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass CustomPaintWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomPaintWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomPaintWidget\", self))\n    def paintEvent(self, event):\n        # QSS 문제를 해결하십시오 \n        option = QStyleOption()",
        "detail": "QWidget.Lib.CustomPaintWidget",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomPaintWidget",
        "description": "QWidget.Lib.CustomPaintWidget",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass CustomPaintWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomPaintWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomPaintWidget\", self))\n    def paintEvent(self, event):\n        # QSS 문제를 해결하십시오 \n        option = QStyleOption()\n        option.initFrom(self)",
        "detail": "QWidget.Lib.CustomPaintWidget",
        "documentation": {}
    },
    {
        "label": "CustomWidget",
        "kind": 6,
        "importPath": "QWidget.Lib.CustomWidget",
        "description": "QWidget.Lib.CustomWidget",
        "peekOfCode": "class CustomWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomWidget\", self))",
        "detail": "QWidget.Lib.CustomWidget",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomWidget",
        "description": "QWidget.Lib.CustomWidget",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomWidget\", self))",
        "detail": "QWidget.Lib.CustomWidget",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomWidget",
        "description": "QWidget.Lib.CustomWidget",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomWidget\", self))",
        "detail": "QWidget.Lib.CustomWidget",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWidget.Lib.CustomWidget",
        "description": "QWidget.Lib.CustomWidget",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass CustomWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(CustomWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QLabel(\"我是自定义CustomWidget\", self))",
        "detail": "QWidget.Lib.CustomWidget",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "QWidget.WidgetStyle",
        "description": "QWidget.WidgetStyle",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(CustomPaintWidget(self))\n        layout.addWidget(CustomWidget(self))\n        # 노트 \n        w = CustomWidget(self)\n        w.setAttribute(Qt.WA_StyledBackground)  # 매우 중요 \n        layout.addWidget(w)",
        "detail": "QWidget.WidgetStyle",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "QWidget.WidgetStyle",
        "description": "QWidget.WidgetStyle",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(CustomPaintWidget(self))\n        layout.addWidget(CustomWidget(self))\n        # 노트 ",
        "detail": "QWidget.WidgetStyle",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "QWidget.WidgetStyle",
        "description": "QWidget.WidgetStyle",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(CustomPaintWidget(self))\n        layout.addWidget(CustomWidget(self))\n        # 노트 \n        w = CustomWidget(self)",
        "detail": "QWidget.WidgetStyle",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "QWidget.WidgetStyle",
        "description": "QWidget.WidgetStyle",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(CustomPaintWidget(self))\n        layout.addWidget(CustomWidget(self))\n        # 노트 \n        w = CustomWidget(self)\n        w.setAttribute(Qt.WA_StyledBackground)  # 매우 중요 ",
        "detail": "QWidget.WidgetStyle",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Test.C++中修改PyQt对象.Test",
        "description": "Test.C++中修改PyQt对象.Test",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.imgLabel = QLabel(self)\n        self.coldSlider = QSlider(Qt.Horizontal, self)\n        self.coldSlider.valueChanged.connect(self.doChange)\n        self.coldSlider.setRange(0, 255)\n        layout.addWidget(self.imgLabel)\n        layout.addWidget(self.coldSlider)",
        "detail": "Test.C++中修改PyQt对象.Test",
        "documentation": {}
    },
    {
        "label": "ChartView",
        "kind": 6,
        "importPath": "Test.ChartView.ChartView",
        "description": "Test.ChartView.ChartView",
        "peekOfCode": "class ChartView(QChartView):\n    def __init__(self, file, parent=None):\n        super(ChartView, self).__init__(parent)\n        self._chart = QChart()\n        self._chart.setAcceptHoverEvents(True)\n        self.setChart(self._chart)\n        self.initUi(file)\n    def initUi(self, file):\n        if isinstance(file, dict):\n            return self.__analysis(file)",
        "detail": "Test.ChartView.ChartView",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Test.ChartView.ChartView",
        "description": "Test.ChartView.ChartView",
        "peekOfCode": "__version__ = \"0.0.1\"\n# QEasingCurve 类型枚举\nEasingCurve = dict(\n    [(c, getattr(QEasingCurve, n)) for n, c in QEasingCurve.__dict__.items()\n     if isinstance(c, QEasingCurve.Type)])\n# 动画 类型枚举\nAnimationOptions = {\n    0: QChart.NoAnimation,\n    1: QChart.GridAxisAnimations,\n    2: QChart.SeriesAnimations,",
        "detail": "Test.ChartView.ChartView",
        "documentation": {}
    },
    {
        "label": "EasingCurve",
        "kind": 5,
        "importPath": "Test.ChartView.ChartView",
        "description": "Test.ChartView.ChartView",
        "peekOfCode": "EasingCurve = dict(\n    [(c, getattr(QEasingCurve, n)) for n, c in QEasingCurve.__dict__.items()\n     if isinstance(c, QEasingCurve.Type)])\n# 动画 类型枚举\nAnimationOptions = {\n    0: QChart.NoAnimation,\n    1: QChart.GridAxisAnimations,\n    2: QChart.SeriesAnimations,\n    3: QChart.AllAnimations\n}",
        "detail": "Test.ChartView.ChartView",
        "documentation": {}
    },
    {
        "label": "AnimationOptions",
        "kind": 5,
        "importPath": "Test.ChartView.ChartView",
        "description": "Test.ChartView.ChartView",
        "peekOfCode": "AnimationOptions = {\n    0: QChart.NoAnimation,\n    1: QChart.GridAxisAnimations,\n    2: QChart.SeriesAnimations,\n    3: QChart.AllAnimations\n}\nclass ChartView(QChartView):\n    def __init__(self, file, parent=None):\n        super(ChartView, self).__init__(parent)\n        self._chart = QChart()",
        "detail": "Test.ChartView.ChartView",
        "documentation": {}
    },
    {
        "label": "LoadingWidget",
        "kind": 6,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "class LoadingWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(LoadingWidget, self).__init__(*args, **kwargs)\n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self._movie = QMovie(\"loading.gif\")\n        self.setMovie(self._movie)\n    def deleteLater(self):\n        self._movie.stop()\n        self._movie.deleteLater()\n        del self._movie",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "ClassifyWidget",
        "kind": 6,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "class ClassifyWidget(QTreeWidget):\n    fileSelected = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(ClassifyWidget, self).__init__(*args, **kwargs)\n        self.setHeaderHidden(True)\n        self.setColumnCount(1)\n        self.itemDoubleClicked.connect(self.onItemDoubleClicked)\n        baseDir = \"分类\"\n        for name in os.listdir(baseDir):\n            path = os.path.join(baseDir, name)",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "CodeScintilla",
        "kind": 6,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "class CodeScintilla(QsciScintilla):\n    def __init__(self, *args, **kwargs):\n        super(CodeScintilla, self).__init__(*args, **kwargs)\n        self.init()\n        self.linesChanged.connect(self.onLinesChanged)\n    def onLinesChanged(self):\n        self.setMarginWidth(0, self.fontMetrics().width(str(self.lines())) + 6)\n    def init(self):\n        self.setUtf8(True)\n        lexer = QsciLexerJSON(self)",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "CodeWidget",
        "kind": 6,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "class CodeWidget(QWidget):\n    runSignal = pyqtSignal(str)\n    def __init__(self, *args, **kwargs):\n        super(CodeWidget, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self, spacing=0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        self.runButton = QPushButton(\n            \"运行\", self, objectName=\"RunButton\", clicked=self.onRunButton)\n        self.codeScintilla = CodeScintilla(self)\n        layout.addWidget(self.runButton)",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "ChartWidget",
        "kind": 6,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "class ChartWidget(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(ChartWidget, self).__init__(*args, **kwargs)\n        self.resize(800, 600)\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        self.splitter = QSplitter(self)\n        layout.addWidget(self.splitter)\n        self.splitter.setOrientation(Qt.Horizontal)\n        self.splitter.setStretchFactor(0, 2)",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Test.ChartView.ChatWidget",
        "description": "Test.ChartView.ChatWidget",
        "peekOfCode": "__version__ = \"0.0.1\"\nclass LoadingWidget(QLabel):\n    def __init__(self, *args, **kwargs):\n        super(LoadingWidget, self).__init__(*args, **kwargs)\n        self.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)\n        self._movie = QMovie(\"loading.gif\")\n        self.setMovie(self._movie)\n    def deleteLater(self):\n        self._movie.stop()\n        self._movie.deleteLater()",
        "detail": "Test.ChartView.ChatWidget",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pydext.pydext.setup",
        "description": "Test.C和C++扩展.pydext.pydext.setup",
        "peekOfCode": "module = Extension('pydext', sources = ['pydext.c'])\nsetup (name = 'pydext',\n       version = '1.0.0',\n       description = 'This is pydext',\n       ext_modules = [module])",
        "detail": "Test.C和C++扩展.pydext.pydext.setup",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "t1 = time.time()\nacc = np.loadtxt('hf_acc.txt')\ndt = 0.005\nmaxPeriod = 10.0\nperiodStep = 0.02\ndampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "acc",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "acc = np.loadtxt('hf_acc.txt')\ndt = 0.005\nmaxPeriod = 10.0\nperiodStep = 0.02\ndampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])\nprint('MAcc[0]', MAcc[0])",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "dt = 0.005\nmaxPeriod = 10.0\nperiodStep = 0.02\ndampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])\nprint('MAcc[0]', MAcc[0])\nprint('MVel[0]', MVel[0])",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "maxPeriod",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "maxPeriod = 10.0\nperiodStep = 0.02\ndampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])\nprint('MAcc[0]', MAcc[0])\nprint('MVel[0]', MVel[0])\nprint('MDis[0]', MDis[0])",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "periodStep",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "periodStep = 0.02\ndampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])\nprint('MAcc[0]', MAcc[0])\nprint('MVel[0]', MVel[0])\nprint('MDis[0]', MDis[0])\nt2 = time.time() - t1",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "dampRatio",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "dampRatio = 0.05\nPeriod, Fre, MAcc, MVel, MDis = calspecaccel(\n    acc, acc.shape[0], dt, maxPeriod, periodStep, dampRatio)\nprint('Period[0]', Period[0])\nprint('Fre[0]', Fre[0])\nprint('MAcc[0]', MAcc[0])\nprint('MVel[0]', MVel[0])\nprint('MDis[0]', MDis[0])\nt2 = time.time() - t1\nprint(t2)",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "Test.C和C++扩展.pyx和c++.test",
        "description": "Test.C和C++扩展.pyx和c++.test",
        "peekOfCode": "t2 = time.time() - t1\nprint(t2)\nplt.plot(Period, MAcc)\nplt.show()",
        "detail": "Test.C和C++扩展.pyx和c++.test",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "Test.C和C++扩展.py转pyd.pydmod",
        "description": "Test.C和C++扩展.py转pyd.pydmod",
        "peekOfCode": "def sum(x, y):\n    return x + y",
        "detail": "Test.C和C++扩展.py转pyd.pydmod",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.C和C++扩展.py转pyd.pydmod",
        "description": "Test.C和C++扩展.py转pyd.pydmod",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndef sum(x, y):\n    return x + y",
        "detail": "Test.C和C++扩展.py转pyd.pydmod",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.C和C++扩展.py转pyd.pydmod",
        "description": "Test.C和C++扩展.py转pyd.pydmod",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndef sum(x, y):\n    return x + y",
        "detail": "Test.C和C++扩展.py转pyd.pydmod",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.C和C++扩展.py转pyd.pydmod",
        "description": "Test.C和C++扩展.py转pyd.pydmod",
        "peekOfCode": "__Version__ = 1.0\ndef sum(x, y):\n    return x + y",
        "detail": "Test.C和C++扩展.py转pyd.pydmod",
        "documentation": {}
    },
    {
        "label": "EchoServer",
        "kind": 6,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "class EchoServer(TCPServer):\n    IMAGE = None\n    def __init__(self, cap, *args, **kwargs):\n        super(EchoServer, self).__init__(*args, **kwargs)\n        self.cap = cap\n        self.init()\n    def init(self):\n        \"\"\"初始化管脚\"\"\"\n        try:\n            GPIO.setmode(GPIO.BCM)",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "def start(cap):\n    \"\"\"启动服务器\"\"\"\n    options.parse_command_line()\n    server = EchoServer(cap)\n    server.listen(options.port)\n    logger.info(\"Listening on TCP port %d\", options.port)\n    IOLoop.current().start()\nif __name__ == \"__main__\":\n    cap = None\n    try:",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndefine(\"port\", default=8888, help=\"TCP port to listen on\")\nlogger = logging.getLogger(__name__)\n# SIZE = (640, 480)  # 分辨率\n# FPS = 24\nSIZE = (100, 80)  # 分辨率",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\ndefine(\"port\", default=8888, help=\"TCP port to listen on\")\nlogger = logging.getLogger(__name__)\n# SIZE = (640, 480)  # 分辨率\n# FPS = 24\nSIZE = (100, 80)  # 分辨率\nFPS = 5\nPARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "__Version__ = 1.0\ndefine(\"port\", default=8888, help=\"TCP port to listen on\")\nlogger = logging.getLogger(__name__)\n# SIZE = (640, 480)  # 分辨率\n# FPS = 24\nSIZE = (100, 80)  # 分辨率\nFPS = 5\nPARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):\n    IMAGE = None",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# SIZE = (640, 480)  # 分辨率\n# FPS = 24\nSIZE = (100, 80)  # 分辨率\nFPS = 5\nPARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):\n    IMAGE = None\n    def __init__(self, cap, *args, **kwargs):\n        super(EchoServer, self).__init__(*args, **kwargs)",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "SIZE",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "SIZE = (100, 80)  # 分辨率\nFPS = 5\nPARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):\n    IMAGE = None\n    def __init__(self, cap, *args, **kwargs):\n        super(EchoServer, self).__init__(*args, **kwargs)\n        self.cap = cap\n        self.init()\n    def init(self):",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "FPS = 5\nPARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):\n    IMAGE = None\n    def __init__(self, cap, *args, **kwargs):\n        super(EchoServer, self).__init__(*args, **kwargs)\n        self.cap = cap\n        self.init()\n    def init(self):\n        \"\"\"初始化管脚\"\"\"",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "PARAM",
        "kind": 5,
        "importPath": "Test.Network.控制小车.server",
        "description": "Test.Network.控制小车.server",
        "peekOfCode": "PARAM = [int(cv2.IMWRITE_JPEG_QUALITY), FPS]\nclass EchoServer(TCPServer):\n    IMAGE = None\n    def __init__(self, cap, *args, **kwargs):\n        super(EchoServer, self).__init__(*args, **kwargs)\n        self.cap = cap\n        self.init()\n    def init(self):\n        \"\"\"初始化管脚\"\"\"\n        try:",
        "detail": "Test.Network.控制小车.server",
        "documentation": {}
    },
    {
        "label": "ControlCar",
        "kind": 6,
        "importPath": "Test.Network.控制小车.控制小车",
        "description": "Test.Network.控制小车.控制小车",
        "peekOfCode": "class ControlCar(QWidget):\n    HOST = '127.0.0.1'\n    PORT = 8888\n    def __init__(self, *args, **kwargs):\n        super(ControlCar, self).__init__(*args, **kwargs)\n        self._connCar = None\n        # 加载UI文件\n        uic.loadUi('carui.ui', self)\n        self.resize(800, 600)\n        # 绑定连接按钮信号",
        "detail": "Test.Network.控制小车.控制小车",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.控制小车",
        "description": "Test.Network.控制小车.控制小车",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ControlCar(QWidget):\n    HOST = '127.0.0.1'\n    PORT = 8888\n    def __init__(self, *args, **kwargs):\n        super(ControlCar, self).__init__(*args, **kwargs)",
        "detail": "Test.Network.控制小车.控制小车",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.控制小车",
        "description": "Test.Network.控制小车.控制小车",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\nclass ControlCar(QWidget):\n    HOST = '127.0.0.1'\n    PORT = 8888\n    def __init__(self, *args, **kwargs):\n        super(ControlCar, self).__init__(*args, **kwargs)\n        self._connCar = None\n        # 加载UI文件\n        uic.loadUi('carui.ui', self)",
        "detail": "Test.Network.控制小车.控制小车",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.Network.控制小车.控制小车",
        "description": "Test.Network.控制小车.控制小车",
        "peekOfCode": "__Version__ = 1.0\nclass ControlCar(QWidget):\n    HOST = '127.0.0.1'\n    PORT = 8888\n    def __init__(self, *args, **kwargs):\n        super(ControlCar, self).__init__(*args, **kwargs)\n        self._connCar = None\n        # 加载UI文件\n        uic.loadUi('carui.ui', self)\n        self.resize(800, 600)",
        "detail": "Test.Network.控制小车.控制小车",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setSpacing(2)  # item直接的间隔\n        # 隐藏横向滚动条\n        self.listWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        # 让list 从左到右排列\n        self.listWidget.setFlow(self.listWidget.LeftToRight)",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nUrl = 'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&mime=0&page={}'\nHeaders = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nUrl = 'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&mime=0&page={}'\nHeaders = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',\n    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'accept-language': 'zh-CN,zh;q=0.9',\n    'cache-control': 'max-age=0',",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nUrl = 'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&mime=0&page={}'\nHeaders = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',\n    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'accept-language': 'zh-CN,zh;q=0.9',\n    'cache-control': 'max-age=0',\n    'dnt': '1',",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "Url",
        "kind": 5,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "Url = 'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&mime=0&page={}'\nHeaders = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',\n    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'accept-language': 'zh-CN,zh;q=0.9',\n    'cache-control': 'max-age=0',\n    'dnt': '1',\n    'upgrade-insecure-requests': '1',",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "Headers",
        "kind": 5,
        "importPath": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "description": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "peekOfCode": "Headers = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',\n    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'accept-language': 'zh-CN,zh;q=0.9',\n    'cache-control': 'max-age=0',\n    'dnt': '1',\n    'upgrade-insecure-requests': '1',\n    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6756.400 QQBrowser/10.2.2498.400'",
        "detail": "Test.Network.窗口配合异步Http.窗口配合异步Http",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.Ui_动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.Ui_动态控件",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(370, 403)\n        Dialog.setSizeGripEnabled(True)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.Ui_动态控件",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "peekOfCode": "class Dialog(QDialog, Ui_Dialog):\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n        self.setupUi(self)\n        self.dynamic1()\n        self.dynamic2()\n#    法一\n    def dynamic1(self):\n        for i in range(5):\n            self.pushButton = QtWidgets.QPushButton(self)",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "documentation": {}
    },
    {
        "label": "self.pushButton_{i}",
        "kind": 5,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "peekOfCode": "self.pushButton_{i} = QtWidgets.QPushButton(self);\nself.pushButton_{i}.setText(\"pushButton{i}\");\nself.pushButton_{i}.setObjectName(\"pushButton{i}\");\nself.verticalLayout.addWidget(self.pushButton_{i});\nself.pushButton_{i}.clicked.connect(self.pr)\n                \"\"\".format(i=i)\n            exec(txt)\n        #只能法二可用的方式\n        self.pushButton_1.clicked.connect(self.pr2)\n        self.pushButton_2.clicked.connect(self.pr2)",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_button.动态控件",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.Ui_动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.Ui_动态控件",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(370, 403)\n        Dialog.setSizeGripEnabled(True)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.Ui_动态控件",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "peekOfCode": "class Dialog(QDialog, Ui_Dialog):\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n        self.setupUi(self)\n        self.dynamic1()\n        self.dynamic2()         \n#    法一\n    def dynamic1(self):\n        for i in range(5):\n            self.pushButton = QtWidgets.QPushButton(self)",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "documentation": {}
    },
    {
        "label": "self.pushButton_{i}",
        "kind": 5,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "description": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "peekOfCode": "self.pushButton_{i} = QtWidgets.QPushButton(self);\nself.pushButton_{i}.setText(\"pushButton{i}\");\nself.pushButton_{i}.setObjectName(\"pushButton{i}\");\nself.verticalLayout.addWidget(self.pushButton_{i});\nself.pushButton_{i}.setContextMenuPolicy(Qt.CustomContextMenu)\nself.pushButton_{i}.customContextMenuRequested.connect(partial(self.helpMenu,i))#右键请求,用lambda会报错,partial需要import\nself.pushButton_{i}.clicked.connect(self.pr)\n                \"\"\".format(i=i)\n            exec(txt)\n        #只能法二可用的方式",
        "detail": "Test.partner_625781186.1.exec动态生成控件.dynamic_Menu.动态控件",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.1.exec动态生成控件.1.动态生成",
        "description": "Test.partner_625781186.1.exec动态生成控件.1.动态生成",
        "peekOfCode": "class Dialog(QDialog, Ui_Dialog):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n        self.setupUi(self)\n        self.setting=QSettings('./setting.ini', QSettings.IniFormat)\n        self.getModel()\n        self.tableView.setModel(self.qmodel)",
        "detail": "Test.partner_625781186.1.exec动态生成控件.1.动态生成",
        "documentation": {}
    },
    {
        "label": "MyTreeWidget",
        "kind": 6,
        "importPath": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "description": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "peekOfCode": "class MyTreeWidget(QTreeWidget):\n    def mouseMoveEvent_xxx(self, e):\n        mimeData = QtCore.QMimeData()\n        drag = QDrag(self)\n        drag.setMimeData(mimeData)\n        # pixmap = QPixmap()\n        # drag.setPixmap(pixmap)\n        # drag.setHotSpot(e.pos())\n        # QTreeWidget.mouseMoveEvent(self,e)\n        drag.exec_(QtCore.Qt.MoveAction)",
        "detail": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "documentation": {}
    },
    {
        "label": "TheUI",
        "kind": 6,
        "importPath": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "description": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "peekOfCode": "class TheUI(QDialog):\n    def __init__(self, args=None, parent=None):\n        super(TheUI, self).__init__(parent)\n        self.layout = QVBoxLayout(self)\n        treeWidget = MyTreeWidget()\n        button = QPushButton('Add')\n        self.layout.addWidget(treeWidget)\n        self.layout.addWidget(button)\n        treeWidget.setHeaderHidden(True)\n        self.treeWidget = treeWidget",
        "detail": "Test.partner_625781186.12.1拖拽显示为图片.Custom_DND_image",
        "documentation": {}
    },
    {
        "label": "ComboBoxWidget",
        "kind": 6,
        "importPath": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "description": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "peekOfCode": "class ComboBoxWidget(QWidget):\n    \"\"\"\n    listWidget中的单个item.\n    \"\"\"\n    itemOpSignal = pyqtSignal(QListWidgetItem)\n    def __init__(self, text, listwidgetItem):\n        super().__init__()\n        self.text = text\n        self.listwidgetItem = listwidgetItem\n        self.initUi()",
        "detail": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "documentation": {}
    },
    {
        "label": "ListQCombobox",
        "kind": 6,
        "importPath": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "description": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "peekOfCode": "class ListQCombobox(QComboBox):\n    def __init__(self, *args):\n        super(ListQCombobox, self).__init__(*args)\n        self.listw = QListWidget(self)\n        self.setModel(self.listw.model())\n        self.setView(self.listw)\n        self.activated.connect(self.setTopText)\n        qss = '''QComboBox QAbstractItemView::item {\n                    height: 25px;\n                }",
        "detail": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "description": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "peekOfCode": "class Ui_Dialog(QDialog):\n    def __init__(self, parent=None):\n        super(Ui_Dialog, self).__init__(parent)\n        self.setupUi()\n        list_new_inputs = [r\"../0.jpg\",\n                           r\"../00.jpg\",\n                           r\"../2.jpg\",\n                           r\"../3.jpg\"]\n        self.comboBox_4.refreshInputs(list_new_inputs)\n    def setupUi(self):",
        "detail": "Test.partner_625781186.13.combo_listwidget.combo_listwidget",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "description": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "description": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "description": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x0b\\x05\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\xc8\\x00\\x00\\x00\\xc8\\x08\\x06\\x00\\x00\\x00\\xad\\x58\\xae\\x9e\\\n\\x00\\x00\\x0a\\xcc\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x3f\\x6e\\x1c\\x47\\\n\\x16\\x87\\x7f\\x45\\x2b\\x58\\x45\\xe6\\x0c\\xb1\\xb1\\x29\\x60\\x73\\x73\\x81\\\n\\xcd\\x45\\x26\\x0b\\x34\\x13\\xe9\\x06\\xa2\\x6e\\x40\\x9d\\x40\\xd4\\x09\\xc8\\\n\\x1b\\x88\\xba\\x01\\x95\\x70\\x80\\x4d\\x48\\x1e\\xc0\\x30\\xf7\\x04\\x92\\xf3\\\n\\xd5\\x8c\\x14\\x59\\x81\\x77\\x6a\\xd1\\x23\\x78\\x21\\x18\\xa2\\xd9\\xf5\\xaf\\",
        "detail": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "description": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x09\\\n\\x0c\\x78\\x54\\x88\\\n\\x00\\x6e\\\n\\x00\\x65\\x00\\x77\\x00\\x50\\x00\\x72\\x00\\x65\\x00\\x66\\x00\\x69\\x00\\x78\\\n\\x00\\x08\\\n\\x00\\x28\\x5a\\xe7\\\n\\x00\\x66\\\n\\x00\\x69\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x15\\",
        "detail": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct",
        "kind": 5,
        "importPath": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "description": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "peekOfCode": "qt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x2e\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0b\\x09\\\n\"\ndef qInitResources():\n    QtCore.qRegisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x01, qt_resource_struct, qt_resource_name, qt_resource_data)",
        "detail": "Test.partner_625781186.13.combo_listwidget.myRes_rc",
        "documentation": {}
    },
    {
        "label": "SWebEngineView",
        "kind": 6,
        "importPath": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "description": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "peekOfCode": "class SWebEngineView(QWebEngineView):\n    '''\n    浏览器类。\n    '''\n    def __init__(self, parent=None, url=\"\"):\n        super(SWebEngineView, self).__init__()\n        self.parent = parent\n        self.url = url#初始路径\n        self.tempurl=\"\"#组成跳转链接的临时路径\n        self.loadFinished.connect(self.gethtml)",
        "detail": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "documentation": {}
    },
    {
        "label": "py_process",
        "kind": 6,
        "importPath": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "description": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "peekOfCode": "class py_process(Process):\n    def __init__(self):\n        super(py_process, self).__init__()\n        print(\"1\")\n        self.url= r'https://siteserver.progressivedirect.com/session/setidredirect/?&product=AU&statecode=DC&type=New&refer=PGRX&URL=https://qad.progressivedirect.com/ApplicationStart.aspx?Page=Create&OfferingID=DC&state=DC&zip=20007&SessionStart=True'\n        self.app = QApplication(sys.argv)\n        self.browser = SWebEngineView(self, self.url)\n    def run(self):         \n        print(\"run1\")\n        self.browser.setUrl(QUrl(self.url))",
        "detail": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "documentation": {}
    },
    {
        "label": "runPool",
        "kind": 2,
        "importPath": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "description": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "peekOfCode": "def runPool( i):\n    print(i)\n    t= py_process()\n    t.run()\nclass SWebEngineView(QWebEngineView):\n    '''\n    浏览器类。\n    '''\n    def __init__(self, parent=None, url=\"\"):\n        super(SWebEngineView, self).__init__()",
        "detail": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "documentation": {}
    },
    {
        "label": "sys.excepthook",
        "kind": 5,
        "importPath": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "description": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "peekOfCode": "sys.excepthook = cgitb.Hook(1, None, 5, sys.stderr, 'text')\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtWebEngineWidgets import QWebEngineView\nfrom multiprocessing import Process, Pool\ndef runPool( i):\n    print(i)\n    t= py_process()\n    t.run()",
        "detail": "Test.partner_625781186.14.多进程爬虫.多进程爬虫",
        "documentation": {}
    },
    {
        "label": "PluginStore",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.PluginStore",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.PluginStore",
        "peekOfCode": "class PluginStore(QDialog, Ui_Dialog):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, manager,  parent=None):\n        \"\"\"\n        Constructor\n        @param parent reference to the parent widget\n        @type QWidget\n        \"\"\"",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.PluginStore",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "class FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"\n    RE_UN_LoadSignal = pyqtSignal(object)\n    AutoStartSignal  = pyqtSignal(object)\n    def __init__(self , manager=None , *a, **kw):\n        super(FileModel,self).__init__(*a,**kw )\n        self.manager = manager\n    def columnCount(self, index):",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "PluginFileCol",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "PluginFileCol = 0\nh1 = 1\nh2 = 2\nMTime = 3\nCTime = 4\nAutoStartCol  = 5\nclass FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "h1 = 1\nh2 = 2\nMTime = 3\nCTime = 4\nAutoStartCol  = 5\nclass FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"\n    RE_UN_LoadSignal = pyqtSignal(object)",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "h2 = 2\nMTime = 3\nCTime = 4\nAutoStartCol  = 5\nclass FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"\n    RE_UN_LoadSignal = pyqtSignal(object)\n    AutoStartSignal  = pyqtSignal(object)",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "MTime",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "MTime = 3\nCTime = 4\nAutoStartCol  = 5\nclass FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"\n    RE_UN_LoadSignal = pyqtSignal(object)\n    AutoStartSignal  = pyqtSignal(object)\n    def __init__(self , manager=None , *a, **kw):",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "CTime",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "peekOfCode": "CTime = 4\nAutoStartCol  = 5\nclass FileModel(QFileSystemModel):\n    \"\"\"\n    继承QFileSystemModel.\n    \"\"\"\n    RE_UN_LoadSignal = pyqtSignal(object)\n    AutoStartSignal  = pyqtSignal(object)\n    def __init__(self , manager=None , *a, **kw):\n        super(FileModel,self).__init__(*a,**kw )",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.StoreModel",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.Ui_PluginStore",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.Ui_PluginStore",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(573, 300)\n        Dialog.setSizeGripEnabled(True)\n        self.gridLayout = QtWidgets.QGridLayout(Dialog)\n        self.gridLayout.setObjectName(\"gridLayout\")\n        self.tableView = QtWidgets.QTableView(Dialog)\n        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)\n        self.tableView.setObjectName(\"tableView\")",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginStore.Ui_PluginStore",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "peekOfCode": "class PluginManager(QObject):\n    \"\"\"\n    管理插件的加载 , 卸载 , 监控文件的添加/删除.\n    \"\"\"\n    def __init__(self, parent=None, *args, **kwargs):\n        super(PluginManager, self).__init__(parent, *args, **kwargs)\n        self.__mw = parent\n        self.__initUI()\n        self.pluginDirs = {\"pluginFolder\": os.path.join(\n        os.path.abspath(\"./\"), ",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "documentation": {}
    },
    {
        "label": "pluginsManagerPath",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "description": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "peekOfCode": "pluginsManagerPath = os.path.dirname(os.path.abspath(__file__))\n#主脚本目录\nmainPath           = os.path.dirname(pluginsManagerPath)\n#自定义插件目录\npluginsPath        =  os.path.join( mainPath, \"Plugins\")\npluginsPath2       =  os.path.join( os.path.dirname(sys.argv[0]), \"Plugins\")\n#以后可能会有其他插件目录\nAllPluginsPath     = {\"customer\":pluginsPath, \n                   \"afterPacket\":pluginsPath2}\n#设置模块搜索路径",
        "detail": "Test.partner_625781186.15_Plugins.PluginManager.PluginManager",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.Plugins.page1.Ui_PluginPage1",
        "description": "Test.partner_625781186.15_Plugins.Plugins.page1.Ui_PluginPage1",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(400, 300)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.pushButton = QtWidgets.QPushButton(Form)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.verticalLayout.addWidget(self.pushButton)\n        self.pushButton_2 = QtWidgets.QPushButton(Form)",
        "detail": "Test.partner_625781186.15_Plugins.Plugins.page1.Ui_PluginPage1",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.Plugins.page2.Ui_PluginPage2",
        "description": "Test.partner_625781186.15_Plugins.Plugins.page2.Ui_PluginPage2",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(400, 300)\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"Form\"))\nif __name__ == \"__main__\":",
        "detail": "Test.partner_625781186.15_Plugins.Plugins.page2.Ui_PluginPage2",
        "documentation": {}
    },
    {
        "label": "Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "description": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "peekOfCode": "class Form(QWidget, Ui_Form):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        \"\"\"\n        super(Form, self).__init__(parent)\n        self.setupUi(self)\n        self.__mw = parent",
        "detail": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "documentation": {}
    },
    {
        "label": "className",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "description": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "peekOfCode": "className = \"Form\"\nclass Form(QWidget, Ui_Form):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        \"\"\"\n        super(Form, self).__init__(parent)\n        self.setupUi(self)",
        "detail": "Test.partner_625781186.15_Plugins.Plugins.PluginPage0_inMainLayout",
        "documentation": {}
    },
    {
        "label": "mfunc_readJson",
        "kind": 2,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "def mfunc_readJson(f)->\"datas\":\n    '''\n    从头读取文件内容。\n    '''\n    if isinstance(f , str) :\n        f = open(setting_flie, 'a+', encoding='utf-8')\n    #指针指向；\n    f.seek(0)\n    #读取；\n    text = f.read()",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "mfunc_initJson",
        "kind": 2,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "def mfunc_initJson( setting_flie ,self=None)->\"datas\":\n    '''\n    初始化创建json。\n    @param setting_flie json路径\n    @type str\n    '''\n    with open( setting_flie ,'a+' , encoding='utf-8') as f:\n        if self == None:\n            self = QWidget()\n        try:",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "mfunc_AKrCVJson",
        "kind": 2,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "def mfunc_AKrCVJson( key_name ,  data , self=None):\n    '''\n    createKey or changeValue。\n    @param key_name 要修改的json节点的键名\n    @type str or list-str\n    @param data 新数据\n    @type all\n    '''\n    if self == None:\n        self = QWidget()",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "mfunc_reDumpJson",
        "kind": 2,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "def mfunc_reDumpJson(f , datas):\n    # 清空原来的文件\n    f.seek(0)\n    f.truncate()\n    # 写入\n    json.dump( datas, f ,  ensure_ascii=False, indent=1)",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "setting_path",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "setting_path = \"./PluginManager\"\nsetting_Name = \"plugin.json\"\n# 配置文件的路径；\nsetting_flie = os.path.join(setting_path,  setting_Name)\n# 不存在路径就创建文件夹；\nif not os.path.exists(setting_path):\n    os.makedirs(setting_path)\n    if not os.path.exists(setting_path):\n        f1 = open(setting_flie, 'a+', encoding='utf-8')\n        f1.close()",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "setting_Name",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "setting_Name = \"plugin.json\"\n# 配置文件的路径；\nsetting_flie = os.path.join(setting_path,  setting_Name)\n# 不存在路径就创建文件夹；\nif not os.path.exists(setting_path):\n    os.makedirs(setting_path)\n    if not os.path.exists(setting_path):\n        f1 = open(setting_flie, 'a+', encoding='utf-8')\n        f1.close()\n#首次创建 ， 数据默认为name；",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "setting_flie",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "setting_flie = os.path.join(setting_path,  setting_Name)\n# 不存在路径就创建文件夹；\nif not os.path.exists(setting_path):\n    os.makedirs(setting_path)\n    if not os.path.exists(setting_path):\n        f1 = open(setting_flie, 'a+', encoding='utf-8')\n        f1.close()\n#首次创建 ， 数据默认为name；\nname =  {\n         }",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "description": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "peekOfCode": "name =  {\n         }\ndef mfunc_readJson(f)->\"datas\":\n    '''\n    从头读取文件内容。\n    '''\n    if isinstance(f , str) :\n        f = open(setting_flie, 'a+', encoding='utf-8')\n    #指针指向；\n    f.seek(0)",
        "detail": "Test.partner_625781186.15_Plugins.Tools.pmf_myjson",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.main",
        "description": "Test.partner_625781186.15_Plugins.main",
        "peekOfCode": "class MainWindow(QMainWindow, Ui_MainWindow):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        \"\"\"\n        super(MainWindow, self).__init__(parent)\n        self.setupUi(self)\n        self.pluginManager = PluginManager(self)  #初始化插件管理器",
        "detail": "Test.partner_625781186.15_Plugins.main",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.15_Plugins.Ui_main",
        "description": "Test.partner_625781186.15_Plugins.Ui_main",
        "peekOfCode": "class Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(510, 378)\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\n        self.centralWidget.setObjectName(\"centralWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralWidget)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.tabWidget = QtWidgets.QTabWidget(self.centralWidget)\n        self.tabWidget.setObjectName(\"tabWidget\")",
        "detail": "Test.partner_625781186.15_Plugins.Ui_main",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.16_sqlModel.01_mapper.ui.Ui_MainWindow",
        "description": "Test.partner_625781186.16_sqlModel.01_mapper.ui.Ui_MainWindow",
        "peekOfCode": "class Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(486, 313)\n        MainWindow.setStyleSheet(\"QListView::item:alternate {\\n\"\n\"   \\n\"\n\"    background-color: rgb(85, 255, 255);\\n\"\n\"}\")\n        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)",
        "detail": "Test.partner_625781186.16_sqlModel.01_mapper.ui.Ui_MainWindow",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.16_sqlModel.01_mapper.MainWindow",
        "description": "Test.partner_625781186.16_sqlModel.01_mapper.MainWindow",
        "peekOfCode": "class MainWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self, parent=None, *args):\n        super(MainWindow, self).__init__(parent,  *args)\n        self.setupUi(self)\n        self.resize(800,600)\n        #===============================   db   ======================================#\n        # self.db = QSqlDatabase.addDatabase('QMYSQL')\n        # self.db.setHostName(\"127.0.0.1\")  # set address\n        # self.db.setUserName(\"root\")  # set user name\n        # self.db.setPassword('123456')  # set user pwd   ",
        "detail": "Test.partner_625781186.16_sqlModel.01_mapper.MainWindow",
        "documentation": {}
    },
    {
        "label": "HtmlView",
        "kind": 6,
        "importPath": "Test.partner_625781186.17_打印预览qwebengineview.main",
        "description": "Test.partner_625781186.17_打印预览qwebengineview.main",
        "peekOfCode": "class HtmlView(QWebEngineView):\n    \"\"\"Subclass QWebView and connect to a QPrintPreviewDialog object\"\"\"\n    def __init__(self, url=\"\", parent=None, ):\n        \"\"\"\n        Constructor of HtmlView\n        :param parent: parent of the view\n        :param url: url to load, if set, a loadFInished signal is emitted\n        \"\"\"\n        super().__init__(parent)\n        self.html = \"\"",
        "detail": "Test.partner_625781186.17_打印预览qwebengineview.main",
        "documentation": {}
    },
    {
        "label": "Spoiler",
        "kind": 6,
        "importPath": "Test.partner_625781186.2.折叠控件.收缩伸展控件",
        "description": "Test.partner_625781186.2.折叠控件.收缩伸展控件",
        "peekOfCode": "class Spoiler(QWidget):\n    def __init__(self, parent=None, title='', animationDuration=300):\n        \"\"\"\n        References:\n            # Adapted from c++ version\n            http://stackoverflow.com/questions/32476006/how-to-make-an-expandable-collapsable-section-widget-in-qt\n        \"\"\"\n        super(Spoiler, self).__init__(parent=parent)\n#if 此处可以跳过不看\n        self.groupBox = QtWidgets.QGroupBox(self)",
        "detail": "Test.partner_625781186.2.折叠控件.收缩伸展控件",
        "documentation": {}
    },
    {
        "label": "MyEven",
        "kind": 6,
        "importPath": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "description": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "peekOfCode": "class MyEvent (QEvent):\n    def __init__(self, *args, **kwargs):\n        super(MyEvent, self).__init__(*args, **kwargs)\n        print(MyEventType)\n        def QEvent(self,MyEventType):\n            pass\n#//信使\nclass MySender(QCoreApplication):\n    def __init__(self, *args, **kwargs):\n        super(MySender, self).__init__(*args, **kwargs)",
        "detail": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "documentation": {}
    },
    {
        "label": "MySender",
        "kind": 6,
        "importPath": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "description": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "peekOfCode": "class MySender(QCoreApplication):\n    def __init__(self, *args, **kwargs):\n        super(MySender, self).__init__(*args, **kwargs)\n    def notify(self, receiver,  event):\n        if(event.type() == MyEventType):\n            print(\"MyEventType is coming!\")\n            # //return true;\n            # /*这里不能return true,因为重写notify就是在事件被向下传递之前截住它，\n            # 随便搞它，搞完了还得给QCoreApplication::notify向下传递，除非在mySender.notify\n            # 实现了事件向下传递的那一套。直接返回的话myArmy就收不到这个事件，因为执行完这个",
        "detail": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "documentation": {}
    },
    {
        "label": "MyArm",
        "kind": 6,
        "importPath": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "description": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "peekOfCode": "class MyArmy (QWidget):\n    def MyEventHandler(self,event):\n        print(\"The event is being handled!\")\n        event.accept()\n    def event(self, event):\n        if(event.type() == MyEventType):\n            print(\"event() is dispathing MyEvent\")\n            self.MyEventHandler(event)  # //调用事件处理函数\n            if(event.isAccepted()):\n                print(\"The event has been handled!\")",
        "detail": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "documentation": {}
    },
    {
        "label": "MyWatche",
        "kind": 6,
        "importPath": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "description": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "peekOfCode": "class MyWatcher (QObject):\n    def eventFilter(self,watched, event):\n        if(event.type() == MyEventType):\n            print(\"I don't wanna filter MyEventType\")\n            return False\n        return QObject.eventFilter(self,watched, event)\nif __name__ == \"__main__\":\n    import sys\n    #//QCoreApplication a(argc, argv);\n    app = QtWidgets.QApplication(sys.argv)",
        "detail": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "documentation": {}
    },
    {
        "label": "MyEventType",
        "kind": 5,
        "importPath": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "description": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "peekOfCode": "MyEventType = QEvent.registerEventType(QEvent.User+100)\n#//长官\nclass MyEvent (QEvent):\n    def __init__(self, *args, **kwargs):\n        super(MyEvent, self).__init__(*args, **kwargs)\n        print(MyEventType)\n        def QEvent(self,MyEventType):\n            pass\n#//信使\nclass MySender(QCoreApplication):",
        "detail": "Test.partner_625781186.3.机制讲解.3.1 自定义事件.3.1.1 原理.myEvent",
        "documentation": {}
    },
    {
        "label": "CommonHelpe",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.Tools.CommonHelper",
        "description": "Test.partner_625781186.5.hoverMenu.Tools.CommonHelper",
        "peekOfCode": "class CommonHelper :\n    def __init__(self ) :\n        pass\n    @staticmethod    \n    def readQss( style):\n        with open( style , 'r') as f:\n           return f.read()",
        "detail": "Test.partner_625781186.5.hoverMenu.Tools.CommonHelper",
        "documentation": {}
    },
    {
        "label": "w_showERROR",
        "kind": 2,
        "importPath": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "description": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "peekOfCode": "def w_showERROR(widget=None): \n    errmsg = traceback.format_exc()      \n#    QMessageBox.warning(QWidget(), '请确认', errmsg,\n#                        QMessageBox.Ok)\n    msg  = QErrorMessage(widget)\n    msg.setModal(True)\n    msg.showMessage(errmsg)\ndef f_showERROR(func, *args, **kwargs):\n    def _doWhat(*args, **kwargs):\n        try:",
        "detail": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "documentation": {}
    },
    {
        "label": "f_showERROR",
        "kind": 2,
        "importPath": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "description": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "peekOfCode": "def f_showERROR(func, *args, **kwargs):\n    def _doWhat(*args, **kwargs):\n        try:\n            func(*args, **kwargs)\n        except:\n            import sys\n            app =QApplication(sys.argv)            \n            errmsg = traceback.format_exc()    \n            print(errmsg)\n            gitMsg=QMessageBox()",
        "detail": "Test.partner_625781186.5.hoverMenu.Tools.qmf_showError",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.Tools.Ui_Main",
        "description": "Test.partner_625781186.5.hoverMenu.Tools.Ui_Main",
        "peekOfCode": "class Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(648, 493)\n        MainWindow.setStyleSheet(\" #MainWindow {  border:none;}\")\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\n        self.centralWidget.setStyleSheet(\"#centralWidget {border:none;}\")\n        self.centralWidget.setObjectName(\"centralWidget\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)",
        "detail": "Test.partner_625781186.5.hoverMenu.Tools.Ui_Main",
        "documentation": {}
    },
    {
        "label": "Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget",
        "peekOfCode": "class Form(QWidget, Ui_Form):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        Constructor\n        @param parent reference to the parent widget\n        @type QWidget\n        \"\"\"",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.Ui_SKU_Widget",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.Ui_SKU_Widget",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(578, 340)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.product_links = QtWidgets.QLabel(Form)\n        self.product_links.setObjectName(\"product_links\")",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.Ui_SKU_Widget",
        "documentation": {}
    },
    {
        "label": "Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.GeographicAnalysis_Widget",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.GeographicAnalysis_Widget",
        "peekOfCode": "class Form(QWidget, Ui_Form):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        Constructor\n        @param parent reference to the parent widget\n        @type QWidget\n        \"\"\"",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.GeographicAnalysis_Widget",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.Ui_GeographicAnalysis_Widget",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.Ui_GeographicAnalysis_Widget",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(528, 300)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.analyzed_csv_label = QtWidgets.QLabel(Form)\n        self.analyzed_csv_label.setObjectName(\"analyzed_csv_label\")",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.UThroughTrain4.Ui_GeographicAnalysis_Widget",
        "documentation": {}
    },
    {
        "label": "SingeleWidget",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "peekOfCode": "class SingeleWidget(QWidget):\n    '''\n    菜单栏的每个框。\n    '''\n    #1\n    Button_hideFlag = SHOWMENU[\"setHide\"]\n    def __init__(self, parent=None):\n        '''\n        Button_hideFlag：  0 表明没有显示弹窗；1表示显示了弹窗。\n        '''",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "BaseMenuWidget",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "peekOfCode": "class BaseMenuWidget(QTableWidget):\n    #2\n    '''\n    下拉菜单。\n    '''\n    m_currentRow = None\n    m_currentCol = None\n    Menu_hideFlag = ENTERMENU[\"no\"]\n    def __init__(self, parent=None):\n        '''",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "BaseButton",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "peekOfCode": "class BaseButton(QPushButton):\n    #1\n    '''\n    菜单栏的按钮的样式。\n    '''\n    def __init__(self, parent=None):\n        super(BaseButton, self).__init__(parent)\n        self.setMinimumWidth(70)\n        self.setMaximumWidth(88)     \n        self.setMinimumHeight(self.width()) #保证是个正方形",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "ENTERMENU",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "peekOfCode": "ENTERMENU = {\"yes\":True , \"no\":False }\nclass SingeleWidget(QWidget):\n    '''\n    菜单栏的每个框。\n    '''\n    #1\n    Button_hideFlag = SHOWMENU[\"setHide\"]\n    def __init__(self, parent=None):\n        '''\n        Button_hideFlag：  0 表明没有显示弹窗；1表示显示了弹窗。",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.BaseElement",
        "documentation": {}
    },
    {
        "label": "B1",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class B1( BaseButton):\n    def __init__(self, parent=None):\n        super(B1, self).__init__(parent)\n        self._createLabel(\":/static/store_data.png\") \n    def _todo(self, *args, **kwgs):\n        self.msg = QErrorMessage()\n        self.msg.showMessage(\"你可以在此添加额外功能。\")\nclass L1(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L1, self).__init__(parent)",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class L1(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L1, self).__init__(parent)\n        self._addAction(\"病人信息\", \n                        GeographicAnalysis_Widget.Form, \n                        id=\"1\", save= \"s\")\n        self._addAction(\"病人\", )                        \n#=========================== 竞品分析 ===========================\nclass B2(BaseButton):\n    def __init__(self, parent=None):",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B2",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class B2(BaseButton):\n    def __init__(self, parent=None):\n        super(B2, self).__init__(parent)\n        self._createLabel(\":/static/competitiveProductAnalysis.png\")         \n    def _todo(self, *args, **kwgs):\n        super(B2, self)._todo()\nclass L2(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L2, self).__init__(parent)\n#        各种传入参数测试 , 也可关联到定义函数",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "L2",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class L2(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L2, self).__init__(parent)\n#        各种传入参数测试 , 也可关联到定义函数\n        self._addAction(\"病人信息\", \n                        SKU_Widget.Form, \n                        id=\"2\", save= \"s\" )  \n        self._addAction(\"检测1\")  \n        self._addAction(\"检测2\", \"hello\" ) \n        self._addAction(\"标定3\", \"word\", self.cusTomerFunc)",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B3",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class B3(BaseButton):\n    def __init__(self, parent=None):\n        super(B3, self).__init__(parent)\n        self._createLabel(\":/static/search.png\")         \n    def _todo(self, *args, **kwgs):\n        super(B3, self)._todo()\nclass L3(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L3, self).__init__(parent)\n#============================ 直通车工具 ===========================",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "L3",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class L3(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L3, self).__init__(parent)\n#============================ 直通车工具 ===========================\nclass B4(BaseButton):\n    def __init__(self, parent=None):\n        super(B4, self).__init__(parent)\n        self._createLabel(\":/static/throughTrain.png\")         \nclass L4(BaseMenuWidget):\n    def __init__(self, parent=None):",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "B4",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class B4(BaseButton):\n    def __init__(self, parent=None):\n        super(B4, self).__init__(parent)\n        self._createLabel(\":/static/throughTrain.png\")         \nclass L4(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L4, self).__init__(parent)",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "L4",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "description": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "peekOfCode": "class L4(BaseMenuWidget):\n    def __init__(self, parent=None):\n        super(L4, self).__init__(parent)",
        "detail": "Test.partner_625781186.5.hoverMenu.U_FuncWidget.Menu",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.Main",
        "description": "Test.partner_625781186.5.hoverMenu.Main",
        "peekOfCode": "class MainWindow(Ui_MainWindow, QMainWindow):\n    \"\"\"\n    主窗口.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        \"\"\"\n        super(MainWindow, self).__init__(parent)\n        self.setupUi(self)\n#        用于存储界面是否需要删除,",
        "detail": "Test.partner_625781186.5.hoverMenu.Main",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x0f\\x0d\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x1b\\x00\\x00\\x00\\x1f\\x08\\x06\\x00\\x00\\x00\\x16\\x45\\xb6\\x43\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0b\\x13\\x00\\x00\\x0b\\x13\\\n\\x01\\x00\\x9a\\x9c\\x18\\x00\\x00\\x0a\\x4d\\x69\\x43\\x43\\x50\\x50\\x68\\x6f\\\n\\x74\\x6f\\x73\\x68\\x6f\\x70\\x20\\x49\\x43\\x43\\x20\\x70\\x72\\x6f\\x66\\x69\\\n\\x6c\\x65\\x00\\x00\\x78\\xda\\x9d\\x53\\x77\\x58\\x93\\xf7\\x16\\x3e\\xdf\\xf7\\\n\\x65\\x0f\\x56\\x42\\xd8\\xf0\\xb1\\x97\\x6c\\x81\\x00\\x22\\x23\\xac\\x08\\xc8\\",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x06\\\n\\x07\\xaa\\x8a\\xf3\\\n\\x00\\x73\\\n\\x00\\x74\\x00\\x61\\x00\\x74\\x00\\x69\\x00\\x63\\\n\\x00\\x0c\\\n\\x08\\x56\\x02\\x87\\\n\\x00\\x70\\\n\\x00\\x61\\x00\\x73\\x00\\x73\\x00\\x77\\x00\\x6f\\x00\\x72\\x00\\x64\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0e\\",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v1",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "qt_resource_struct_v1 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x01\\x34\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9e\\x27\\\n\\x00\\x00\\x01\\x04\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x86\\x86\\\n\\x00\\x00\\x01\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xae\\x8a\\\n\\x00\\x00\\x01\\xfc\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x91\\xb5\\\n\\x00\\x00\\x00\\xba\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x67\\x37\\\n\\x00\\x00\\x01\\x9c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x4f\\xdb\\\n\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x4e\\x82\\",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v2",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "qt_resource_struct_v2 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x34\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9e\\x27\\\n\\x00\\x00\\x01\\x63\\xc0\\x46\\x42\\x20\\\n\\x00\\x00\\x01\\x04\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x86\\x86\\\n\\x00\\x00\\x01\\x63\\xc3\\xa6\\xa3\\x60\\\n\\x00\\x00\\x01\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xae\\x8a\\",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "qt_version",
        "kind": 5,
        "importPath": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "description": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "peekOfCode": "qt_version = QtCore.qVersion().split('.')\nif qt_version < ['5', '8', '0']:\n    rcc_version = 1\n    qt_resource_struct = qt_resource_struct_v1\nelse:\n    rcc_version = 2\n    qt_resource_struct = qt_resource_struct_v2\ndef qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():",
        "detail": "Test.partner_625781186.5.hoverMenu.tbqrc_rc",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.5.hoverMenu.Ui_Main",
        "description": "Test.partner_625781186.5.hoverMenu.Ui_Main",
        "peekOfCode": "class Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(908, 518)\n        MainWindow.setStyleSheet(\"* #MainWindow {  border:none;}\\n\"\n\" #widget{   border:none;  }\\n\"\n\"/*#topWidget QWidget{  background-color: green;   }\\n\"\n\"#widget  QLabel{ background-color: rgb(85, 0, 255);   }*/\\n\"\n\"\")\n        self.centralWidget = QtWidgets.QWidget(MainWindow)",
        "detail": "Test.partner_625781186.5.hoverMenu.Ui_Main",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "description": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # 设置窗口标题\n        self.setWindowTitle('My Browser')\n        # 设置窗口图标\n        self.setWindowIcon(QIcon('icons/penguin.png'))\n        # 设置窗口大小900*600\n        self.resize(750, 400)\n        self.show()",
        "detail": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "documentation": {}
    },
    {
        "label": "MyEngineView",
        "kind": 6,
        "importPath": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "description": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "peekOfCode": "class MyEngineView(QWebEngineView):\n    '''\n    浏览器类。\n    '''\n    def __init__(self, parent=None, ):\n        super(MyEngineView, self).__init__(parent)\n        self.parent = parent\n        #有下载信号发起\n        self.page().profile().downloadRequested.connect(self.on_downloadRequested)\n    def createWindow(self,  type):",
        "detail": "Test.partner_625781186.6.QWebEngineView下载文件.browser",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.1-QML显式的调用Python函数，无返回值.qml-test",
        "description": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.1-QML显式的调用Python函数，无返回值.qml-test",
        "peekOfCode": "class MyClass(QObject):\n    @pyqtSlot(str)    # 输入参数为str类型\n    def outputString(self, string):\n        print(string)\nif __name__ == '__main__':\n    app = QGuiApplication([])\n    path = 'test.qml'   # 加载的QML文件\n    con = MyClass()\n    view = QQuickView()\n    view.engine().quit.connect(app.quit)",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.1-QML显式的调用Python函数，无返回值.qml-test",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.2-QML显式的调用Python函数，有返回值.qml-test2",
        "description": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.2-QML显式的调用Python函数，有返回值.qml-test2",
        "peekOfCode": "class MyClass(QObject):\n    @pyqtSlot(int, result=str)    # 声明为槽，输入参数为int类型，返回值为str类型\n    def returnValue(self, value):\n        return str(value+10)\nif __name__ == '__main__':\n    path = 'test2.qml'   # 加载的QML文件\n    app = QGuiApplication([])\n    con = MyClass()\n    view = QQuickView()\n    view.engine().quit.connect(app.quit)",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.2-QML显式的调用Python函数，有返回值.qml-test2",
        "documentation": {}
    },
    {
        "label": "outputString",
        "kind": 2,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.3-QML连接信号到Python.qml-test3",
        "description": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.3-QML连接信号到Python.qml-test3",
        "peekOfCode": "def outputString(string):\n    print(string)\nif __name__ == '__main__':\n    path = 'test3.qml'   # 加载的QML文件\n    app = QGuiApplication([])\n    view = QQuickView()\n    view.engine().quit.connect(app.quit)\n    view.setSource(QUrl(path))\n    view.show()\n    context = view.rootObject()",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.3-QML连接信号到Python.qml-test3",
        "documentation": {}
    },
    {
        "label": "PieChart",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.5-信号、槽 机制.qml-test5",
        "description": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.5-信号、槽 机制.qml-test5",
        "peekOfCode": "class PieChart(QQuickPaintedItem):\n    chartCleared = pyqtSignal()  # 定义信号\n    @pyqtProperty(str)\n    def name(self):\n        return self._name\n    @name.setter\n    def name(self, name):\n        self._name = name\n    @pyqtProperty(QColor)\n    def color(self):",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.python_QML调用基础.5-信号、槽 机制.qml-test5",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.py_qml",
        "description": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.py_qml",
        "peekOfCode": "class Dialog(QDialog, Ui_Dialog):\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n        self.setupUi(self)\n        self.m_quickWidget=QQuickWidget();\n        self.m_quickWidget.setResizeMode(QQuickWidget.SizeRootObjectToView) ;\n        self.m_quickWidget.setSource(QUrl(\"py_mqltest.qml\"));\n        self.verticalLayout.addWidget(self.m_quickWidget)\nif __name__ == \"__main__\":\n    import sys",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.py_qml",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.Ui_py_qml",
        "description": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.Ui_py_qml",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(420, 317)\n        Dialog.setSizeGripEnabled(True)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.widget = QtWidgets.QWidget(Dialog)\n        self.widget.setObjectName(\"widget\")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.QDialog中嵌入qml窗体并缩放.Ui_py_qml",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.py_qml",
        "description": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.py_qml",
        "peekOfCode": "class Dialog(QMainWindow, Ui_MainWindow):\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n        self.setupUi(self)\n#        self.mywidget() #法一\n#        self.myview()#法二\n        self.myengine()\n#        self.pushButton.clicked.connect(self.pr)\n    def mywidget(self):\n        self.m_quickWidget=QQuickWidget();",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.py_qml",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.Ui_py_qml",
        "description": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.Ui_py_qml",
        "peekOfCode": "class Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(402, 518)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(\"centralwidget\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.retranslateUi(MainWindow)",
        "detail": "Test.partner_625781186.QML_QtQuick_PY.QQmlApplicationEngine之qml嵌入qtwidget_qt5.8以上.Ui_py_qml",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "Test.全局热键.HotKey",
        "description": "Test.全局热键.HotKey",
        "peekOfCode": "class Window(QWidget):\n    dialogShow = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.dialogShow.connect(self.onShowDialog, type=Qt.QueuedConnection)\n        self.logView = QTextBrowser(self)\n        self.logView.append(\"点击右上角关闭按钮会隐藏窗口,通过热键Alt+S来显示\")\n        self.logView.append(\"等待热键中\")\n        layout.addWidget(QPushButton(",
        "detail": "Test.全局热键.HotKey",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.全局热键.HotKey",
        "description": "Test.全局热键.HotKey",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    dialogShow = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.dialogShow.connect(self.onShowDialog, type=Qt.QueuedConnection)\n        self.logView = QTextBrowser(self)",
        "detail": "Test.全局热键.HotKey",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.全局热键.HotKey",
        "description": "Test.全局热键.HotKey",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    dialogShow = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.dialogShow.connect(self.onShowDialog, type=Qt.QueuedConnection)\n        self.logView = QTextBrowser(self)\n        self.logView.append(\"点击右上角关闭按钮会隐藏窗口,通过热键Alt+S来显示\")",
        "detail": "Test.全局热键.HotKey",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.全局热键.HotKey",
        "description": "Test.全局热键.HotKey",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass Window(QWidget):\n    dialogShow = pyqtSignal()\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.dialogShow.connect(self.onShowDialog, type=Qt.QueuedConnection)\n        self.logView = QTextBrowser(self)\n        self.logView.append(\"点击右上角关闭按钮会隐藏窗口,通过热键Alt+S来显示\")\n        self.logView.append(\"等待热键中\")",
        "detail": "Test.全局热键.HotKey",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "Test.自动更新.mylibs.testlibs",
        "description": "Test.自动更新.mylibs.testlibs",
        "peekOfCode": "def version():\n    return \"0.0.1\"\ndef test():\n    print(\"version: 0.0.1\")",
        "detail": "Test.自动更新.mylibs.testlibs",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Test.自动更新.mylibs.testlibs",
        "description": "Test.自动更新.mylibs.testlibs",
        "peekOfCode": "def test():\n    print(\"version: 0.0.1\")",
        "detail": "Test.自动更新.mylibs.testlibs",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自动更新.mylibs.testlibs",
        "description": "Test.自动更新.mylibs.testlibs",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef version():\n    return \"0.0.1\"\ndef test():\n    print(\"version: 0.0.1\")",
        "detail": "Test.自动更新.mylibs.testlibs",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自动更新.mylibs.testlibs",
        "description": "Test.自动更新.mylibs.testlibs",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef version():\n    return \"0.0.1\"\ndef test():\n    print(\"version: 0.0.1\")",
        "detail": "Test.自动更新.mylibs.testlibs",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自动更新.mylibs.testlibs",
        "description": "Test.自动更新.mylibs.testlibs",
        "peekOfCode": "__Version__ = \"Version 1.0\"\ndef version():\n    return \"0.0.1\"\ndef test():\n    print(\"version: 0.0.1\")",
        "detail": "Test.自动更新.mylibs.testlibs",
        "documentation": {}
    },
    {
        "label": "sitepackages",
        "kind": 5,
        "importPath": "Test.自动更新.setup",
        "description": "Test.自动更新.setup",
        "peekOfCode": "sitepackages = site.getsitepackages()[1]\npy2exe_options = {\n    \"includes\": [],\n    \"excludes\": [\"mylibs\"],  # 不打包这个\n    \"dll_excludes\": [\"MSVCP90.dll\", \"MSVCR90.dll\"],\n    \"compressed\": 1,  # compressed 值为1，则压缩；为0，不压缩，默认为0\n    \"optimize\": 2,  # optimize - 合法值是字符串（'','O','OO'）或者整型数字 (0, 1, or 2)\n    \"bundle_files\": 1\n}\nsetup(",
        "detail": "Test.自动更新.setup",
        "documentation": {}
    },
    {
        "label": "py2exe_options",
        "kind": 5,
        "importPath": "Test.自动更新.setup",
        "description": "Test.自动更新.setup",
        "peekOfCode": "py2exe_options = {\n    \"includes\": [],\n    \"excludes\": [\"mylibs\"],  # 不打包这个\n    \"dll_excludes\": [\"MSVCP90.dll\", \"MSVCR90.dll\"],\n    \"compressed\": 1,  # compressed 值为1，则压缩；为0，不压缩，默认为0\n    \"optimize\": 2,  # optimize - 合法值是字符串（'','O','OO'）或者整型数字 (0, 1, or 2)\n    \"bundle_files\": 1\n}\nsetup(\n    name=\"test\",",
        "detail": "Test.自动更新.setup",
        "documentation": {}
    },
    {
        "label": "cores",
        "kind": 5,
        "importPath": "Test.自动更新.setup",
        "description": "Test.自动更新.setup",
        "peekOfCode": "cores = glob.glob(os.path.join(\"mylibs\", \"*.py\"))\nfor core in cores:\n    py_compile.compile(\n        core, cfile=\"pyos\\\\\" + core + \"o\", doraise=True, optimize=2)\nprint(\"compile core module ok\")\n# 添加到压缩文件\nzpfd = ZipFile(\"dist\\\\mylibs\", \"w\", ZIP_DEFLATED)\nzpfd.write(\"mylibs\")\nfor core in cores:\n    zpfd.write(\"pyos\\\\\" + core + \"o\", core + \"o\")",
        "detail": "Test.自动更新.setup",
        "documentation": {}
    },
    {
        "label": "zpfd",
        "kind": 5,
        "importPath": "Test.自动更新.setup",
        "description": "Test.自动更新.setup",
        "peekOfCode": "zpfd = ZipFile(\"dist\\\\mylibs\", \"w\", ZIP_DEFLATED)\nzpfd.write(\"mylibs\")\nfor core in cores:\n    zpfd.write(\"pyos\\\\\" + core + \"o\", core + \"o\")\nzpfd.close()\nprint(\"zip core file ok\")\n# D:\\soft\\Python34\\python setup.py py2exe\n# windows\n# console",
        "detail": "Test.自动更新.setup",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "Test.自动更新.test",
        "description": "Test.自动更新.test",
        "peekOfCode": "def update():\n    # 更新\n    from mylibs import testlibs  # @UnresolvedImport\n    v1 = testlibs.version()  # 获取本地模块版本\n    v2 = \"0.0.2\"  # 模拟新版本（也可以从网络中检测）\n    if v1 != v2:  # 需要更新\n        print(\"发现新版本：0.0.2\")\n        # 模拟从网络中下载更新包并解压（也可以包含图片等其它文件）\n        with ZipFile(\"mylibs2.zip\", \"r\") as zf:\n            zf.extractall(os.path.dirname(sys.executable))  # 解压到当前目录",
        "detail": "Test.自动更新.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Test.自动更新.test",
        "description": "Test.自动更新.test",
        "peekOfCode": "def main():\n    from mylibs import testlibs  # @UnresolvedImport\n    testlibs.test()\n    print(\"当前版本：\", testlibs.version())\n    if update():\n        print(\"更新完毕，即将重启\")\n        import platform\n        if platform.system() == \"Windows\":\n            import ctypes\n            ctypes.windll.user32.MessageBoxW(",
        "detail": "Test.自动更新.test",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自动更新.test",
        "description": "Test.自动更新.test",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef update():\n    # 更新\n    from mylibs import testlibs  # @UnresolvedImport\n    v1 = testlibs.version()  # 获取本地模块版本\n    v2 = \"0.0.2\"  # 模拟新版本（也可以从网络中检测）\n    if v1 != v2:  # 需要更新\n        print(\"发现新版本：0.0.2\")",
        "detail": "Test.自动更新.test",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自动更新.test",
        "description": "Test.自动更新.test",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef update():\n    # 更新\n    from mylibs import testlibs  # @UnresolvedImport\n    v1 = testlibs.version()  # 获取本地模块版本\n    v2 = \"0.0.2\"  # 模拟新版本（也可以从网络中检测）\n    if v1 != v2:  # 需要更新\n        print(\"发现新版本：0.0.2\")\n        # 模拟从网络中下载更新包并解压（也可以包含图片等其它文件）",
        "detail": "Test.自动更新.test",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自动更新.test",
        "description": "Test.自动更新.test",
        "peekOfCode": "__Version__ = \"Version 1.0\"\ndef update():\n    # 更新\n    from mylibs import testlibs  # @UnresolvedImport\n    v1 = testlibs.version()  # 获取本地模块版本\n    v2 = \"0.0.2\"  # 模拟新版本（也可以从网络中检测）\n    if v1 != v2:  # 需要更新\n        print(\"发现新版本：0.0.2\")\n        # 模拟从网络中下载更新包并解压（也可以包含图片等其它文件）\n        with ZipFile(\"mylibs2.zip\", \"r\") as zf:",
        "detail": "Test.自动更新.test",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Test.自定义import.src.test",
        "description": "Test.自定义import.src.test",
        "peekOfCode": "def test(a, b):\n    return a + b",
        "detail": "Test.自定义import.src.test",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自定义import.src.test",
        "description": "Test.自定义import.src.test",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef test(a, b):\n    return a + b",
        "detail": "Test.自定义import.src.test",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自定义import.src.test",
        "description": "Test.自定义import.src.test",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\ndef test(a, b):\n    return a + b",
        "detail": "Test.自定义import.src.test",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自定义import.src.test",
        "description": "Test.自定义import.src.test",
        "peekOfCode": "__Version__ = \"Version 1.0\"\ndef test(a, b):\n    return a + b",
        "detail": "Test.自定义import.src.test",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自定义import.build",
        "description": "Test.自定义import.build",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport base64\nimport xxtea  # @UnresolvedImport\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nwith open(\"src/test.py\", \"rb\") as fi:\n    open(\"test.irony\", \"wb\").write(xxtea.encrypt(fi.read(), KEY))\nprint(\"ok\")",
        "detail": "Test.自定义import.build",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自定义import.build",
        "description": "Test.自定义import.build",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nimport base64\nimport xxtea  # @UnresolvedImport\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nwith open(\"src/test.py\", \"rb\") as fi:\n    open(\"test.irony\", \"wb\").write(xxtea.encrypt(fi.read(), KEY))\nprint(\"ok\")",
        "detail": "Test.自定义import.build",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自定义import.build",
        "description": "Test.自定义import.build",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nimport base64\nimport xxtea  # @UnresolvedImport\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nwith open(\"src/test.py\", \"rb\") as fi:\n    open(\"test.irony\", \"wb\").write(xxtea.encrypt(fi.read(), KEY))\nprint(\"ok\")",
        "detail": "Test.自定义import.build",
        "documentation": {}
    },
    {
        "label": "KEY",
        "kind": 5,
        "importPath": "Test.自定义import.build",
        "description": "Test.自定义import.build",
        "peekOfCode": "KEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nwith open(\"src/test.py\", \"rb\") as fi:\n    open(\"test.irony\", \"wb\").write(xxtea.encrypt(fi.read(), KEY))\nprint(\"ok\")",
        "detail": "Test.自定义import.build",
        "documentation": {}
    },
    {
        "label": "IronyImporter",
        "kind": 6,
        "importPath": "Test.自定义import.IronyImporter",
        "description": "Test.自定义import.IronyImporter",
        "peekOfCode": "class IronyImporter:\n    @classmethod\n    def find_module(cls, name, path=None):\n        name = name + \".irony\"\n        if not os.path.isfile(name):\n            return None\n        return cls\n    @classmethod\n    def load_module(cls, name):\n        if name in sys.modules:",
        "detail": "Test.自定义import.IronyImporter",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自定义import.IronyImporter",
        "description": "Test.自定义import.IronyImporter",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nclass IronyImporter:\n    @classmethod\n    def find_module(cls, name, path=None):\n        name = name + \".irony\"\n        if not os.path.isfile(name):\n            return None",
        "detail": "Test.自定义import.IronyImporter",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自定义import.IronyImporter",
        "description": "Test.自定义import.IronyImporter",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nclass IronyImporter:\n    @classmethod\n    def find_module(cls, name, path=None):\n        name = name + \".irony\"\n        if not os.path.isfile(name):\n            return None\n        return cls",
        "detail": "Test.自定义import.IronyImporter",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自定义import.IronyImporter",
        "description": "Test.自定义import.IronyImporter",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nKEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nclass IronyImporter:\n    @classmethod\n    def find_module(cls, name, path=None):\n        name = name + \".irony\"\n        if not os.path.isfile(name):\n            return None\n        return cls\n    @classmethod",
        "detail": "Test.自定义import.IronyImporter",
        "documentation": {}
    },
    {
        "label": "KEY",
        "kind": 5,
        "importPath": "Test.自定义import.IronyImporter",
        "description": "Test.自定义import.IronyImporter",
        "peekOfCode": "KEY = base64.b85decode(\"HF5^hbNbOVOKM=(SB`7h\")\nclass IronyImporter:\n    @classmethod\n    def find_module(cls, name, path=None):\n        name = name + \".irony\"\n        if not os.path.isfile(name):\n            return None\n        return cls\n    @classmethod\n    def load_module(cls, name):",
        "detail": "Test.自定义import.IronyImporter",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.自定义import.main",
        "description": "Test.自定义import.main",
        "peekOfCode": "__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 首先要引入importer\nimport IronyImporter  # @UnresolvedImport @UnusedImport\n# 测试开始\nimport test\nprint(test)\nprint(dir(test))\nprint(test.test(1, 5))  # @UndefinedVariable",
        "detail": "Test.自定义import.main",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.自定义import.main",
        "description": "Test.自定义import.main",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n# 首先要引入importer\nimport IronyImporter  # @UnresolvedImport @UnusedImport\n# 测试开始\nimport test\nprint(test)\nprint(dir(test))\nprint(test.test(1, 5))  # @UndefinedVariable",
        "detail": "Test.自定义import.main",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.自定义import.main",
        "description": "Test.自定义import.main",
        "peekOfCode": "__Version__ = \"Version 1.0\"\n# 首先要引入importer\nimport IronyImporter  # @UnresolvedImport @UnusedImport\n# 测试开始\nimport test\nprint(test)\nprint(dir(test))\nprint(test.test(1, 5))  # @UndefinedVariable",
        "detail": "Test.自定义import.main",
        "documentation": {}
    },
    {
        "label": "ZoomButton",
        "kind": 6,
        "importPath": "Test.ButtomZoom",
        "description": "Test.ButtomZoom",
        "peekOfCode": "class ZoomButton(QPushButton):\n    def __init__(self, *args, **kwargs):\n        super(ZoomButton, self).__init__(*args, **kwargs)\n        self._animation = QPropertyAnimation(\n            self, b'geometry', self, duration=200)\n    def updatePos(self):\n        # 记录自己的固定的geometry值\n        self._geometry = self.geometry()\n        self._rect = QRect(\n            self._geometry.x() - 6,",
        "detail": "Test.ButtomZoom",
        "documentation": {}
    },
    {
        "label": "TestWindow",
        "kind": 6,
        "importPath": "Test.ButtomZoom",
        "description": "Test.ButtomZoom",
        "peekOfCode": "class TestWindow(QWidget):\n    # 测试窗口\n    def __init__(self, *args, **kwargs):\n        super(TestWindow, self).__init__(*args, **kwargs)\n        # 1. 加入布局中\n        layout = QHBoxLayout(self)\n        layout.addSpacerItem(QSpacerItem(\n            40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))\n        self.button1 = ZoomButton('按钮1', self)\n        layout.addWidget(self.button1)",
        "detail": "Test.ButtomZoom",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.ButtomZoom",
        "description": "Test.ButtomZoom",
        "peekOfCode": "__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ZoomButton(QPushButton):\n    def __init__(self, *args, **kwargs):\n        super(ZoomButton, self).__init__(*args, **kwargs)\n        self._animation = QPropertyAnimation(\n            self, b'geometry', self, duration=200)",
        "detail": "Test.ButtomZoom",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.ButtomZoom",
        "description": "Test.ButtomZoom",
        "peekOfCode": "__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\nclass ZoomButton(QPushButton):\n    def __init__(self, *args, **kwargs):\n        super(ZoomButton, self).__init__(*args, **kwargs)\n        self._animation = QPropertyAnimation(\n            self, b'geometry', self, duration=200)\n    def updatePos(self):\n        # 记录自己的固定的geometry值\n        self._geometry = self.geometry()",
        "detail": "Test.ButtomZoom",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.ButtomZoom",
        "description": "Test.ButtomZoom",
        "peekOfCode": "__Version__ = \"Version 1.0\"\nclass ZoomButton(QPushButton):\n    def __init__(self, *args, **kwargs):\n        super(ZoomButton, self).__init__(*args, **kwargs)\n        self._animation = QPropertyAnimation(\n            self, b'geometry', self, duration=200)\n    def updatePos(self):\n        # 记录自己的固定的geometry值\n        self._geometry = self.geometry()\n        self._rect = QRect(",
        "detail": "Test.ButtomZoom",
        "documentation": {}
    },
    {
        "label": "PathComboBox",
        "kind": 6,
        "importPath": "Test.ColumnView",
        "description": "Test.ColumnView",
        "peekOfCode": "class PathComboBox(QComboBox):\n    def __init__(self, *args, is_item=False, **kwargs):\n        super(PathComboBox, self).__init__(*args, **kwargs)\n        self.is_item = is_item\n        if not self.is_item:\n            self.setEditable(True)\n            layout = QHBoxLayout(self)\n            layout.setSpacing(0)\n            layout.setContentsMargins(0, 0, 0, 23)\n            layout.addItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))",
        "detail": "Test.ColumnView",
        "documentation": {}
    },
    {
        "label": "__Author__",
        "kind": 5,
        "importPath": "Test.ColumnView",
        "description": "Test.ColumnView",
        "peekOfCode": "__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nclass PathComboBox(QComboBox):\n    def __init__(self, *args, is_item=False, **kwargs):\n        super(PathComboBox, self).__init__(*args, **kwargs)\n        self.is_item = is_item\n        if not self.is_item:\n            self.setEditable(True)\n            layout = QHBoxLayout(self)",
        "detail": "Test.ColumnView",
        "documentation": {}
    },
    {
        "label": "__Copyright__",
        "kind": 5,
        "importPath": "Test.ColumnView",
        "description": "Test.ColumnView",
        "peekOfCode": "__Copyright__ = 'Copyright (c) 2020'\n__Version__ = 'Version 1.0'\nclass PathComboBox(QComboBox):\n    def __init__(self, *args, is_item=False, **kwargs):\n        super(PathComboBox, self).__init__(*args, **kwargs)\n        self.is_item = is_item\n        if not self.is_item:\n            self.setEditable(True)\n            layout = QHBoxLayout(self)\n            layout.setSpacing(0)",
        "detail": "Test.ColumnView",
        "documentation": {}
    },
    {
        "label": "__Version__",
        "kind": 5,
        "importPath": "Test.ColumnView",
        "description": "Test.ColumnView",
        "peekOfCode": "__Version__ = 'Version 1.0'\nclass PathComboBox(QComboBox):\n    def __init__(self, *args, is_item=False, **kwargs):\n        super(PathComboBox, self).__init__(*args, **kwargs)\n        self.is_item = is_item\n        if not self.is_item:\n            self.setEditable(True)\n            layout = QHBoxLayout(self)\n            layout.setSpacing(0)\n            layout.setContentsMargins(0, 0, 0, 23)",
        "detail": "Test.ColumnView",
        "documentation": {}
    },
    {
        "label": "isEnglish",
        "kind": 2,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "def isEnglish(s):\n    try:\n        s.encode(encoding='utf-8').decode('ascii')\n    except UnicodeDecodeError:\n        return False\n    else:\n        return True\ndef loadFile(filename):\n    f = open(filename, \"r\", encoding='utf8')\n    lines = f.readlines()",
        "detail": "trans",
        "documentation": {}
    },
    {
        "label": "loadFile",
        "kind": 2,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "def loadFile(filename):\n    f = open(filename, \"r\", encoding='utf8')\n    lines = f.readlines()\n    f.close()\n    return lines\ndef saveFile(filename, lines):\n    f = open(filename, \"w\", encoding='utf8')\n    f.writelines(lines)\n    f.close()\ndef transRun(lines):",
        "detail": "trans",
        "documentation": {}
    },
    {
        "label": "saveFile",
        "kind": 2,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "def saveFile(filename, lines):\n    f = open(filename, \"w\", encoding='utf8')\n    f.writelines(lines)\n    f.close()\ndef transRun(lines):\n    translator = google_translator()\n    newLines = []\n    for line in lines:\n        match = re.search('#.*$', line)\n        if match:",
        "detail": "trans",
        "documentation": {}
    },
    {
        "label": "transRun",
        "kind": 2,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "def transRun(lines):\n    translator = google_translator()\n    newLines = []\n    for line in lines:\n        match = re.search('#.*$', line)\n        if match:\n            if (isEnglish(match.group())):\n                newLines.append(line)\n                continue\n            reText = translator.translate(match.group(), lang_tgt='ko')",
        "detail": "trans",
        "documentation": {}
    }
]